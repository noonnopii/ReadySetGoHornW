Loading Loader.exe
[12/15 11:04:19:586   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[12/15 11:04:19:941    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[12/15 11:04:19:960    CESocket.cpp(00101)] :~CCESocket()

[12/15 11:04:20:210    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[12/15 11:04:20:250    CESocket.cpp(00101)] :~CCESocket()

[12/15 11:04:21:715    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[12/15 11:04:21:722   WinAtmCtl.cpp(01640)] :CSuppressOleBusyMsg()
[12/15 11:04:21:722   WinAtmCtl.cpp(01651)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[0120A7B8]
[12/15 11:04:21:722   WinAtmCtl.cpp(00202)] :===============================================================
[12/15 11:04:21:722   WinAtmCtl.cpp(00203)] :===============================================================
[12/15 11:04:21:723   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[12/15 11:04:21:724   WinAtmCtl.cpp(00363)] :OnCreate()
[12/15 11:04:21:791   WinAtmCtl.cpp(00377)] :OnCreate():return
[12/15 11:04:21:791   WinAtmCtl.cpp(01168)] :handle1=[10210]
[12/15 11:04:21:791   WinAtmCtl.cpp(01172)] :handle2=[1020e]
[12/15 11:04:21:839   WinAtmCtl.cpp(00977)] :AtmStart()
[12/15 11:04:21:840      DevCmn.cpp(00045)] :CDevCmn()
[12/15 11:04:21:840      DevCmn.cpp(00053)] :CDevCmn():return
[12/15 11:04:21:840     TranCmn.cpp(00032)] :CTranCmn()
[12/15 11:04:21:840     TranCmn.cpp(00033)] :CTranCmn():return
[12/15 11:04:21:841      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[12/15 11:04:21:946      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : FDK1
[12/15 11:04:21:946      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 2
[12/15 11:04:21:947  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[12/15 11:04:21:947  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[12/15 11:04:21:948  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[12/15 11:04:21:948  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[12/15 11:04:21:949  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1876731876, m_strProtocol : STANDARD3, m_nEnqTimeout : 30000
[12/15 11:04:21:950  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1876731876, m_strProtocol : STANDARD3, m_nEnqTimeout : 30000
[12/15 11:04:21:950     NetWork.cpp(00095)] :[SetInformation] CtrlType : 2, LineType : 2
[12/15 11:04:22:008 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[12/15 11:04:30:312      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[12/15 11:04:30:328      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1215]
[12/15 11:04:30:328      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[],nStep[1]
[12/15 11:04:30:328      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:328      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1215\Log1215.zip]
[12/15 11:04:30:328      DevCmn.cpp(06424)] :BSTrace Log
[12/15 11:04:30:328      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1215\BSTrace1712151104.nwlog]
[12/15 11:04:30:437      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[12/15 11:04:30:437      DevCmn.cpp(06444)] :BSTrace Log Trace End
[12/15 11:04:30:437      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Log1215\BSTrace1712151104.nwlog],nStep[2]
[12/15 11:04:30:703      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:703      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1215\BSTrace1712151104.nwlog]
[12/15 11:04:30:703      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[12/15 11:04:30:718      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:718      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[12/15 11:04:30:718      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[12/15 11:04:30:718      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:718      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[12/15 11:04:30:718      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[12/15 11:04:30:718      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:718      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[12/15 11:04:30:718      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[12/15 11:04:30:734      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:734      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[12/15 11:04:30:734      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[12/15 11:04:30:734      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:734      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[12/15 11:04:30:734      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[12/15 11:04:30:734      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:734      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[12/15 11:04:30:734      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Log15.txt],nStep[2]
[12/15 11:04:30:781      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:781      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log15.txt]
[12/15 11:04:30:781      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Mwi15.txt],nStep[2]
[12/15 11:04:30:796      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:796      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi15.txt]
[12/15 11:04:30:796      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Rear15.txt],nStep[2]
[12/15 11:04:30:812      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:812      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear15.txt]
[12/15 11:04:30:812      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\RMSLog15.txt],nStep[2]
[12/15 11:04:30:828      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:828      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog15.txt]
[12/15 11:04:30:828      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\RMSTrace15_#1.txt],nStep[2]
[12/15 11:04:30:828      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[12/15 11:04:30:828      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace15_#1.txt]
[12/15 11:04:30:828      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\MwiOp15.txt],nStep[2]
[12/15 11:04:30:843      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:843      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp15.txt]
[12/15 11:04:30:843      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Log14.txt],nStep[2]
[12/15 11:04:30:968      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:30:968      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log14.txt]
[12/15 11:04:30:968      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Mwi14.txt],nStep[2]
[12/15 11:04:31:031      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:31:031      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi14.txt]
[12/15 11:04:31:031      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\Rear14.txt],nStep[2]
[12/15 11:04:31:109      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:31:109      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear14.txt]
[12/15 11:04:31:109      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\RMSLog14.txt],nStep[2]
[12/15 11:04:31:109      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:31:109      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog14.txt]
[12/15 11:04:31:109      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\RMSTrace14_#1.txt],nStep[2]
[12/15 11:04:31:109      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[12/15 11:04:31:109      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace14_#1.txt]
[12/15 11:04:31:109      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1215\Log1215.zip],strAddFileName[D:\TRACE\MwiOp14.txt],nStep[3]
[12/15 11:04:31:156      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[12/15 11:04:31:156      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp14.txt]
[12/15 11:04:31:156      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[12/15 11:04:31:156      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||MX5100T||SUPERVISOR||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:04:31:156      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||MX5100T||SUPERVISOR||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:04:31:156      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[12/15 11:04:31:156      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[12/15 11:04:31:328      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[12/15 11:04:31:328      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[12/15 11:04:31:328      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[12/15 11:04:31:328      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[12/15 11:04:31:328      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[12/15 11:04:31:328      DevApl.cpp(00718)] :    BATTERY LOW SHUTDOWN OPTION IS DISABLED
[12/15 11:04:31:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[12/15 11:04:31:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[12/15 11:04:31:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[12/15 11:04:31:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[12/15 11:04:31:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[12/15 11:04:31:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[12/15 11:04:31:328       Sound.cpp(00059)] :OpenDevice()
[12/15 11:04:31:328       Sound.cpp(00076)] :OpenDevice()=[0]
[12/15 11:04:31:328      DevApl.cpp(10595)] :BINLIST Count of BinList =[0], Command=[UPDATE]
[12/15 11:04:31:359      DevApl.cpp(10626)] :BINLIST nCntMain=[0]
[12/15 11:04:31:375      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[0]
[12/15 11:04:31:375      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=84e4d)
[12/15 11:04:31:375      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[12/15 11:04:31:375      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[12/15 11:04:31:375      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[12/15 11:04:31:375     TranCmn.cpp(00065)] :SetOwner()
[12/15 11:04:31:390     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[D01.05.00.00]
[12/15 11:04:31:906     TranCmn.cpp(00108)] :AP VERSION = [D01.05.00.00 NHD CD                     ]
[12/15 11:04:31:906     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[12/15 11:04:31:906     TranCmn.cpp(00381)] :Successfully read AID Total Count = [17] => Term_data Exist : Return without creating
[12/15 11:04:31:906     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[12/15 11:04:31:921     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[12/15 11:04:31:937     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[12/15 11:04:31:953     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[12/15 11:04:31:953     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[12/15 11:04:31:968     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[1], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[12/15 11:04:31:968     TranCmn.cpp(00287)] :nCount[0]
[12/15 11:04:31:984 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[12/15 11:04:32:015 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[12/15 11:04:32:015     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[12/15 11:04:32:015     TranCmn.cpp(00364)] :SetOwner():return
[12/15 11:04:32:015   WinAtmCtl.cpp(01662)] :Suppress(): pOMF=[0120A7B8]
[12/15 11:04:32:015   WinAtmCtl.cpp(01669)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[12/15 11:04:32:015   WinAtmCtl.cpp(01274)] :strDate=[15], strYYMM=[1712]
[12/15 11:04:32:015      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[12/15 11:04:32:031      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:04:32:031      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[12/15 11:04:32:031      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[12/15 11:04:32:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:04:32:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:04:32:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[12/15 11:04:32:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[12/15 11:04:32:031      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:04:32:031      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[12/15 11:04:32:031       Sound.cpp(00148)] :Stop
[12/15 11:04:32:031       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:04:32:031      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:04:32:031      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:04:32:031      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[AP]
[12/15 11:04:32:031      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:04:32:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:04:32:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:04:32:031      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:04:32:046      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:04:32:046      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[12/15 11:04:32:046      DevCmn.cpp(04566)] :fnDOR_Initialize()
[12/15 11:04:33:973      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[12/15 11:04:33:973      DevCmn.cpp(04678)] :fnLGT_Initialize()
[12/15 11:04:35:286      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[12/15 11:04:35:286      DevCmn.cpp(04931)] :fnSPL_Initialize()
[12/15 11:04:35:286      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[12/15 11:04:35:286      DevCmn.cpp(05196)] :fnPIN_Initialize()
[12/15 11:04:39:676      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[12/15 11:04:39:676      DevCmn.cpp(05541)] :fnSNS_Initialize()
[12/15 11:04:40:208      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[12/15 11:04:40:208      DevCmn.cpp(04389)] :fnCMR_Initialize()
[12/15 11:04:40:208      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[12/15 11:04:40:208      DevCmn.cpp(05032)] :fnUPS_Initialize()
[12/15 11:04:40:864      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[12/15 11:04:42:708   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:04:42:708   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:04:42:708      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[12/15 11:04:43:645 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:04:43:645      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=3)
[12/15 11:04:43:645      DevCmn.cpp(05990)] :  New Volume Level = [3]
[12/15 11:04:43:645      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [19660]
[12/15 11:04:43:645      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[19660])
[12/15 11:04:43:645      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[12/15 11:04:43:645 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[12/15 11:04:43:645      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:04:44:239      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[12/15 11:04:44:254      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[12/15 11:04:44:270      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[12/15 11:04:44:270      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[12/15 11:04:44:301 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[213270528], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1934082048]
[12/15 11:04:44:301      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:04:44:301      DevApl.cpp(02166)] :Current Down Time=[15967]
[12/15 11:04:44:317      DevApl.cpp(02169)] :Updated Time=[16131], nTotalSec=[164]
[12/15 11:04:44:317      DevApl.cpp(02173)] :Error Year & Month =[201712], Down Time = [1443]
[12/15 11:04:44:317      DevApl.cpp(02175)] :Error Monthly Down Time=[1607]
[12/15 11:04:44:333      DevApl.cpp(02177)] :Updated Time=[1607], nTotalSec=[164]
[12/15 11:04:44:379 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[12/15 11:04:44:379 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[12/15 11:04:44:379 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:04:44:489 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:04:44:489      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[12/15 11:04:44:504      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0207]
[12/15 11:04:44:504      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[12/15 11:04:44:504      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[12/15 11:04:44:504       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[12/15 11:04:44:504       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[12/15 11:04:44:504       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[12/15 11:04:44:520       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0207']
[12/15 11:04:44:567       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[12/15 11:04:44:567       DevDB.cpp(01076)] :fbMDB_InsertData()
[12/15 11:04:44:567       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[12/15 11:04:44:567       DevDB.cpp(00079)] :OpenDataBase End
[12/15 11:04:44:567       DevDB.cpp(00127)] :ExecuteQuery Start!
[12/15 11:04:44:567       DevDB.cpp(00146)] :ExecuteQuery End!
[12/15 11:04:44:567       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[12/15 11:04:44:567       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[12/15 11:04:44:567       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 12/15/2017 11:04:44 EJ NUMBER = 0207 ] |11:04:44 [Power On]<END_EJRNL>]
[12/15 11:04:44:567       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0207','12','15','2017','11','04','44','System Power On<START_EJRNL>[ 12/15/2017 11:04:44 EJ NUMBER = 0207 ] |11:04:44 [Power On]<END_EJRNL>')]
[12/15 11:04:44:614       DevDB.cpp(00115)] :SingleExcute() Normal End
[12/15 11:04:44:614       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[12/15 11:04:44:614       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[12/15 11:04:44:614       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[12/15 11:04:44:614       DevDB.cpp(00079)] :OpenDataBase End
[12/15 11:04:44:614       DevDB.cpp(00127)] :ExecuteQuery Start!
[12/15 11:04:44:614       DevDB.cpp(00146)] :ExecuteQuery End!
[12/15 11:04:44:614       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[207]
[12/15 11:04:44:614       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [207]
[12/15 11:04:44:614       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[206], m_bRecordCountFinal=[1]
[12/15 11:04:44:661       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [207]
[12/15 11:04:44:661      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 12/15/2017 11:04:44 EJ NUMBER = 0207 ] |11:04:44 [Power On]<END_EJRNL>]
[12/15 11:04:44:661      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 12/15/2017 11:04:44 EJ NUMBER = 0207 ] |11:04:44 [Power On]<END_EJRNL>]
[12/15 11:04:44:661      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[12/15 11:04:44:739      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:04:44:739      DevCmn.cpp(05177)] :fstrPIN_GetKCV(szKeyName[MASTERK3])
[12/15 11:04:44:739      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:04:44:895      DevCmn.cpp(05185)] :fstrPIN_GetKCV(...):return[A6570471840418C4]
[12/15 11:04:44:895 AtmModeCtrl.cpp(00156)] :TDES MKEY CHECKSUM = [A6 57]
[12/15 11:04:44:895 AtmModeCtrl.cpp(00174)] :ATM_INIT, EPP is 512K and Keymode is overwritten, New Keymode = [3]
[12/15 11:04:44:895 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:04:44:895      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:04:44:895      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:04:44:895      DevApl.cpp(02499)] :fnAPL_ClearError()
[12/15 11:04:44:942      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[12/15 11:04:44:942      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[12/15 11:04:44:942      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[12/15 11:04:44:942      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[12/15 11:04:44:942      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[12/15 11:04:44:942      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:04:44:942      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:04:44:958      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:04:44:973      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:04:44:973      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:04:44:973      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:04:44:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:04:44:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:04:44:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:04:44:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:04:44:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:04:45:004      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[12/15 11:04:45:004      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[12/15 11:04:45:004      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[12/15 11:04:45:004      DevApl.cpp(02499)] :fnAPL_ClearError()
[12/15 11:04:45:051      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[12/15 11:04:45:051      DevCmn.cpp(00683)] :fnSPR_Initialize()
[12/15 11:04:45:684      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[12/15 11:04:45:684      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[12/15 11:04:45:684      DevCmn.cpp(01070)] :fnMCU_Initialize()
[12/15 11:04:49:270      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[12/15 11:04:49:270      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[12/15 11:04:49:270      DevCmn.cpp(03781)] :fnCDU_Initialize()
[12/15 11:05:02:723      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[12/15 11:05:05:864      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[12/15 11:05:09:004      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[12/15 11:05:09:083      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[12/15 11:05:09:083      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[12/15 11:05:12:270      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[12/15 11:05:12:270      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[12/15 11:05:12:270      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(998)
[12/15 11:05:12:286      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[12/15 11:05:12:286      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(998)
[12/15 11:05:12:301      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[12/15 11:05:15:458      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[12/15 11:05:15:458      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:05:15:536      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(1000)
[12/15 11:05:15:551      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(1000)
[12/15 11:05:15:567      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[12/15 11:05:15:567      DevCmn.cpp(03320)] :fnCDU_GetCSTStatus(nCSTNo[2]):return(1)
[12/15 11:05:15:567      DevCmn.cpp(03222)] :fnCDU_GetRecycleBoxStatus():return(1)
[12/15 11:05:15:567      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[12/15 11:05:15:567      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[12/15 11:05:15:567      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[12/15 11:05:15:567      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][1][0][0]
[12/15 11:05:15:567      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[12/15 11:05:15:583      DevNet.cpp(00196)] :[PutATMIPSettings]
[12/15 11:05:16:801 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[12/15 11:05:16:801 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[12/15 11:05:16:895      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:05:16:895      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[12/15 11:05:17:098      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:05:17:129     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[12/15 11:05:17:129     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[12/15 11:05:17:223      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APRUN]
[12/15 11:05:17:223      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[12/15 11:05:17:223 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD3]
[12/15 11:05:17:223      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[12/15 11:05:17:223      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[12/15 11:05:17:223 TranNmsProc.cpp(01046)] :fnAPP_UpdateDispensingCSTsStatus(): Status=[0]->[1]
[12/15 11:05:17:270 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[12/15 11:05:18:176 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:05:18:176 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:05:18:176      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:05:18:176      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:05:18:176 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[12/15 11:05:18:723      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:05:19:442      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:05:19:442   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:05:19:442   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:05:19:442      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:05:19:442   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:05:19:442   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:05:19:458      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:05:19:458      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:05:19:458      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:05:19:458      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:05:19:458      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:05:19:458      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:05:19:458      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:05:19:473      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:05:19:473      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:05:19:489      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:05:19:489      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:05:19:489      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:05:19:489      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:05:19:504      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:05:19:504      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:05:19:504      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:05:19:504      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:05:19:536      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:05:19:536      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:05:19:567      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[12/15 11:05:19:583      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0208]
[12/15 11:05:19:583      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[12/15 11:05:19:583      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[12/15 11:05:19:583       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[12/15 11:05:19:583       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[12/15 11:05:19:583       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[12/15 11:05:19:598       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0208']
[12/15 11:05:19:645       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[12/15 11:05:19:645       DevDB.cpp(01076)] :fbMDB_InsertData()
[12/15 11:05:19:645       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[12/15 11:05:19:645       DevDB.cpp(00079)] :OpenDataBase End
[12/15 11:05:19:645       DevDB.cpp(00127)] :ExecuteQuery Start!
[12/15 11:05:19:645       DevDB.cpp(00146)] :ExecuteQuery End!
[12/15 11:05:19:645       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[12/15 11:05:19:645       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[12/15 11:05:19:645       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 12/15/2017 11:05:19 EJ NUMBER = 0208 ] |11:05:19 [SERVICE MODE]<END_EJRNL>]
[12/15 11:05:19:645       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0208','12','15','2017','11','05','19','Change into service mode<START_EJRNL>[ 12/15/2017 11:05:19 EJ NUMBER = 0208 ] |11:05:19 [SERVICE MODE]<END_EJRNL>')]
[12/15 11:05:19:692       DevDB.cpp(00115)] :SingleExcute() Normal End
[12/15 11:05:19:692       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[12/15 11:05:19:692       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[12/15 11:05:19:692       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[12/15 11:05:19:692       DevDB.cpp(00079)] :OpenDataBase End
[12/15 11:05:19:692       DevDB.cpp(00127)] :ExecuteQuery Start!
[12/15 11:05:19:692       DevDB.cpp(00146)] :ExecuteQuery End!
[12/15 11:05:19:692       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[208]
[12/15 11:05:19:692       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [208]
[12/15 11:05:19:692       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[207], m_bRecordCountFinal=[1]
[12/15 11:05:19:739       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [208]
[12/15 11:05:19:739      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 12/15/2017 11:05:19 EJ NUMBER = 0208 ] |11:05:19 [SERVICE MODE]<END_EJRNL>]
[12/15 11:05:19:739      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 12/15/2017 11:05:19 EJ NUMBER = 0208 ] |11:05:19 [SERVICE MODE]<END_EJRNL>]
[12/15 11:05:19:739      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[12/15 11:05:19:754      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:05:22:551 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:05:22:551      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[12/15 11:05:22:551      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[12/15 11:05:22:551 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[12/15 11:05:22:551 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:05:22:551      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:05:22:551      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:05:23:067      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:05:23:833      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:05:23:833   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:05:23:833   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:05:23:833      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:05:23:833   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:05:23:833   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:05:23:848      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:05:23:848      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:05:23:848      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:05:23:848      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:05:23:848      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:05:23:848      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:05:23:848      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:05:23:848      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:05:23:864      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:05:23:864      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:05:23:864      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:05:23:879      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:05:23:879      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:05:23:879      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:05:23:879      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:05:23:879      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:05:23:895      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:05:23:911      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:05:23:911 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:05:23:911 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:05:23:911 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:05:23:911 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:05:23:911 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[12/15 11:05:23:911   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:05:23:911   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:05:23:911   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:05:23:911   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:05:23:911   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:05:23:911   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:05:23:911   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[12/15 11:05:23:911   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[12/15 11:05:23:911      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:05:23:911      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:05:23:911      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:05:23:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:05:23:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:05:23:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:05:23:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:05:23:926      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:05:23:926      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:05:23:926       Sound.cpp(00148)] :Stop
[12/15 11:05:23:926       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:05:23:926      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:05:23:926      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:05:23:926      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:05:23:926      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:05:23:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:05:23:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:05:23:926      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:05:23:926      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:05:23:926      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:05:29:629      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:05:29:629 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[12/15 11:05:29:708 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[12/15 11:05:29:739 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[12/15 11:05:29:786 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[12/15 11:05:29:864 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[12/15 11:05:30:004 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[12/15 11:05:30:004 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[12/15 11:05:30:020 TranMainProc.cp(00182)] :TranStatus[11]
[12/15 11:05:30:020 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[12/15 11:05:30:020 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[12/15 11:05:30:020     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [D01.05.00.00 NHD CD                     ]
[12/15 11:05:30:020     TranCmn.cpp(00663)] :m_KeyMode = [3]
[12/15 11:05:30:020     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[12/15 11:05:30:098     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[12/15 11:05:30:129     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[12/15 11:05:30:129     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[12/15 11:05:30:129 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[12/15 11:05:30:129      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[12/15 11:05:30:864      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[12/15 11:05:30:895 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[12/15 11:05:30:895 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[12/15 11:05:30:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[12/15 11:05:30:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[12/15 11:05:30:942      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:05:30:942      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[12/15 11:05:30:942      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[12/15 11:05:30:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:05:30:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:05:30:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[12/15 11:05:30:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[12/15 11:05:30:942      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:05:30:942      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[12/15 11:05:30:942       Sound.cpp(00148)] :Stop
[12/15 11:05:30:942       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:05:30:942      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:05:30:942      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:05:30:942      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:05:30:942      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:05:30:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:05:30:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:05:30:942      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:05:31:051      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:05:31:051      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[12/15 11:05:31:840 TranHostProcSTD(00320)] :fnAPP_Triton_SendHostMake(RealFlag[1])
[12/15 11:05:31:840 TranHostProcSTD(00449)] :fnAPP_Triton_SendHostMakeSet(RealFlag[1])
[12/15 11:05:31:840 TranHostProcSTD(00476)] :fnAPP_SendHostMakeSet():return
[12/15 11:05:31:840 TranHostProcSTD(00482)] :fnAPP_Triton_SendHostMakeHeader(RealFlag[1])
[12/15 11:05:31:840 TranHostProcSTD(00525)] :fnAPP_Triton_SendHostMakeHeader(m_strSendData=[7600I          ])
[12/15 11:05:31:840 TranHostProcSTD(00531)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[12/15 11:05:31:848 TranHostProcSTD(01556)] :fnAPP_Triton_Make_ConfigurationMsg()
[12/15 11:05:31:848 TranHostProcSTD(01567)] :fnAPP_Triton_Make_ConfigurationMsg() Return
[12/15 11:05:31:848 TranHostProcSTD(00625)] :fnAPP_Triton_Make_Miscellaneous()
[12/15 11:05:31:848 TranHostProcSTD(00632)] :TranCode=[1011])
[12/15 11:05:31:848 TranHostProcSTD(00657)] :nMisellIndex=[1])
[12/15 11:05:31:848 TranHostProcSTD(00662)] :chMicellaneous=[91])
[12/15 11:05:31:848 TranHostProcSTD(00662)] :chMicellaneous=[117])
[12/15 11:05:31:848 TranHostProcSTD(00583)] :fnAPP_Triton_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[12/15 11:05:31:848 TranHostProcSTD(00619)] :fnAPP_Triton_SendHostMakeBuffer(RealFlag[1]):return(67123116)
[12/15 11:05:31:848 TranHostProcSTD(00443)] :fnAPP_SendHostMake(RealFlag[1], Cnt[22]):return
[12/15 11:05:31:848 TranHostProc.cp(00254)] :SendLength(22), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[12/15 11:05:31:848 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[12/15 11:05:31:879      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:05:31:887 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[12/15 11:05:31:887     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[12/15 11:05:31:887     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[12/15 11:05:31:887 StandardCtrl.cp(00071)] :HIGH[0]

[12/15 11:05:31:887 StandardCtrl.cp(00072)] :LOW[16]

[12/15 11:05:31:887 StandardCtrl.cp(00074)] :CStandardCtrl::SendData() SET SEND[LEN:24]

[12/15 11:05:31:887       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[12/15 11:05:31:887    CESocket.cpp(00116)] :Create() start

[12/15 11:05:31:887    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[12/15 11:05:31:887    CESocket.cpp(00220)] :Connect() start - socket:784 address: 192.168.198.199 port: 45000
[12/15 11:05:52:903    CESocket.cpp(00399)] :Connect() return: -8
[12/15 11:05:52:903       TCPIP.cpp(00082)] :line close start
[12/15 11:05:52:903    CESocket.cpp(00463)] :Disconnect() End

[12/15 11:05:52:903     NetWork.cpp(00506)] :SEND ERROR RETURN[64][0]

[12/15 11:05:55:903     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[12/15 11:05:55:903     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[12/15 11:05:55:903 StandardCtrl.cp(00071)] :HIGH[0]

[12/15 11:05:55:903 StandardCtrl.cp(00072)] :LOW[16]

[12/15 11:05:55:903 StandardCtrl.cp(00074)] :CStandardCtrl::SendData() SET SEND[LEN:24]

[12/15 11:05:55:903       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[12/15 11:05:55:903    CESocket.cpp(00116)] :Create() start

[12/15 11:05:55:903    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[12/15 11:05:55:903    CESocket.cpp(00220)] :Connect() start - socket:784 address: 192.168.198.199 port: 45000
[12/15 11:06:16:918    CESocket.cpp(00399)] :Connect() return: -8
[12/15 11:06:16:918       TCPIP.cpp(00082)] :line close start
[12/15 11:06:16:918    CESocket.cpp(00463)] :Disconnect() End

[12/15 11:06:16:918     NetWork.cpp(00506)] :SEND ERROR RETURN[64][1]

[12/15 11:06:16:918     NetWork.cpp(00525)] :SEND RETRY ERROR[64][2]

[12/15 11:06:16:918     NetWork.cpp(00364)] :[SetNetErrorCode] ErrorCode : [D1500] ErrorMsg : TCPIP Connection Timeout
[12/15 11:06:16:918      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:06:16:918      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:06:16:918      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[12/15 11:06:16:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[12/15 11:06:16:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[12/15 11:06:16:918      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[12/15 11:06:16:918      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[12/15 11:06:16:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[12/15 11:06:16:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[12/15 11:06:16:918      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[12/15 11:06:16:918 TranHostProc.cp(00042)] :fnApp_HostCommunication() Communication Failure [7]
[12/15 11:06:16:918      DevNet.cpp(00067)] :[fstrNET_GetErrorCode] ErrorMsg : TCPIP Connection Timeout
[12/15 11:06:16:918      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:06:16:934     TranCmn.cpp(01784)] :fnApp_DisplayMessage(Msg1=[ CONFIGURATION ERROR. CHECK THE ERROR CODE!], nDelay=[5]
[12/15 11:06:16:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [ CONFIGURATION ERROR. CHECK THE ERROR CODE!])
[12/15 11:06:16:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/ CONFIGURATION ERROR. CHECK THE ERROR CODE!]
[12/15 11:06:16:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [ ])
[12/15 11:06:16:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/ ]
[12/15 11:06:16:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [D150000])
[12/15 11:06:16:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/D150000]
[12/15 11:06:16:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [TCPIP Connection Timeout])
[12/15 11:06:16:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/TCPIP Connection Timeout]
[12/15 11:06:16:942      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:06:16:942      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[12/15 11:06:16:942      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[12/15 11:06:16:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:06:16:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:06:16:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[12/15 11:06:16:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[12/15 11:06:16:942      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:06:16:942      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[12/15 11:06:16:942       Sound.cpp(00148)] :Stop
[12/15 11:06:16:942       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:06:16:942      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:06:16:942      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:06:16:942      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:06:16:942      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:06:16:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:06:16:942   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:06:16:950      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:06:16:950      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:06:16:950      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[12/15 11:06:24:973      DevNet.cpp(00030)] :fnNET_ClearErrorCode()
[12/15 11:06:24:973      DevNet.cpp(00036)] :fnNET_ClearErrorCode():return(1)
[12/15 11:06:24:973 TranHostProc.cp(00067)] :fnApp_HostCommunication() return[7]
[12/15 11:06:24:973      DevApl.cpp(01849)] :[PROCESS COUNT] : 9
[12/15 11:06:25:989      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[90000000])
[12/15 11:06:26:036 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[12/15 11:06:26:036 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[12/15 11:06:26:036 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[12/15 11:06:26:036 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[12/15 11:06:26:036 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[12/15 11:06:26:098 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[12/15 11:06:26:098 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:06:26:098 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:06:26:098 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:06:26:098 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:06:26:098 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[12/15 11:06:26:098 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[1]
[12/15 11:06:26:098 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A6
[12/15 11:06:26:106   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:06:26:106   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:06:26:106   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:06:26:106   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:06:26:106   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:06:26:106   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:06:26:114   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[12/15 11:06:26:114   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[12/15 11:06:26:114      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:06:26:114      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:06:26:114      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:06:26:114   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:06:26:114   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:06:26:114   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:06:26:114   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:06:26:114      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:06:26:114      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:06:26:114       Sound.cpp(00148)] :Stop
[12/15 11:06:26:114       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:06:26:114      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:06:26:114      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:06:26:114      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:06:26:114      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:06:26:114   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:06:26:114   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:06:26:122      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:06:26:122      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:06:26:176      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:06:27:770      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:06:27:950 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:06:27:950      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[12/15 11:06:27:950      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[12/15 11:06:27:950 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[12/15 11:06:27:950 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:06:27:950      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:06:27:950      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:06:28:497      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:06:29:059      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:06:29:067      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:06:29:067   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:06:29:067   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:06:29:067      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:06:29:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:06:29:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:06:29:098      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:06:29:098      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:06:29:098      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:06:29:098      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:06:29:239      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:06:29:239      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:06:29:239      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:06:29:254      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:06:29:286      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:06:29:286      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:06:29:286      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:06:29:301      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:06:29:301      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:06:29:301      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:06:29:301      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:06:29:301      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:06:29:317      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:06:29:333      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:06:29:333 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:06:29:333 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:06:29:333 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:06:29:333 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:06:29:333 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[12/15 11:06:29:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:06:29:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:06:29:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:06:29:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:06:29:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:06:29:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:06:29:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[12/15 11:06:29:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[12/15 11:06:29:333      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:06:29:333      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:06:29:333      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:06:29:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:06:29:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:06:29:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:06:29:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:06:29:364      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:06:29:364      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:06:29:364       Sound.cpp(00148)] :Stop
[12/15 11:06:29:364       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:06:29:364      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:06:29:364      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:06:29:364      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:06:29:364      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:06:29:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:06:29:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:06:29:364      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:06:29:364      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:06:29:364      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:06:34:958      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:06:34:958 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[12/15 11:06:58:059 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[12/15 11:06:58:059 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[12/15 11:06:58:083 TranMainProc.cp(00182)] :TranStatus[11]
[12/15 11:06:58:083 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[12/15 11:06:58:083 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[12/15 11:06:58:083     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [D01.05.00.00 NHD CD                     ]
[12/15 11:06:58:083     TranCmn.cpp(00663)] :m_KeyMode = [3]
[12/15 11:06:58:083     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[12/15 11:06:58:122     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[12/15 11:06:58:161     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[12/15 11:06:58:161     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[12/15 11:06:58:161 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[12/15 11:06:58:161      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[12/15 11:06:58:661      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[12/15 11:06:58:684 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[12/15 11:06:58:684 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[12/15 11:06:58:700   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[12/15 11:06:58:700   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[12/15 11:06:58:700      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:06:58:700      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[12/15 11:06:58:700      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[12/15 11:06:58:708   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:06:58:708   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:06:58:708   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[12/15 11:06:58:708   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[12/15 11:06:58:708      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:06:58:708      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[12/15 11:06:58:708       Sound.cpp(00148)] :Stop
[12/15 11:06:58:708       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:06:58:708      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:06:58:708      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:06:58:708      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:06:58:708      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:06:58:708   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:06:58:708   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:06:58:708      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:06:58:801      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:06:58:801      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[12/15 11:06:59:583 TranHostProcSTD(00320)] :fnAPP_Triton_SendHostMake(RealFlag[1])
[12/15 11:06:59:583 TranHostProcSTD(00449)] :fnAPP_Triton_SendHostMakeSet(RealFlag[1])
[12/15 11:06:59:583 TranHostProcSTD(00476)] :fnAPP_SendHostMakeSet():return
[12/15 11:06:59:583 TranHostProcSTD(00482)] :fnAPP_Triton_SendHostMakeHeader(RealFlag[1])
[12/15 11:06:59:583 TranHostProcSTD(00525)] :fnAPP_Triton_SendHostMakeHeader(m_strSendData=[7600I          ])
[12/15 11:06:59:583 TranHostProcSTD(00531)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[12/15 11:06:59:583 TranHostProcSTD(01556)] :fnAPP_Triton_Make_ConfigurationMsg()
[12/15 11:06:59:583 TranHostProcSTD(01567)] :fnAPP_Triton_Make_ConfigurationMsg() Return
[12/15 11:06:59:583 TranHostProcSTD(00625)] :fnAPP_Triton_Make_Miscellaneous()
[12/15 11:06:59:583 TranHostProcSTD(00632)] :TranCode=[1011])
[12/15 11:06:59:583 TranHostProcSTD(00657)] :nMisellIndex=[1])
[12/15 11:06:59:583 TranHostProcSTD(00662)] :chMicellaneous=[91])
[12/15 11:06:59:583 TranHostProcSTD(00662)] :chMicellaneous=[117])
[12/15 11:06:59:583 TranHostProcSTD(00583)] :fnAPP_Triton_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[12/15 11:06:59:583 TranHostProcSTD(00619)] :fnAPP_Triton_SendHostMakeBuffer(RealFlag[1]):return(67123116)
[12/15 11:06:59:583 TranHostProcSTD(00443)] :fnAPP_SendHostMake(RealFlag[1], Cnt[22]):return
[12/15 11:06:59:583 TranHostProc.cp(00254)] :SendLength(22), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[12/15 11:06:59:583 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[12/15 11:06:59:598      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:06:59:606 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[12/15 11:06:59:606     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[12/15 11:06:59:606     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[12/15 11:06:59:606 StandardCtrl.cp(00071)] :HIGH[0]

[12/15 11:06:59:606 StandardCtrl.cp(00072)] :LOW[16]

[12/15 11:06:59:606 StandardCtrl.cp(00074)] :CStandardCtrl::SendData() SET SEND[LEN:24]

[12/15 11:06:59:606       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[12/15 11:06:59:606    CESocket.cpp(00116)] :Create() start

[12/15 11:06:59:606    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[12/15 11:06:59:606    CESocket.cpp(00220)] :Connect() start - socket:1280 address: 192.168.198.199 port: 45000
[12/15 11:07:20:622    CESocket.cpp(00399)] :Connect() return: -8
[12/15 11:07:20:622       TCPIP.cpp(00082)] :line close start
[12/15 11:07:20:622    CESocket.cpp(00463)] :Disconnect() End

[12/15 11:07:20:622     NetWork.cpp(00506)] :SEND ERROR RETURN[64][0]

[12/15 11:07:23:622     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[12/15 11:07:23:622     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[12/15 11:07:23:622 StandardCtrl.cp(00071)] :HIGH[0]

[12/15 11:07:23:622 StandardCtrl.cp(00072)] :LOW[16]

[12/15 11:07:23:622 StandardCtrl.cp(00074)] :CStandardCtrl::SendData() SET SEND[LEN:24]

[12/15 11:07:23:622       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[12/15 11:07:23:622    CESocket.cpp(00116)] :Create() start

[12/15 11:07:23:622    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[12/15 11:07:23:622    CESocket.cpp(00220)] :Connect() start - socket:1280 address: 192.168.198.199 port: 45000
[12/15 11:07:44:629    CESocket.cpp(00399)] :Connect() return: -8
[12/15 11:07:44:629       TCPIP.cpp(00082)] :line close start
[12/15 11:07:44:629    CESocket.cpp(00463)] :Disconnect() End

[12/15 11:07:44:629     NetWork.cpp(00506)] :SEND ERROR RETURN[64][1]

[12/15 11:07:44:629     NetWork.cpp(00525)] :SEND RETRY ERROR[64][2]

[12/15 11:07:44:629     NetWork.cpp(00364)] :[SetNetErrorCode] ErrorCode : [D1500] ErrorMsg : TCPIP Connection Timeout
[12/15 11:07:44:629      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:07:44:629      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:07:44:629      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[12/15 11:07:44:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[12/15 11:07:44:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[12/15 11:07:44:629      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[12/15 11:07:44:629      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[12/15 11:07:44:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[12/15 11:07:44:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[12/15 11:07:44:629      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[12/15 11:07:44:629 TranHostProc.cp(00042)] :fnApp_HostCommunication() Communication Failure [7]
[12/15 11:07:44:629      DevNet.cpp(00067)] :[fstrNET_GetErrorCode] ErrorMsg : TCPIP Connection Timeout
[12/15 11:07:44:629      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:07:44:629     TranCmn.cpp(01784)] :fnApp_DisplayMessage(Msg1=[ CONFIGURATION ERROR. CHECK THE ERROR CODE!], nDelay=[5]
[12/15 11:07:44:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [ CONFIGURATION ERROR. CHECK THE ERROR CODE!])
[12/15 11:07:44:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/ CONFIGURATION ERROR. CHECK THE ERROR CODE!]
[12/15 11:07:44:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [ ])
[12/15 11:07:44:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/ ]
[12/15 11:07:44:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [D150000])
[12/15 11:07:44:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/D150000]
[12/15 11:07:44:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [TCPIP Connection Timeout])
[12/15 11:07:44:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/TCPIP Connection Timeout]
[12/15 11:07:44:637      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:07:44:637      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[12/15 11:07:44:637      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[12/15 11:07:44:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:07:44:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:07:44:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[12/15 11:07:44:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[12/15 11:07:44:637      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:07:44:637      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[12/15 11:07:44:637       Sound.cpp(00148)] :Stop
[12/15 11:07:44:637       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:07:44:637      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:07:44:637      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:07:44:637      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:07:44:637      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:07:44:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:07:44:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:07:44:645      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:07:44:645      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:07:44:645      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[12/15 11:07:52:481      DevNet.cpp(00030)] :fnNET_ClearErrorCode()
[12/15 11:07:52:481      DevNet.cpp(00036)] :fnNET_ClearErrorCode():return(1)
[12/15 11:07:52:481 TranHostProc.cp(00067)] :fnApp_HostCommunication() return[7]
[12/15 11:07:52:481      DevApl.cpp(01849)] :[PROCESS COUNT] : 9
[12/15 11:07:53:090      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[90000000])
[12/15 11:07:53:122 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[12/15 11:07:53:122 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[12/15 11:07:53:122 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[12/15 11:07:53:122 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[12/15 11:07:53:122 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[12/15 11:07:53:168 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[12/15 11:07:53:168 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:07:53:168 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:07:53:168 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:07:53:168 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:07:53:168 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[12/15 11:07:53:168 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[2]
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[12/15 11:07:53:168      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:07:53:168      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:07:53:168      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:07:53:168      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:07:53:168      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:07:53:168       Sound.cpp(00148)] :Stop
[12/15 11:07:53:168       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:07:53:168      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:07:53:168      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:07:53:168      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:07:53:168      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:07:53:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:07:53:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:07:53:184      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:07:53:184      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:07:53:184      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:07:54:965 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:07:54:965      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[12/15 11:07:54:965      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[12/15 11:07:54:965 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[12/15 11:07:54:965 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:07:54:965      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:07:54:965      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:07:55:645      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:07:56:239      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:07:56:247      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:07:56:247   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:07:56:247   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:07:56:247      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:07:56:254   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:07:56:254   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:07:56:270      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:07:56:270      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:07:56:270      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:07:56:270      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:07:56:364      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:07:56:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:07:56:372      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:07:56:387      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:07:56:403      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:07:56:411      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:07:56:411      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:07:56:418      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:07:56:418      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:07:56:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:07:56:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:07:56:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:07:56:434      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:07:56:458      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:07:56:458 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:07:56:458 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:07:56:458 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:07:56:458 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:07:56:458 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[12/15 11:07:56:458   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:07:56:458   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:07:56:458   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:07:56:458   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:07:56:465   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:07:56:465   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:07:56:465   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[12/15 11:07:56:465   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[12/15 11:07:56:465      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:07:56:465      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:07:56:465      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:07:56:465   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:07:56:465   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:07:56:465   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:07:56:465   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:07:56:465      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:07:56:465      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:07:56:465       Sound.cpp(00148)] :Stop
[12/15 11:07:56:465       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:07:56:465      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:07:56:465      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:07:56:465      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:07:56:465      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:07:56:465   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:07:56:465   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:07:56:473      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:07:56:473      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:07:56:473      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:08:02:051      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:08:02:051 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[12/15 11:08:25:473 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[12/15 11:08:25:473 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[12/15 11:08:25:489 TranMainProc.cp(00182)] :TranStatus[11]
[12/15 11:08:25:489 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[12/15 11:08:25:489 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[12/15 11:08:25:489     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [D01.05.00.00 NHD CD                     ]
[12/15 11:08:25:489     TranCmn.cpp(00663)] :m_KeyMode = [3]
[12/15 11:08:25:489     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[12/15 11:08:25:536     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[12/15 11:08:25:567     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[12/15 11:08:25:567     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[12/15 11:08:25:567 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[12/15 11:08:25:567      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[12/15 11:08:26:083      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[12/15 11:08:26:114 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[12/15 11:08:26:114 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[12/15 11:08:26:129   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[12/15 11:08:26:129   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[12/15 11:08:26:129      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:08:26:129      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[12/15 11:08:26:129      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[12/15 11:08:26:129   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:08:26:129   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:08:26:129   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[12/15 11:08:26:129   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[12/15 11:08:26:129      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:08:26:129      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[12/15 11:08:26:129       Sound.cpp(00148)] :Stop
[12/15 11:08:26:129       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:08:26:129      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:08:26:129      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:08:26:129      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:08:26:129      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:08:26:145   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:08:26:145   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:08:26:145      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:08:26:223      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:08:26:223      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[12/15 11:08:27:004 TranHostProcSTD(00320)] :fnAPP_Triton_SendHostMake(RealFlag[1])
[12/15 11:08:27:004 TranHostProcSTD(00449)] :fnAPP_Triton_SendHostMakeSet(RealFlag[1])
[12/15 11:08:27:004 TranHostProcSTD(00476)] :fnAPP_SendHostMakeSet():return
[12/15 11:08:27:004 TranHostProcSTD(00482)] :fnAPP_Triton_SendHostMakeHeader(RealFlag[1])
[12/15 11:08:27:004 TranHostProcSTD(00525)] :fnAPP_Triton_SendHostMakeHeader(m_strSendData=[7600I          ])
[12/15 11:08:27:004 TranHostProcSTD(00531)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[12/15 11:08:27:004 TranHostProcSTD(01556)] :fnAPP_Triton_Make_ConfigurationMsg()
[12/15 11:08:27:004 TranHostProcSTD(01567)] :fnAPP_Triton_Make_ConfigurationMsg() Return
[12/15 11:08:27:004 TranHostProcSTD(00625)] :fnAPP_Triton_Make_Miscellaneous()
[12/15 11:08:27:004 TranHostProcSTD(00632)] :TranCode=[1011])
[12/15 11:08:27:004 TranHostProcSTD(00657)] :nMisellIndex=[1])
[12/15 11:08:27:004 TranHostProcSTD(00662)] :chMicellaneous=[91])
[12/15 11:08:27:004 TranHostProcSTD(00662)] :chMicellaneous=[117])
[12/15 11:08:27:004 TranHostProcSTD(00583)] :fnAPP_Triton_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[12/15 11:08:27:004 TranHostProcSTD(00619)] :fnAPP_Triton_SendHostMakeBuffer(RealFlag[1]):return(67123116)
[12/15 11:08:27:004 TranHostProcSTD(00443)] :fnAPP_SendHostMake(RealFlag[1], Cnt[22]):return
[12/15 11:08:27:004 TranHostProc.cp(00254)] :SendLength(22), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[12/15 11:08:27:004 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[12/15 11:08:27:036      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:08:27:043 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[12/15 11:08:27:043     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[12/15 11:08:27:043     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[12/15 11:08:27:043 StandardCtrl.cp(00071)] :HIGH[0]

[12/15 11:08:27:043 StandardCtrl.cp(00072)] :LOW[16]

[12/15 11:08:27:043 StandardCtrl.cp(00074)] :CStandardCtrl::SendData() SET SEND[LEN:24]

[12/15 11:08:27:043       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[12/15 11:08:27:043    CESocket.cpp(00116)] :Create() start

[12/15 11:08:27:043    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[12/15 11:08:27:043    CESocket.cpp(00220)] :Connect() start - socket:1212 address: 192.168.198.199 port: 45000
[12/15 11:08:48:075    CESocket.cpp(00399)] :Connect() return: -8
[12/15 11:08:48:075       TCPIP.cpp(00082)] :line close start
[12/15 11:08:48:075    CESocket.cpp(00463)] :Disconnect() End

[12/15 11:08:48:075     NetWork.cpp(00506)] :SEND ERROR RETURN[64][0]

[12/15 11:08:51:075     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[12/15 11:08:51:075     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[12/15 11:08:51:075 StandardCtrl.cp(00071)] :HIGH[0]

[12/15 11:08:51:075 StandardCtrl.cp(00072)] :LOW[16]

[12/15 11:08:51:075 StandardCtrl.cp(00074)] :CStandardCtrl::SendData() SET SEND[LEN:24]

[12/15 11:08:51:075       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[12/15 11:08:51:075    CESocket.cpp(00116)] :Create() start

[12/15 11:08:51:075    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[12/15 11:08:51:075    CESocket.cpp(00220)] :Connect() start - socket:1212 address: 192.168.198.199 port: 45000
[12/15 11:09:12:083    CESocket.cpp(00399)] :Connect() return: -8
[12/15 11:09:12:083       TCPIP.cpp(00082)] :line close start
[12/15 11:09:12:083    CESocket.cpp(00463)] :Disconnect() End

[12/15 11:09:12:083     NetWork.cpp(00506)] :SEND ERROR RETURN[64][1]

[12/15 11:09:12:083     NetWork.cpp(00525)] :SEND RETRY ERROR[64][2]

[12/15 11:09:12:083     NetWork.cpp(00364)] :[SetNetErrorCode] ErrorCode : [D1500] ErrorMsg : TCPIP Connection Timeout
[12/15 11:09:12:083      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:09:12:083      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:09:12:083      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[12/15 11:09:12:083   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[12/15 11:09:12:083   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[12/15 11:09:12:083      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[12/15 11:09:12:083      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[12/15 11:09:12:083   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[12/15 11:09:12:083   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[12/15 11:09:12:083      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[12/15 11:09:12:083 TranHostProc.cp(00042)] :fnApp_HostCommunication() Communication Failure [7]
[12/15 11:09:12:083      DevNet.cpp(00067)] :[fstrNET_GetErrorCode] ErrorMsg : TCPIP Connection Timeout
[12/15 11:09:12:083      DevNet.cpp(00055)] :[fstrNET_GetErrorCode] ErrorCode : D150000
[12/15 11:09:12:083     TranCmn.cpp(01784)] :fnApp_DisplayMessage(Msg1=[ CONFIGURATION ERROR. CHECK THE ERROR CODE!], nDelay=[5]
[12/15 11:09:12:083   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [ CONFIGURATION ERROR. CHECK THE ERROR CODE!])
[12/15 11:09:12:083   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/ CONFIGURATION ERROR. CHECK THE ERROR CODE!]
[12/15 11:09:12:083   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [ ])
[12/15 11:09:12:083   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/ ]
[12/15 11:09:12:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [D150000])
[12/15 11:09:12:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/D150000]
[12/15 11:09:12:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [TCPIP Connection Timeout])
[12/15 11:09:12:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/TCPIP Connection Timeout]
[12/15 11:09:12:090      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:09:12:090      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[12/15 11:09:12:090      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[12/15 11:09:12:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:09:12:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:09:12:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[12/15 11:09:12:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[12/15 11:09:12:090      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:09:12:090      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[12/15 11:09:12:090       Sound.cpp(00148)] :Stop
[12/15 11:09:12:090       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:09:12:090      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:09:12:090      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:09:12:090      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:09:12:090      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:09:12:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:12:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:12:098      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:09:12:098      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:09:12:098      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[12/15 11:09:19:926      DevNet.cpp(00030)] :fnNET_ClearErrorCode()
[12/15 11:09:19:926      DevNet.cpp(00036)] :fnNET_ClearErrorCode():return(1)
[12/15 11:09:19:926 TranHostProc.cp(00067)] :fnApp_HostCommunication() return[7]
[12/15 11:09:19:926      DevApl.cpp(01849)] :[PROCESS COUNT] : 9
[12/15 11:09:20:567      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[90000000])
[12/15 11:09:20:583 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[12/15 11:09:20:583 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[12/15 11:09:20:583 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[12/15 11:09:20:583 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[12/15 11:09:20:583 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[12/15 11:09:20:629 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[12/15 11:09:20:629 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:09:20:629 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:09:20:629 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:09:20:629 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:09:20:629 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[12/15 11:09:20:629 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[3]
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[12/15 11:09:20:629      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:09:20:629      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:09:20:629      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:09:20:629      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:09:20:629      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:09:20:629       Sound.cpp(00148)] :Stop
[12/15 11:09:20:629       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:09:20:629      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:09:20:629      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:09:20:629      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:09:20:629      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:09:20:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:20:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:20:645      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:09:20:645      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:09:20:645      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:09:22:411 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:09:22:411      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[12/15 11:09:22:411      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[12/15 11:09:22:411 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[12/15 11:09:22:411 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:09:22:411      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:09:22:411      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:09:23:051      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:09:23:833      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||MX5100T||RUN||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||OP_TSPL||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:09:23:848      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:09:23:848   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:09:23:848   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:09:23:848      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:09:23:848   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:23:848   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:23:864      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:09:23:864      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:09:23:864      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:09:23:864      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:09:23:989      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:09:23:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:09:23:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:09:24:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:09:24:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:09:24:020      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:09:24:020      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:09:24:020      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:09:24:020      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:09:24:036      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:09:24:036      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:09:24:036      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:09:24:036      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:09:24:067      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:09:24:067 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[12/15 11:09:24:067 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[12/15 11:09:24:067 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:09:24:067 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:09:24:067 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[12/15 11:09:24:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:09:24:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:09:24:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:09:24:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:09:24:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:09:24:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:09:24:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[12/15 11:09:24:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[12/15 11:09:24:075      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[12/15 11:09:24:075      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:09:24:075      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:09:24:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:09:24:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:09:24:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:09:24:083   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:09:24:083      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:09:24:083      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:09:24:083       Sound.cpp(00148)] :Stop
[12/15 11:09:24:083       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:09:24:083      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:09:24:083      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:09:24:083      DevScr.cpp(00531)] :AtmDefine.OpDevice[2], GetShareData(OP_MODE)=[APOK]
[12/15 11:09:24:083      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[12/15 11:09:24:083   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:24:083   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:24:083      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:09:24:083      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:09:24:090      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:09:29:051      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:09:29:051 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[12/15 11:09:47:081   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[12/15 11:09:47:081   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[12/15 11:09:47:082   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[12/15 11:09:47:082   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[12/15 11:09:47:083   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[12/15 11:09:47:701   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[12/15 11:09:47:701   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[12/15 11:09:47:701   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[12/15 11:09:47:702   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[12/15 11:09:47:702   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[12/15 11:09:47:952   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[12/15 11:09:47:953   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[12/15 11:09:47:953   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[12/15 11:09:47:953   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[12/15 11:09:47:954   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[12/15 11:09:48:330   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[12/15 11:09:48:330   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:09:48:337   WinAtmCtl.cpp(00891)] :strDataValue[1])
[12/15 11:09:48:337   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[12/15 11:09:48:337   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[12/15 11:09:48:604   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[12/15 11:09:48:604   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:09:48:604   WinAtmCtl.cpp(00891)] :strDataValue[2])
[12/15 11:09:48:604   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[12/15 11:09:48:620   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[12/15 11:09:48:856   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[12/15 11:09:48:856   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:09:48:857   WinAtmCtl.cpp(00891)] :strDataValue[3])
[12/15 11:09:48:857   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[12/15 11:09:48:955      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[12/15 11:09:48:977      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||MX5100T||SUPERVISOR||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:09:48:985 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[12/15 11:09:49:572      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:09:50:172      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||OFF||OFF||OFF||ON||******||******||******||MX5100T||SUPERVISOR||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:09:50:188      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:09:50:188   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:09:50:188   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:09:50:188      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:09:50:188   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:50:188   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:50:204      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:09:50:204      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:09:50:204      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:09:50:204      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:09:50:329      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:09:50:329      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:09:50:329      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:09:50:329      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:09:50:344      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:09:50:360      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:09:50:360      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:09:50:360      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:09:50:360      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:09:50:375      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:09:50:375      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:09:50:375      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:09:50:375      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:09:50:407      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=3, pTime=11
[12/15 11:09:50:407 TranNmsProc.cpp(00488)] :NmsCashStatus:(1)
[12/15 11:09:54:633 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 6 => A0
[12/15 11:09:54:633      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||MX5100T||SUPERVISOR||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:09:54:805 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[12/15 11:09:54:805 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[12/15 11:09:54:805      DevCmn.cpp(01916)] :EMV_Initial()
[12/15 11:09:54:805      DevCmn.cpp(01920)] :EMV_Initial() return
[12/15 11:09:54:805 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[12/15 11:09:55:274      DevApl.cpp(01849)] :[PROCESS COUNT] :
[12/15 11:09:55:805      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:09:55:805   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[12/15 11:09:55:805   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[12/15 11:09:55:805      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[12/15 11:09:55:805   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:55:805   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:55:821      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[12/15 11:09:55:821      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[12/15 11:09:55:821      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[12/15 11:09:55:821      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:09:55:821      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:09:55:821      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[12/15 11:09:55:829      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[12/15 11:09:55:836      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[12/15 11:09:55:852      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[12/15 11:09:55:852      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[12/15 11:09:55:860      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[12/15 11:09:55:868      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[12/15 11:09:55:868      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[12/15 11:09:55:875      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[12/15 11:09:55:875      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[12/15 11:09:55:875      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[12/15 11:09:55:883      DevCmn.cpp(04625)] :fnLGT_SetIndicator(nValue[0])
[12/15 11:09:55:907      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[19960000])
[12/15 11:09:55:907   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[12/15 11:09:55:907   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[12/15 11:09:55:907   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:           7600I])
[12/15 11:09:55:907   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:           7600I]
[12/15 11:09:55:907   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[12/15 11:09:55:907   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[12/15 11:09:55:907   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[12/15 11:09:55:907   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[12/15 11:09:55:907      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[12/15 11:09:55:907      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:09:55:907      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[12/15 11:09:55:907   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [FDK1])
[12/15 11:09:55:907   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/FDK1]
[12/15 11:09:55:907   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[12/15 11:09:55:907   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[12/15 11:09:55:907      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[12/15 11:09:55:907      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[12/15 11:09:55:907       Sound.cpp(00148)] :Stop
[12/15 11:09:55:915       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[12/15 11:09:55:915      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[12/15 11:09:55:915      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[12/15 11:09:55:915      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[12/15 11:09:55:915      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[12/15 11:09:55:915   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:09:55:915   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:09:55:915      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[12/15 11:09:55:915      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[12/15 11:09:55:915      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[12/15 11:09:55:915      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[12/15 11:09:55:946 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[12/15 11:09:55:946      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[12/15 11:09:55:969      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0209]
[12/15 11:09:55:969      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[12/15 11:09:55:969      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[12/15 11:09:55:969       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[12/15 11:09:55:969       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[12/15 11:09:55:969       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[12/15 11:09:55:977       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0209']
[12/15 11:09:56:024       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[12/15 11:09:56:024       DevDB.cpp(01076)] :fbMDB_InsertData()
[12/15 11:09:56:024       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[12/15 11:09:56:024       DevDB.cpp(00079)] :OpenDataBase End
[12/15 11:09:56:024       DevDB.cpp(00127)] :ExecuteQuery Start!
[12/15 11:09:56:032       DevDB.cpp(00146)] :ExecuteQuery End!
[12/15 11:09:56:032       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[12/15 11:09:56:032       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[12/15 11:09:56:032       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 12/15/2017 11:09:55 EJ NUMBER = 0209 ] |11:09:55 [SUPERVISOR MENU START]<END_EJRNL>]
[12/15 11:09:56:032       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0209','12','15','2017','11','09','55','Change into operator mode<START_EJRNL>[ 12/15/2017 11:09:55 EJ NUMBER = 0209 ] |11:09:55 [SUPERVISOR MENU START]<END_EJRNL>')]
[12/15 11:09:56:079       DevDB.cpp(00115)] :SingleExcute() Normal End
[12/15 11:09:56:079       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[12/15 11:09:56:079       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[12/15 11:09:56:079       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[12/15 11:09:56:086       DevDB.cpp(00079)] :OpenDataBase End
[12/15 11:09:56:086       DevDB.cpp(00127)] :ExecuteQuery Start!
[12/15 11:09:56:086       DevDB.cpp(00146)] :ExecuteQuery End!
[12/15 11:09:56:086       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[209]
[12/15 11:09:56:086       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [209]
[12/15 11:09:56:086       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[208], m_bRecordCountFinal=[1]
[12/15 11:09:56:133       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [209]
[12/15 11:09:56:133      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 12/15/2017 11:09:55 EJ NUMBER = 0209 ] |11:09:55 [SUPERVISOR MENU START]<END_EJRNL>]
[12/15 11:09:56:133      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 12/15/2017 11:09:55 EJ NUMBER = 0209 ] |11:09:55 [SUPERVISOR MENU START]<END_EJRNL>]
[12/15 11:09:56:133      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[12/15 11:09:56:133      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[12/15 11:09:56:157      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||MX5100T||SUPERVISOR||            ||     ||7600I||00000000||D01.05.00||11-07 2017||100||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[12/15 11:09:56:172     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[12/15 11:09:56:172     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[12/15 11:09:56:430 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[12/15 11:09:56:438 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[12/15 11:09:56:438 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[12/15 11:09:56:540 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[12/15 11:10:00:149 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[12/15 11:10:00:149      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[12/15 11:10:00:149   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:10:00:149   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:10:00:149      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:10:00:149      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:11:12:031   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:12:031   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:12:032   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:12:032   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:12:032   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:12:250   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:12:251   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:12:251   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:12:251   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:12:252   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:12:526   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:12:526   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:12:526   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:12:526   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:12:526   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:12:697   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:12:698   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:12:698   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:12:699   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:12:699   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:12:876   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:12:877   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:12:877   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:12:877   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:12:878   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:13:083   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:13:084   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:13:084   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:13:085   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:13:085   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:13:230   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[12/15 11:11:13:231   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[12/15 11:11:13:231   WinAtmCtl.cpp(00891)] :strDataValue[5])
[12/15 11:11:13:231   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[12/15 11:11:13:232   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[12/15 11:11:13:838   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[12/15 11:11:13:838   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[12/15 11:11:13:838   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[12/15 11:11:13:838   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[12/15 11:11:13:846   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[12/15 11:11:14:358 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[12/15 11:11:14:358      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[12/15 11:11:14:359   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:11:14:359   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:11:14:360      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:11:14:360      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:11:21:011 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[12/15 11:11:21:011      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[12/15 11:11:21:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:11:21:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:11:21:017      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:11:21:017      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:11:24:213 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[12/15 11:11:24:213      DevApl.cpp(05753)] :AtmDefine.MachineKind=[8], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[12/15 11:11:24:214   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[12/15 11:11:24:215   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[12/15 11:11:24:216      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[12/15 11:11:24:216      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 07.21.05]
[12/15 11:11:40:155   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[12/15 11:11:40:156   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[12/15 11:11:40:156   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[12/15 11:11:40:157   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[12/15 11:11:40:157   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[12/15 11:11:40:327 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_LOGRCOPY||20171215]
[12/15 11:11:40:327      DevCmn.cpp(06380)] :fstrCMN_GetDestnationDrive()
[12/15 11:11:40:328      DevCmn.cpp(06386)] :fstrCMN_GetDestnationDrive(...): Removal Drive = (USBDRIVE|F:\)
[12/15 11:11:40:328 AtmClerkCtrl.cp(03143)] :strFile=[D:\TRACE\7600I171215.zip]
[12/15 11:11:40:328      DevCmn.cpp(06677)] :fnCMN_RCopy(szFileName[D:\TRACE\7600I171215.zip]),szDate[20171215], szEJorLog[LOG], szDest[F:\], nFileSize[10000000]
[12/15 11:11:40:328      DevCmn.cpp(06692)] :fnCMN_RCopy(nReturn[1])