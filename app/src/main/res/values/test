Loading Loader.exe
[11/07 13:57:58:622   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[11/07 13:57:58:776    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 13:57:58:786    CESocket.cpp(00101)] :~CCESocket()

[11/07 13:57:58:957    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 13:57:58:982    CESocket.cpp(00101)] :~CCESocket()

[11/07 13:57:59:852    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 13:57:59:857   WinAtmCtl.cpp(01638)] :CSuppressOleBusyMsg()
[11/07 13:57:59:857   WinAtmCtl.cpp(01649)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[013CA9D8]
[11/07 13:57:59:857   WinAtmCtl.cpp(00202)] :===============================================================
[11/07 13:57:59:857   WinAtmCtl.cpp(00203)] :===============================================================
[11/07 13:57:59:858   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[11/07 13:57:59:858   WinAtmCtl.cpp(00363)] :OnCreate()
[11/07 13:57:59:893   WinAtmCtl.cpp(00377)] :OnCreate():return
[11/07 13:57:59:893   WinAtmCtl.cpp(01168)] :handle1=[10246]
[11/07 13:57:59:894   WinAtmCtl.cpp(01171)] :handle2=[10244]
[11/07 13:57:59:926   WinAtmCtl.cpp(00977)] :AtmStart()
[11/07 13:57:59:927      DevCmn.cpp(00045)] :CDevCmn()
[11/07 13:57:59:927      DevCmn.cpp(00053)] :CDevCmn():return
[11/07 13:57:59:927     TranCmn.cpp(00032)] :CTranCmn()
[11/07 13:57:59:927     TranCmn.cpp(00033)] :CTranCmn():return
[11/07 13:57:59:927      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[11/07 13:57:59:992      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : TOUCH
[11/07 13:57:59:993      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 1
[11/07 13:57:59:993  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[11/07 13:57:59:993  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[11/07 13:57:59:994  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[11/07 13:57:59:994  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[11/07 13:57:59:994  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1883285476, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 13:57:59:995  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1883285476, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 13:57:59:995     NetWork.cpp(00095)] :[SetInformation] CtrlType : 1, LineType : 2
[11/07 13:58:00:040 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[11/07 13:58:07:836      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[11/07 13:58:07:836      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1107]
[11/07 13:58:07:836      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[],nStep[1]
[11/07 13:58:07:836      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:07:836      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1107\Log1107.zip]
[11/07 13:58:07:836      DevCmn.cpp(06424)] :BSTrace Log
[11/07 13:58:07:836      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1107\BSTrace1711071358.nwlog]
[11/07 13:58:07:915      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 13:58:07:915      DevCmn.cpp(06444)] :BSTrace Log Trace End
[11/07 13:58:07:915      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log1107\BSTrace1711071358.nwlog],nStep[2]
[11/07 13:58:08:180      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:180      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1107\BSTrace1711071358.nwlog]
[11/07 13:58:08:180      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[11/07 13:58:08:196      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:196      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[11/07 13:58:08:196      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[11/07 13:58:08:196      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:196      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[11/07 13:58:08:196      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[11/07 13:58:08:196      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:196      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[11/07 13:58:08:196      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[11/07 13:58:08:196      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:196      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[11/07 13:58:08:196      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[11/07 13:58:08:196      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:196      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[11/07 13:58:08:196      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[11/07 13:58:08:196      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:196      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[11/07 13:58:08:196      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log07.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:211      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log07.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi07.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:211      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi07.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear07.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:211      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear07.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog07.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:211      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog07.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace07_#1.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:211      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace07_#1.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp07.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 13:58:08:211      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp07.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log06.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:211      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log06.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi06.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:211      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi06.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear06.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:211      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear06.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog06.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:211      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog06.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace06_#1.txt],nStep[2]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:211      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace06_#1.txt]
[11/07 13:58:08:211      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp06.txt],nStep[3]
[11/07 13:58:08:211      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 13:58:08:227      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp06.txt]
[11/07 13:58:08:227      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[11/07 13:58:08:227      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:58:08:227      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:58:08:227      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 13:58:08:227      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 13:58:08:227      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 13:58:08:227      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 13:58:08:227      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[11/07 13:58:08:227      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[11/07 13:58:08:227      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[11/07 13:58:08:227      DevApl.cpp(00722)] :    BATTERY LOW SHUTDOWN OPTION IS ENABLED
[11/07 13:58:08:227   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[11/07 13:58:08:227   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[11/07 13:58:08:227   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[11/07 13:58:08:227   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[11/07 13:58:08:227   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[11/07 13:58:08:227   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[11/07 13:58:08:227       Sound.cpp(00059)] :OpenDevice()
[11/07 13:58:08:227       Sound.cpp(00076)] :OpenDevice()=[0]
[11/07 13:58:08:227      DevApl.cpp(10595)] :BINLIST Count of BinList =[0], Command=[UPDATE]
[11/07 13:58:08:227      DevApl.cpp(10626)] :BINLIST nCntMain=[0]
[11/07 13:58:08:243      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[0]
[11/07 13:58:08:243      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=100c4e4d)
[11/07 13:58:08:243      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 13:58:08:243      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[11/07 13:58:08:243      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[11/07 13:58:08:243     TranCmn.cpp(00065)] :SetOwner()
[11/07 13:58:08:258     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[V01.05.00.00]
[11/07 13:58:08:461     TranCmn.cpp(00108)] :AP VERSION = [V01.05.00.00D CD                        ]
[11/07 13:58:08:461     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[11/07 13:58:08:477     TranCmn.cpp(00381)] :Successfully read AID Total Count = [9] => Term_data Exist : Return without creating
[11/07 13:58:08:477     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[11/07 13:58:08:493     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[11/07 13:58:08:508     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[11/07 13:58:08:524     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[11/07 13:58:08:540     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[11/07 13:58:08:540     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[1], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[11/07 13:58:08:540     TranCmn.cpp(00287)] :nCount[0]
[11/07 13:58:08:555 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[11/07 13:58:08:586 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[11/07 13:58:08:586     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[11/07 13:58:08:586     TranCmn.cpp(00364)] :SetOwner():return
[11/07 13:58:08:586   WinAtmCtl.cpp(01660)] :Suppress(): pOMF=[013CA9D8]
[11/07 13:58:08:586   WinAtmCtl.cpp(01667)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[11/07 13:58:08:586   WinAtmCtl.cpp(01272)] :strDate=[07], strYYMM=[1711]
[11/07 13:58:08:586      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[11/07 13:58:08:586      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:58:08:586      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[11/07 13:58:08:586      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[11/07 13:58:08:586   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:58:08:586   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:58:08:586   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[11/07 13:58:08:586   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[11/07 13:58:08:586      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:58:08:586      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[11/07 13:58:08:602       Sound.cpp(00148)] :Stop
[11/07 13:58:08:602       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:58:08:602      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:58:08:602      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:58:08:602      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[AP]
[11/07 13:58:08:602      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 13:58:08:602   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:58:08:602   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:58:08:602      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:58:08:602      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:58:08:602      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[11/07 13:58:08:790      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 13:58:08:836      DevCmn.cpp(05658)] :fnVFD_Initialize(nPortNum[9], nBaudRate[38400])
[11/07 13:58:08:836      DevCmn.cpp(05665)] :fnVFD_Initialize(...):return(0)
[11/07 13:58:08:836      DevCmn.cpp(04566)] :fnDOR_Initialize()
[11/07 13:58:21:728      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[11/07 13:58:21:728      DevCmn.cpp(04678)] :fnLGT_Initialize()
[11/07 13:58:21:759      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[11/07 13:58:21:759      DevCmn.cpp(04931)] :fnSPL_Initialize()
[11/07 13:58:21:775      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[11/07 13:58:21:775      DevCmn.cpp(05196)] :fnPIN_Initialize()
[11/07 13:58:23:228      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[11/07 13:58:23:228      DevCmn.cpp(05541)] :fnSNS_Initialize()
[11/07 13:58:23:265      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[11/07 13:58:23:265      DevCmn.cpp(04389)] :fnCMR_Initialize()
[11/07 13:58:23:265      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[11/07 13:58:23:265      DevCmn.cpp(05032)] :fnUPS_Initialize()
[11/07 13:58:23:397      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[11/07 13:58:24:593   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:58:24:593   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:58:24:593      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[11/07 13:58:25:539 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:58:25:539      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 13:58:25:539      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 13:58:25:539      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 13:58:25:539      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 13:58:25:539      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 13:58:25:539 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[11/07 13:58:25:539      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:58:25:898      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 13:58:25:898      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[11/07 13:58:25:914      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[11/07 13:58:25:914      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[11/07 13:58:25:945 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[189140992], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1958211584]
[11/07 13:58:25:945      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:58:25:945 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 13:58:25:945 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 13:58:25:945 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:58:26:054 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:58:26:054      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 13:58:26:070      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0038]
[11/07 13:58:26:070      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[11/07 13:58:26:070      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[11/07 13:58:26:070       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 13:58:26:070       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 13:58:26:070       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 13:58:26:070       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0038']
[11/07 13:58:26:132       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 13:58:26:132       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 13:58:26:132       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 13:58:26:132       DevDB.cpp(00079)] :OpenDataBase End
[11/07 13:58:26:132       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 13:58:26:132       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 13:58:26:132       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 13:58:26:132       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 13:58:26:132       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 11/07/2017 13:58:26 EJ NUMBER = 0038 ] |13:58:26 [Power On]<END_EJRNL>]
[11/07 13:58:26:132       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0038','11','07','2017','13','58','26','System Power On<START_EJRNL>[ 11/07/2017 13:58:26 EJ NUMBER = 0038 ] |13:58:26 [Power On]<END_EJRNL>')]
[11/07 13:58:26:179       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 13:58:26:179       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 13:58:26:179       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 13:58:26:179       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 13:58:26:179       DevDB.cpp(00079)] :OpenDataBase End
[11/07 13:58:26:179       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 13:58:26:179       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 13:58:26:179       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[38]
[11/07 13:58:26:179       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [38]
[11/07 13:58:26:179       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[37], m_bRecordCountFinal=[1]
[11/07 13:58:26:226       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [38]
[11/07 13:58:26:226      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 11/07/2017 13:58:26 EJ NUMBER = 0038 ] |13:58:26 [Power On]<END_EJRNL>]
[11/07 13:58:26:226      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 11/07/2017 13:58:26 EJ NUMBER = 0038 ] |13:58:26 [Power On]<END_EJRNL>]
[11/07 13:58:26:226      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 13:58:26:257      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:58:26:257 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:58:26:257      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:58:26:257      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:58:26:257      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 13:58:26:273      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[11/07 13:58:26:273      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[11/07 13:58:26:273      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 13:58:26:273      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[11/07 13:58:26:273      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 13:58:26:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:58:26:289      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:58:26:289      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:58:26:289      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:58:26:289      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:58:26:289      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:58:26:304      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:58:26:304      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:58:26:304      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:58:26:304      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:58:26:304      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:58:26:304      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 13:58:26:304      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 13:58:26:304      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 13:58:26:304      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 13:58:26:335      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 13:58:26:335      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 13:58:28:179      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 13:58:28:179      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 13:58:28:179      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 13:58:30:773      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 13:58:30:773      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 13:58:30:773      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 13:58:42:484      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 13:58:45:625      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[11/07 13:58:48:765      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[11/07 13:58:48:843      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[11/07 13:58:48:843      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 13:58:52:031      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[11/07 13:58:52:031      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[11/07 13:58:52:031      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(2000)
[11/07 13:58:52:031      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[11/07 13:58:52:031      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(2000)
[11/07 13:58:52:046      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 13:58:55:203      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 13:58:55:203      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:58:55:203      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(2000)
[11/07 13:58:55:203      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(2000)
[11/07 13:58:55:203      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[11/07 13:58:55:203      DevCmn.cpp(03320)] :fnCDU_GetCSTStatus(nCSTNo[2]):return(1)
[11/07 13:58:55:203      DevCmn.cpp(03222)] :fnCDU_GetRecycleBoxStatus():return(1)
[11/07 13:58:55:203      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 13:58:55:203      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[11/07 13:58:55:203      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[11/07 13:58:55:203      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][1][0][0]
[11/07 13:58:55:203      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[11/07 13:58:55:218      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 13:58:55:296 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[11/07 13:58:55:296 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[11/07 13:58:55:328      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 13:58:55:343      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:58:55:359     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 13:58:55:359     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 13:58:55:406      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APRUN]
[11/07 13:58:55:406      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[11/07 13:58:55:406 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD1]
[11/07 13:58:55:406      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=0, pTime=11
[11/07 13:58:55:406      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 13:58:55:406 TranNmsProc.cpp(01046)] :fnAPP_UpdateDispensingCSTsStatus(): Status=[0]->[1]
[11/07 13:58:55:421 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[11/07 13:58:55:593 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:58:55:593 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:58:55:593      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:58:55:593      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:58:55:593 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 13:58:55:812      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:58:56:031      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:58:56:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:58:56:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:58:56:031      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 13:58:56:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:58:56:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:58:56:046      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:58:56:046      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:58:56:046      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:58:56:046      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:58:56:046      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:58:56:046      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:58:56:046      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:58:56:046      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:58:56:046      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:58:56:062      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:58:56:078      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:58:56:078      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:58:56:109      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 13:58:56:125      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0039]
[11/07 13:58:56:125      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 13:58:56:125      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 13:58:56:125       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 13:58:56:125       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 13:58:56:125       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 13:58:56:125       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0039']
[11/07 13:58:56:171       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 13:58:56:171       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 13:58:56:171       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 13:58:56:171       DevDB.cpp(00079)] :OpenDataBase End
[11/07 13:58:56:171       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 13:58:56:171       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 13:58:56:171       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 13:58:56:171       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 13:58:56:171       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 13:58:56 EJ NUMBER = 0039 ] |13:58:56 [SERVICE MODE]<END_EJRNL>]
[11/07 13:58:56:171       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0039','11','07','2017','13','58','56','Change into service mode<START_EJRNL>[ 11/07/2017 13:58:56 EJ NUMBER = 0039 ] |13:58:56 [SERVICE MODE]<END_EJRNL>')]
[11/07 13:58:56:218       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 13:58:56:218       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 13:58:56:218       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 13:58:56:218       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 13:58:56:218       DevDB.cpp(00079)] :OpenDataBase End
[11/07 13:58:56:218       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 13:58:56:218       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 13:58:56:218       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[39]
[11/07 13:58:56:218       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [39]
[11/07 13:58:56:218       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[38], m_bRecordCountFinal=[1]
[11/07 13:58:56:265       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [39]
[11/07 13:58:56:265      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 13:58:56 EJ NUMBER = 0039 ] |13:58:56 [SERVICE MODE]<END_EJRNL>]
[11/07 13:58:56:265      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 13:58:56 EJ NUMBER = 0039 ] |13:58:56 [SERVICE MODE]<END_EJRNL>]
[11/07 13:58:56:265      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 13:58:56:281      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:58:56:437 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:58:56:437      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 13:58:56:437      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 13:58:56:437 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 13:58:56:437 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:58:56:437      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:58:56:437      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:58:56:718      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:58:56:953      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:58:56:953   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:58:56:953   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:58:56:953      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 13:58:56:953   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:58:56:953   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:58:56:968      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:58:56:968      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:58:56:968      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:58:56:968      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:58:56:968      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:58:56:968      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:58:56:968      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:58:56:968      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:58:56:968      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:58:56:984      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:58:57:015      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:58:57:015 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:58:57:015 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:58:57:015 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:58:57:015 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:58:57:015 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[11/07 13:58:57:015      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 13:58:57:015      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:58:57:015      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 13:58:57:015      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:58:57:015      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 13:58:57:015       Sound.cpp(00148)] :Stop
[11/07 13:58:57:015       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:58:57:015      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:58:57:015      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:58:57:015      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:58:57:015      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 13:58:57:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:58:57:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:58:57:031      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:58:57:031      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:58:57:031      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 13:58:58:625      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:58:58:625 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 13:58:58:703 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[11/07 13:58:58:718 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 13:58:58:765 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[11/07 13:58:58:843 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[11/07 13:58:59:000 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A6
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[11/07 13:58:59:015      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 13:58:59:015      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:58:59:015      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 13:58:59:015      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:58:59:015      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 13:58:59:015       Sound.cpp(00148)] :Stop
[11/07 13:58:59:015       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:58:59:015      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:58:59:015      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:58:59:015      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:58:59:015      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 13:58:59:015   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:58:59:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:58:59:015      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:58:59:015      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:58:59:390      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 13:59:00:953      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:00:984 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[11/07 13:59:00:984 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[11/07 13:59:01:015 TranMainProc.cp(00182)] :TranStatus[11]
[11/07 13:59:01:015 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[11/07 13:59:01:015 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[11/07 13:59:01:015     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 13:59:01:015     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 13:59:01:015     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 13:59:01:062     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 13:59:01:093     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 13:59:01:093     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 13:59:01:093 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[11/07 13:59:01:093      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 13:59:01:296      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 13:59:01:312 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 13:59:01:312 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[11/07 13:59:01:343   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[11/07 13:59:01:343   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[11/07 13:59:01:343      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:59:01:343      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 13:59:01:343      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 13:59:01:343   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:01:343   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:01:343   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 13:59:01:343   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 13:59:01:343      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:01:343      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 13:59:01:343       Sound.cpp(00148)] :Stop
[11/07 13:59:01:343       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:01:343      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:01:343      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:01:343      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:01:343      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 13:59:01:343   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:01:343   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:01:343      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:01:734      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:01:734      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 13:59:02:515 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 13:59:02:515 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 13:59:02:515 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 13:59:02:515 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1011])
[11/07 13:59:02:515 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    88]:return
[11/07 13:59:02:515 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[11/07 13:59:02:515 TranHostProc.cp(01345)] :m_strProtocolType=[STANDARD1], m_KeyMode=[3]
[11/07 13:59:02:515 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 13:59:02:515 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[11/07 13:59:02:515 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 13:59:02:515 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(23)
[11/07 13:59:02:515 TranHostProc.cp(00254)] :SendLength(23), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 13:59:02:515 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 13:59:02:546      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:02:562 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 13:59:02:562     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 13:59:02:562     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 13:59:02:562  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 13:59:02:562       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 13:59:02:562    CESocket.cpp(00116)] :Create() start

[11/07 13:59:02:562    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 13:59:02:562    CESocket.cpp(00220)] :Connect() start - socket:1984 address: 192.168.198.199 port: 45000
[11/07 13:59:02:562    CESocket.cpp(00441)] :Connect() OK
[11/07 13:59:02:562    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 13:59:02:562  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 13:59:02:562  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 13:59:02:562  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 88, protocol : STANDARD1
[11/07 13:59:02:562  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 13:59:02:562    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 13:59:04:171    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 13:59:04:171    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 13:59:04:171       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 13:59:04:281  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 13:59:04:281    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:04:281       TCPIP.cpp(00091)] :LineSendData
[11/07 13:59:04:281    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 13:59:04:281    CESocket.cpp(00520)] :Send() end - total sendLen: 26
[11/07 13:59:04:281  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:26]

[11/07 13:59:04:390    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 13:59:04:390    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 13:59:04:390       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 13:59:04:437  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 13:59:04:437    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:04:593    CESocket.cpp(00755)] :receive Data(thread): [len:108]
[11/07 13:59:04:593    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 108
[11/07 13:59:04:593       TCPIP.cpp(00123)] :receive Data(put_data): [len: 108]
[11/07 13:59:04:750  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 13:59:04:750    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:04:750  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[9]

[11/07 13:59:04:750    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:04:750       TCPIP.cpp(00091)] :LineSendData
[11/07 13:59:04:750    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 13:59:04:750    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 13:59:04:843    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 13:59:04:843    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 13:59:04:843       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 13:59:04:906  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 13:59:04:906    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 13:59:04:906       TCPIP.cpp(00091)] :LineSendData
[11/07 13:59:04:906    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 13:59:04:906    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 13:59:04:937       TCPIP.cpp(00082)] :line close start
[11/07 13:59:04:937    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 13:59:04:937    CESocket.cpp(00463)] :Disconnect() End

[11/07 13:59:04:937    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 13:59:04:937     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 13:59:04:937    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 13:59:04:937    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 13:59:04:937      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 13:59:04:937   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 13:59:04:937   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 13:59:04:937      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 13:59:04:937 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 13:59:04:937 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 13:59:04:937 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 13:59:04:937  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    881106201715161900050011808CE54F7E2CCC00000355022808CE54F7E2CCC11808CE54F7E2CCC][LEN:105]

[11/07 13:59:04:937     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 13:59:04:937      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 13:59:04:937 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[105])
[11/07 13:59:04:937      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 13:59:04:937   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 13:59:04:937   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 13:59:04:937      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 13:59:04:937 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[88]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[11062017151619]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[000500]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11808CE54F7E2CCC]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[00000355]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[0]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[22808CE54F7E2CCC]
[11/07 13:59:04:937 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[11808CE54F7E2CCC]
[11/07 13:59:04:937 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[10]
[11/07 13:59:05:171 TranHostProc.cp(04029)] :OpenRespMsg.SurchargeAmount_V=[00000355]
[11/07 13:59:05:218 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 13:59:05:218 TranOutputProc.(02767)] :fnAPP_LoadWorkingKey(), Keymode = [3]
[11/07 13:59:05:218      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:05:234      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K3], szKeyValue[11808CE54F7E2CCC])
[11/07 13:59:05:234      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:05:289      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 13:59:05:304 TranOutputProc.(02839)] :fnAPP_LoadWorkingKey() K3 KeyLoad Success!
[11/07 13:59:05:304      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:05:304      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K2], szKeyValue[22808CE54F7E2CCC])
[11/07 13:59:05:304      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:05:351      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 13:59:05:367 TranOutputProc.(02865)] :fnAPP_LoadWorkingKey() K2 KeyLoad Success!
[11/07 13:59:05:367      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:05:367      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK], szKeyName[K1], szKeyValue[11808CE54F7E2CCC])
[11/07 13:59:05:367      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:05:570      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 13:59:05:585 TranOutputProc.(02893)] :fnAPP_LoadWorkingKey() K1 KeyLoad Success!
[11/07 13:59:05:585 TranHostProc.cp(03105)] :fnAPP_STD1_RecvHost(): TranResult = TRUE
[11/07 13:59:05:585 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 13:59:05:585 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 13:59:05:585      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 13:59:05:835      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 13:59:05:851 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[11/07 13:59:05:851 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 13:59:05:851 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 13:59:05:851 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 13:59:05:851 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 13:59:05:906 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 13:59:05:906 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:05:906 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:05:906 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:05:906 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:05:906 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 13:59:05:906 TranMainProc.cp(00096)] :[fnAPP_MainOpenPorc] Send ATM_REPORT_STATUS to RMS agent
[11/07 13:59:05:906 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 13:59:05:906 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 13:59:05:906 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:05:906 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:05:906 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:05:906 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:05:906      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:05:906      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:05:914      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:05:921      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:05:921      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:05:921      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:05:921      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:05:921      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:05:921      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:05:929      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:05:929      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:06:093 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 13:59:06:093 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 13:59:06:093 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:06:093 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:06:093 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 13:59:06:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 13:59:06:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 13:59:06:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 13:59:06:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 13:59:06:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 13:59:06:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 13:59:06:093      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:59:06:093      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 13:59:06:093      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 13:59:06:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:06:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:06:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 13:59:06:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 13:59:06:093      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:06:093      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 13:59:06:093       Sound.cpp(00148)] :Stop
[11/07 13:59:06:093       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:06:093      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:06:093      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:06:093      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:06:093      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 13:59:06:101   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:06:101   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:06:101      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:06:101      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:06:101      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 13:59:07:671 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 13:59:07:671 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 13:59:07:671 TranMainProc.cp(00134)] :fnAPP_MainOpenProc:: Return(1)
[11/07 13:59:07:750 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_ONLINE    ], HostStatusSave[HOST_WAITREADY ]
[11/07 13:59:07:828 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:59:07:828      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 13:59:07:828      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 13:59:07:828 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 13:59:07:828 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:59:07:828      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:59:07:828      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:59:08:093      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:59:08:328      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:08:328      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:08:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:59:08:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:59:08:328      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 13:59:08:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:08:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:08:343      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:59:08:343      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:59:08:343      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:59:08:343      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:08:343      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:08:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:08:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:08:351      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:08:359      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:08:359      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:08:359      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:08:359      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:08:359      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:08:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:08:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:08:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:08:390      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:08:390 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:08:390 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:08:390 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:08:390 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:08:390 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 13:59:08:390   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 13:59:08:390   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 13:59:08:390   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 13:59:08:390   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 13:59:08:390   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 13:59:08:390   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 13:59:08:390   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 13:59:08:390   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 13:59:08:390      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 13:59:08:390      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:59:08:398      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:59:08:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:08:398   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:08:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 13:59:08:398   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 13:59:08:398      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:08:398      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 13:59:08:398       Sound.cpp(00148)] :Stop
[11/07 13:59:08:398       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:08:398      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:08:398      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:08:398      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:08:398      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 13:59:08:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:08:414   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:08:414      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:59:08:414      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:08:421      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 13:59:09:984      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:59:09:984 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 13:59:10:101 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 13:59:10:101 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 6 => A0
[11/07 13:59:10:109      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:10:117 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 13:59:10:117 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[15], m_pDevCmn->m_DelayTime=[0]
[11/07 13:59:10:117 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 13:59:10:132      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 13:59:10:132   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:10:132   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:10:148      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:59:10:148      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:59:10:148      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:59:10:164      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:10:164 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 13:59:10:164 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[15], m_DelayTime=[0]
[11/07 13:59:10:195 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_READY      )
[11/07 13:59:10:195 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 13:59:10:195 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 13:59:10:210 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 13:59:10:210 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 13:59:10:210 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 13:59:10:210 TranMainProc.cp(01138)] :TranCode:[1011]
[11/07 13:59:10:210 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 13:59:10:210 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 13:59:10:218 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 13:59:10:218 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:10:320 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:10:476 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 13:59:10:476 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 13:59:10:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:10:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:10:484      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:10:492      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:10:492      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:10:492      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:10:492      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:10:492      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:10:500      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:10:500      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:10:500      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:10:500     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 13:59:10:500     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 13:59:10:500     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 13:59:10:625     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 13:59:10:664     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 13:59:10:664     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 13:59:10:664 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 13:59:10:664      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 13:59:10:898      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 13:59:10:921 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 13:59:10:921 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 13:59:10:921   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 13:59:10:921   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 13:59:10:921      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:59:10:921      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 13:59:10:921      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 13:59:10:921   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:10:921   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:10:921   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 13:59:10:921   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 13:59:10:921      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:10:921      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 13:59:10:921       Sound.cpp(00148)] :Stop
[11/07 13:59:10:921       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:10:921      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:10:921      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:10:921      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:10:921      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 13:59:10:921   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:10:921   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:10:929      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:11:265      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:11:265      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 13:59:12:046 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 13:59:12:046 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 13:59:12:046 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 13:59:12:046 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 13:59:12:046 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 13:59:12:046 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 13:59:12:046 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 13:59:12:046 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 13:59:12:046 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 13:59:12:046 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 13:59:12:046 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 13:59:12:085 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 13:59:12:085      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 13:59:12:085      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 13:59:12:085 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 13:59:12:085 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 13:59:12:085 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 13:59:12:085 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 13:59:12:085 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 13:59:12:085 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 13:59:12:085 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 13:59:12:085 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 13:59:12:085 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 13:59:12:101      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:12:109 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 13:59:12:109     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 13:59:12:109     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 13:59:12:109  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 13:59:12:109       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 13:59:12:109    CESocket.cpp(00116)] :Create() start

[11/07 13:59:12:109    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 13:59:12:109    CESocket.cpp(00220)] :Connect() start - socket:776 address: 192.168.198.199 port: 45000
[11/07 13:59:12:109    CESocket.cpp(00441)] :Connect() OK
[11/07 13:59:12:109    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 13:59:12:109  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 13:59:12:109  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 13:59:12:109  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 13:59:12:109  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 13:59:12:109    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 13:59:13:710    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 13:59:13:710    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 13:59:13:710       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 13:59:13:835  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 13:59:13:835    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:13:835       TCPIP.cpp(00091)] :LineSendData
[11/07 13:59:13:835    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 13:59:13:835    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 13:59:13:835  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 13:59:13:960    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 13:59:13:960    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 13:59:13:960       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 13:59:13:992  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 13:59:13:992    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:14:179    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 13:59:14:179    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 13:59:14:179       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 13:59:14:304  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 13:59:14:304    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:14:304  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 13:59:14:304    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 13:59:14:304       TCPIP.cpp(00091)] :LineSendData
[11/07 13:59:14:304    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 13:59:14:304    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 13:59:14:398    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 13:59:14:398    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 13:59:14:398       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 13:59:14:460  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 13:59:14:460    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 13:59:14:460       TCPIP.cpp(00091)] :LineSendData
[11/07 13:59:14:460    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 13:59:14:460    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 13:59:14:476       TCPIP.cpp(00082)] :line close start
[11/07 13:59:14:476    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 13:59:14:476    CESocket.cpp(00463)] :Disconnect() End

[11/07 13:59:14:476    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 13:59:14:476     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 13:59:14:476    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 13:59:14:476    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 13:59:14:476      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 13:59:14:476   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 13:59:14:476   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 13:59:14:476      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 13:59:14:476 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 13:59:14:476 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 13:59:14:476 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 13:59:14:476  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 13:59:14:476     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 13:59:14:476      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 13:59:14:476 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 13:59:14:476      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 13:59:14:476   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 13:59:14:476   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 13:59:14:476      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 13:59:14:476 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 13:59:14:476 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 13:59:14:476 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 13:59:14:476 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 13:59:14:476 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 13:59:14:476 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 13:59:14:476 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 13:59:14:476 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 13:59:14:476      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 13:59:14:726      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 13:59:14:757 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 13:59:14:757 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 13:59:14:757 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 13:59:14:757 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 13:59:14:757 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 13:59:14:804 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 13:59:14:804 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:14:804 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:14:804 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:14:804 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:14:804 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 13:59:14:804 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:14:804 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:14:804 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:14:804 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:14:804      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 13:59:14:960 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:59:14:960      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 13:59:14:960      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 13:59:14:960 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 13:59:14:960 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:59:14:960      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:59:14:960      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:59:15:164      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:59:15:382      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:15:382      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:15:382   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:59:15:382   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:59:15:382      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 13:59:15:382   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:15:382   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:15:414      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:59:15:414      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:59:15:414      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:59:15:414      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:15:414      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:15:414      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:15:414      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:15:414      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:15:414      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:15:429      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:15:460      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:15:460 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:15:460 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:15:460 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:15:460 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:15:460 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 13:59:15:460      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 13:59:15:460      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:59:15:460      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 13:59:15:460      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:15:460      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 13:59:15:460       Sound.cpp(00148)] :Stop
[11/07 13:59:15:460       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:15:460      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:15:460      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:15:460      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:15:460      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 13:59:15:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:15:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:15:460      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:59:15:460      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:15:460      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 13:59:17:039      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:59:17:039 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 13:59:17:132 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 13:59:17:148      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:17:164 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 13:59:17:164 TranNmsProc.cpp(00488)] :NmsCashStatus:(1)
[11/07 13:59:17:320 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:59:17:320 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 13:59:17:320 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:59:17:320      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:59:17:320      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:59:17:320   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 13:59:17:320   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 13:59:17:320   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 13:59:17:320   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 13:59:17:320 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 13:59:17:351 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 13:59:17:351 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 13:59:17:351 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:17:351 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:17:351 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:17:351 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:17:351      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:17:351      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:17:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:17:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:17:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:17:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:17:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:17:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:17:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:17:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:17:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:17:539 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 13:59:17:539 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 13:59:17:539 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:17:539 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:17:539 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 13:59:17:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 13:59:17:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 13:59:17:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 13:59:17:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 13:59:17:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 13:59:17:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 13:59:17:539      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:59:17:539      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 13:59:17:539      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 13:59:17:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:17:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:17:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 13:59:17:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 13:59:17:539      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:17:539      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 13:59:17:539       Sound.cpp(00148)] :Stop
[11/07 13:59:17:539       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:17:539      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:17:539      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:17:539      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:17:539      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 13:59:17:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:17:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:17:539      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:17:914      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:17:914      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 13:59:19:476 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 13:59:19:476 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 13:59:19:476      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:59:19:476      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 13:59:19:492      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 13:59:19:492      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 13:59:19:492      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 13:59:19:492      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 13:59:19:492      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 13:59:19:492 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 13:59:19:492 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 13:59:19:492 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:19:492 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:19:710      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 13:59:19:960      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:19:960   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:59:19:960   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:59:19:960 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0xffffffff]
[11/07 13:59:20:023     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 13:59:20:023     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 13:59:20:023     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 13:59:20:023     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 13:59:20:023     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 13:59:20:023     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 13:59:20:054     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 13:59:20:085     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 13:59:20:085     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 13:59:20:085 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 13:59:20:085 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 13:59:20:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 13:59:20:101   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 13:59:20:101   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 13:59:20:101   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 13:59:20:101   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 13:59:20:101 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 13:59:20:117      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 13:59:20:117      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 13:59:20:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:20:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:20:132      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 13:59:20:132      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 13:59:20:132      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 13:59:20:226      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 13:59:20:226 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 13:59:20:242 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 13:59:20:242      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:59:20:257      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 13:59:20:273      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 13:59:20:273   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:20:273   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:20:273   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 13:59:20:273   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 13:59:20:273      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:20:273      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 13:59:20:273       Sound.cpp(00148)] :Stop
[11/07 13:59:20:273       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:20:273      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:20:273      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:20:273      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:20:273      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 13:59:20:273   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:20:273   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:20:273      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:59:20:273      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:20:273      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 13:59:21:960 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 13:59:21:960 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 13:59:44:618   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 13:59:44:618   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 13:59:44:619   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 13:59:44:619   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 13:59:44:619   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 13:59:46:561   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 13:59:46:562   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 13:59:46:562   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 13:59:46:562   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 13:59:46:562   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 13:59:46:886   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 13:59:46:886   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 13:59:46:887   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 13:59:46:887   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 13:59:46:887   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 13:59:47:159   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 13:59:47:159   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:47:160   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 13:59:47:160   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 13:59:47:160   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 13:59:47:499   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 13:59:47:499   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:47:499   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 13:59:47:499   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 13:59:47:499   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 13:59:47:736   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 13:59:47:736   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:47:737   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 13:59:47:737   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 13:59:48:030      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 13:59:48:043      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:48:049 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 13:59:48:271      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:59:48:666      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:48:671      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:48:672   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:59:48:672   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:59:48:672      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 13:59:48:673   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:48:673   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:48:685      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:59:48:685      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:59:48:686      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:59:48:686      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:49:060      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:49:060      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:49:060      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:49:060      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:49:060      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:49:060      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:49:076      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:49:076      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:49:076      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:49:076      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:49:076      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:49:076      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:49:794      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:49:794 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 13:59:49:810      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 13:59:49:810   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:49:810   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:49:826      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:59:49:826      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:59:49:826      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:59:49:841      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:49:841 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 13:59:49:998 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 13:59:49:998 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 13:59:49:998      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 13:59:49:998      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 13:59:49:998 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 13:59:50:201      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 13:59:50:404      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:50:404   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 13:59:50:404   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 13:59:50:404      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 13:59:50:404   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:50:404   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:50:419      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 13:59:50:419      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 13:59:50:419      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 13:59:50:419      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:50:419      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:50:419      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 13:59:50:427      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 13:59:50:427      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 13:59:50:435      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 13:59:50:435      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 13:59:50:435      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 13:59:50:435      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 13:59:50:435      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 13:59:50:443      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 13:59:50:443      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 13:59:50:443      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 13:59:50:466      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 13:59:50:466      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 13:59:50:466      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:59:50:466      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 13:59:50:466      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 13:59:50:466      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 13:59:50:466       Sound.cpp(00148)] :Stop
[11/07 13:59:50:466       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 13:59:50:466      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 13:59:50:466      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 13:59:50:466      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 13:59:50:466      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 13:59:50:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:50:466   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:50:474      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 13:59:50:474      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 13:59:50:474      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 13:59:50:474      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 13:59:50:529 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 13:59:50:529      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 13:59:50:560      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0040]
[11/07 13:59:50:560      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 13:59:50:560      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 13:59:50:560       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 13:59:50:560       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 13:59:50:560       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 13:59:50:560       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0040']
[11/07 13:59:50:615       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 13:59:50:615       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 13:59:50:615       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 13:59:50:615       DevDB.cpp(00079)] :OpenDataBase End
[11/07 13:59:50:615       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 13:59:50:615       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 13:59:50:615       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 13:59:50:615       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 13:59:50:615       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 13:59:50 EJ NUMBER = 0040 ] |13:59:50 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 13:59:50:615       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0040','11','07','2017','13','59','50','Change into operator mode<START_EJRNL>[ 11/07/2017 13:59:50 EJ NUMBER = 0040 ] |13:59:50 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 13:59:50:669       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 13:59:50:669       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 13:59:50:669       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 13:59:50:669       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 13:59:50:669       DevDB.cpp(00079)] :OpenDataBase End
[11/07 13:59:50:669       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 13:59:50:669       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 13:59:50:669       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[40]
[11/07 13:59:50:669       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [40]
[11/07 13:59:50:669       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[39], m_bRecordCountFinal=[1]
[11/07 13:59:50:716       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [40]
[11/07 13:59:50:716      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 13:59:50 EJ NUMBER = 0040 ] |13:59:50 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 13:59:50:716      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 13:59:50 EJ NUMBER = 0040 ] |13:59:50 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 13:59:50:716      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 13:59:50:716      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 13:59:50:732      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 13:59:50:748     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 13:59:50:748     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 13:59:50:794 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 13:59:50:794 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 13:59:50:794 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 13:59:50:896 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 13:59:51:435 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 13:59:51:435      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 13:59:51:435   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:51:435   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:51:435      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:59:51:435      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 13:59:56:999   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 13:59:56:999   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:57:000   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 13:59:57:000   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 13:59:57:000   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 13:59:57:268   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 13:59:57:268   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:57:268   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 13:59:57:268   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 13:59:57:268   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 13:59:57:568   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 13:59:57:568   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:57:569   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 13:59:57:569   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 13:59:57:569   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 13:59:57:842   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 13:59:57:842   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:57:843   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 13:59:57:843   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 13:59:57:843   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 13:59:58:058   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 13:59:58:058   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:58:059   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 13:59:58:059   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 13:59:58:059   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 13:59:58:338   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 13:59:58:338   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 13:59:58:338   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 13:59:58:338   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 13:59:58:338   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 13:59:58:847   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 13:59:58:847   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 13:59:58:848   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 13:59:58:848   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 13:59:58:848   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 13:59:59:289 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 13:59:59:289      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 13:59:59:289   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 13:59:59:290   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 13:59:59:291      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 13:59:59:291      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:00:00:287 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:00:00:287      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:00:00:287   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:00:00:287   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:00:00:287      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:00:00:287      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:00:47:053   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:00:47:053   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:00:47:054   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:00:47:054   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:00:47:054   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:00:47:598   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:00:47:598   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:00:47:598   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:00:47:598   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:00:47:598   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:00:48:058 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:00:48:058      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:00:48:059   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:00:48:059   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:00:48:060      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:00:48:060      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:00:50:525 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:00:50:525      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:00:50:525   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:00:50:526   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:00:50:527      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:00:50:527      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:00:52:712 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 14:00:52:712      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 14:00:52:712   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:00:52:713   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:00:52:714      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:00:52:714      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:00:53:444   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:00:53:444   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:00:53:444   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:00:53:445   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:00:53:445   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:00:53:845 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:00:53:845      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:00:53:845   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:00:53:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:00:53:847      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:00:53:847      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:00:55:222   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:00:55:222   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:00:55:223   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:00:55:223   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:00:55:223   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:00:55:625 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:00:55:625      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:00:55:626   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:00:55:626   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:00:55:628      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:00:55:628      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:03:173   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:01:03:173   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:01:03:174   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:01:03:174   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:01:03:174   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:01:03:663 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:01:03:663      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:01:03:664   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:01:03:664   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:01:03:665      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:01:03:666      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:14:882   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 14:01:14:882   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:01:14:883   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 14:01:14:883   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 14:01:14:883   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 14:01:15:202   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:01:15:202   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:01:15:203   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:01:15:203   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:01:15:203   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:01:15:671 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:01:15:671      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:01:15:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:01:15:672   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:01:15:673      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:01:15:673      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:16:382   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:01:16:382   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:01:16:382   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:01:16:382   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:01:16:383   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:01:16:915 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:01:16:916      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:01:16:916   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:01:16:916   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:01:16:916      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:01:16:917      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:17:529   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[8])
[11/07 14:01:17:529   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:01:17:529   WinAtmCtl.cpp(00891)] :strDataValue[8])
[11/07 14:01:17:529   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[8])
[11/07 14:01:17:529   WinAtmCtl.cpp(00935)] :VirtualKeyCode[38])
[11/07 14:01:17:833   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:01:17:833   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:01:17:834   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:01:17:834   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:01:17:834   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:01:18:247 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:01:18:247      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:01:18:248   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:01:18:248   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:01:18:249      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:01:18:249      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:20:332 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:01:20:332      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:01:20:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:01:20:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:01:20:333      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:01:20:333      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:22:026   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:01:22:026   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:01:22:026   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:01:22:027   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:01:22:027   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:01:22:484 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:01:22:484      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:01:22:485   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:01:22:485   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:01:22:486      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:01:22:486      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:23:088 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PRINTALLSETUP]
[11/07 14:01:23:092      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:01:23:168      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 14:01:23:168      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 14:01:23:168 TranMainProc.cp(00141)] :fnAPP_MainTranProc(53)
[11/07 14:01:23:185 TranMainProc.cp(00182)] :TranStatus[53]
[11/07 14:01:23:185 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[53]
[11/07 14:01:23:185 TranMainProc.cp(00967)] :fnAPP_TranPrintAllSetupProc()
[11/07 14:01:23:250     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:01:23:250     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:01:23:262     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[20000]
[11/07 14:01:23:262     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[200.00]
[11/07 14:01:23:265      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:01:23:266 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[1], ToJournal[171])
[11/07 14:01:23:266 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:01:23:266 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:01:23:266      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:01:23:267      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:01:23:267      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:01:23:267      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:01:23:279      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:01:23:279      DevCmn.cpp(00778)] :TranStatus=(53), strData
[11/07 14:01:23:282      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:01:23:283      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:01:30:438 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:01:30:438 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[1], ToJournal[171])
[11/07 14:01:30:439 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:01:30:439 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:01:30:439      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:01:30:440      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:01:30:440      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:01:30:440      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:01:30:452      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:01:30:452      DevCmn.cpp(00778)] :TranStatus=(53), strData
[11/07 14:01:30:455      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:01:30:455      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:01:37:449 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:01:37:449 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[1], ToJournal[171])
[11/07 14:01:37:449 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:01:37:449 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:01:37:449      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:01:37:449      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:01:37:449      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:01:37:449      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:01:37:464      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:01:37:464      DevCmn.cpp(00778)] :TranStatus=(53), strData=(20,52454345495054205441494C203A,20,5245434549505420414444524553532031203A,20,5245434549505420414444524553532032203A,20,5245434549505420414444524553532033203A,20,524543454950542050484F4E45204E554D424552203A,20,20,535552434841524745204F574E4552,20203A204369746962616E6B,535552434841524745204D4F444520202020202020203A20454E41424C45,53555243484152474520414D4F554E542020202020203A2024332E3535,20,53574620564F4C554D4520202020203A2030,4A5047205245534F4C5554494F4E203A2046554C4C,4D41494E2041442E202331202020202020202020203A2044495341424C45,4D41494E2041442E20233120494E54455256414C203A2035,20,4D41494E2041442E202332202020202020202020203A2044495341424C45,4D41494E2041442E20233220494E54455256414C203A2035,20,4D41494E2041442E202333202020202020202020203A2044495341424C45,4D41494E2041442E20233320494E54455256414C203A2035,20,4D41494E2041442E202334202020202020202020203A2044495341424C45,4D41494E2041442E20233420494E54455256414C203A2035,20,20,20,20,20)
[11/07 14:01:37:464      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:01:37:464      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:01:44:527 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:01:44:527 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[1], ToJournal[171])
[11/07 14:01:44:527 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:01:44:527 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:01:44:527      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:01:44:527      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:01:44:527      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:01:44:527      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:01:44:542      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:01:44:542      DevCmn.cpp(00778)] :TranStatus=(53), strData=(20,4D41494E2041442E202335202020202020202020203A2044495341424C45,4D41494E2041442E20233520494E54455256414C203A2035,20,4D41494E2041442E202336202020202020202020203A2044495341424C45,4D41494E2041442E20233620494E54455256414C203A2035,20,5355422041442E202331202020202020202020203A2044495341424C45,5355422041442E202332202020202020202020203A2044495341424C45,5355422041442E202333202020202020202020203A2044495341424C45,5355422041442E202334202020202020202020203A2044495341424C45,5355422041442E202335202020202020202020203A2044495341424C45,5355422041442E202336202020202020202020203A2044495341424C45,5355422041442E20494E54455256414C203A2035,20,434F55504F4E202331203A2044495341424C45,434F55504F4E202332203A2044495341424C45,434F55504F4E202333203A2044495341424C45,434F55504F4E202334203A2044495341424C45,434F55504F4E202335203A2044495341424C45,434F55504F4E202336203A2044495341424C45,20,42494E204C4953542020202020202020203A2030,454D5620202020202020202020202020203A20454E41424C45,20454E41424C45442041494420283929,2020413030303030303030333130313020285649534129,2020413030303030303030333230313020285649534120456C656374726F6E29,2020413030303030303030333830313020285649534120504C555329,2020413030303030303030343130313020284D61737465724361726429,2020413030303030303030343330363020284D41455354524F29,20,20,20,20,20)
[11/07 14:01:44:542      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:01:44:542      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:01:51:636 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:01:51:636 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[1], ToJournal[171])
[11/07 14:01:51:636 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:01:51:636 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:01:51:636      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:01:51:636      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:01:51:636      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:01:51:636      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:01:51:652      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:01:51:652      DevCmn.cpp(00778)] :TranStatus=(53), strData
[11/07 14:01:51:652      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:01:51:652      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:01:58:574 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:01:58:574 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[1], ToJournal[171])
[11/07 14:01:58:574 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:01:58:574 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:01:58:574      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:01:58:574      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:01:58:574      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:01:58:574      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:01:58:589      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:01:58:589      DevCmn.cpp(00778)] :TranStatus=(53), strData=(5445524D494E414C202320202020202020203A2039303330,524F5554494E4720494420202020202020203A20313233343536,535441545553204D4F4E49544F52494E47203A2044495341424C45,4845414C544820434845434B3A204F4E2C2020494E54455256414C3A2032,484F5354205553452055524C20202020202020203A2044495341424C45,484F5354203153542049502041444452455353203A203139322E3136382E3139382E313939,484F53542031535420504F5254202020202020203A203435303030,484F535420324E442049502041444452455353203A203139322E3136382E3139382E313939,484F535420324E4420504F5254202020202020203A203435303030,524556455253414C20524554525920434E5420203A2032,524D5320434F4E4E454354494F4E20203A20454E41424C45,524D53205553452055524C20202020203A2044495341424C45,524D53204950204144445245535320203A203139322E3136382E3230312E3934,524D5320504F5254204E4F20202020203A2039393939,524D53205354415455532053454E44203A20454E41424C45,202053454E4420494E54455256414C203A2034,20,4B4559204D4F4445203A204B455928542D44455329,4D4153544552204B455920494E444558203A2031,4B455920434845434B202020202020202020202020203A203337203232,4D4143494E47204B455920434845434B2044494749543A203030203030,20,20,20,20,20,20,20,20,20,20,20,20,20,20)
[11/07 14:01:58:589      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:01:58:589      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:02:03:996 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:02:03:996 TranDevProc.cpp(01859)] :fnAPD_MaterialOut(Device[1], CheckTime[1], WaitFlag[0])
[11/07 14:02:03:996 TranDevProc.cpp(01875)] :fnAPD_MaterialOut:ActDevice[1]
[11/07 14:02:03:996 TranDevProc.cpp(01907)] :fnAPD_MaterialOut:ActDevice[1], TranProc[0], CashCountFlag[0], CashInOpenFlag[0],
[11/07 14:02:04:011      DevCmn.cpp(00653)] :fnSPR_GetMaterialInfo():return(2)
[11/07 14:02:04:011      DevCmn.cpp(00821)] :fnSPR_Eject(nWaitSec[1])
[11/07 14:02:04:011      DevCmn.cpp(00830)] :fnSPR_Eject(...):return(0)
[11/07 14:02:04:011      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[1])
[11/07 14:02:04:011 TranDevProc.cpp(01998)] :fnAPD_MaterialOut:MaterialOutFlag[1],m_pDevCmn->TranStatus=[53]
[11/07 14:02:04:011 TranDevProc.cpp(02022)] :fnAPD_MaterialOut(...):return
[11/07 14:02:04:011 TranDevProc.cpp(02029)] :fnAPD_MaterialOutCheckRetract(Device[1], WaitFlag[1])
[11/07 14:02:04:011      DevCmn.cpp(00672)] :fstrSPR_GetRetractCnt():return(0)
[11/07 14:02:04:011 TranDevProc.cpp(02058)] :fnAPD_MaterialOutCheckRetract:ActDevice[1]
[11/07 14:02:04:011 TranDevProc.cpp(02066)] :fnAPD_MaterialOutCheckRetract:ActDevice[1], MaterialOutFlag[1]
[11/07 14:02:07:183      DevCmn.cpp(00837)] :fnSPR_WaitTaken()
[11/07 14:02:07:183      DevCmn.cpp(00846)] :fnSPR_WaitTaken():return(0)
[11/07 14:02:07:214 TranDevProc.cpp(02088)] :fnAPD_MaterialOutCheckRetract:m_pDevCmn->DeviceTimeout[0]
[11/07 14:02:07:214 TranDevProc.cpp(02107)] :fnAPD_MaterialOutCheckRetract:ActDevice[0], MaterialOutCheckFlag[1], RetractDevice[1], DevEnDisable[0]
[11/07 14:02:07:214      DevCmn.cpp(00653)] :fnSPR_GetMaterialInfo():return(0)
[11/07 14:02:07:214      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:02:07:230 TranDevProc.cpp(02200)] :fnAPD_MaterialOutCheckRetract:ActDevice[0], MaterialOutCheckFlag[1], RetractDevice[1], DevEnDisable[0]
[11/07 14:02:07:230 TranDevProc.cpp(02245)] :fnAPD_MaterialOutCheckRetract(...):return
[11/07 14:02:07:230 TranMainProc.cp(00970)] :fnAPP_TranPrintAllSetupProc():return
[11/07 14:02:07:230 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:02:07:230 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:02:07:230 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:02:07:230 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:02:07:277 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:02:07:277 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 14:02:07:277      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 14:02:07:277      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 14:02:07:433 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:02:07:433 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:02:07:433      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:02:07:433      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:02:07:433 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:02:07:761      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:02:07:996      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:02:07:996   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:02:07:996   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:02:07:996      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x24], nAction=[2], nPinInputMode=[1]
[11/07 14:02:07:996   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:02:07:996   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:02:08:011      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:02:08:011      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:02:08:011      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:02:08:011      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:02:08:011      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:02:08:011      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:02:08:011      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:02:08:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:02:08:058      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:02:08:058   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:02:08:058   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:02:08:058   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:02:08:058   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:02:08:058   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:02:08:058   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:02:08:058   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 14:02:08:058   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 14:02:08:058      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:02:08:058      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:02:08:058      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:02:08:058   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:02:08:058   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:02:08:058   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:02:08:058   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:02:08:058      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:02:08:058      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:02:08:058       Sound.cpp(00148)] :Stop
[11/07 14:02:08:058       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:02:08:058      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:02:08:058      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:02:08:058      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[OPDO]
[11/07 14:02:08:058      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:02:08:058      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:02:08:105 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:02:08:105      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:02:08:105   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:02:08:105   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:02:08:105      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:02:08:105      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:04:52:096   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:04:52:097   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:04:52:097   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:04:52:097   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:04:52:097   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:04:52:538 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:04:52:539      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:04:52:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:04:52:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:04:52:546      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:04:52:546      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:00:312 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:05:00:312      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:05:00:312   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:00:312   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:00:312      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:00:312      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:01:968   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 14:05:01:968   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:01:968   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 14:05:01:968   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 14:05:01:968   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 14:05:02:189   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 14:05:02:189   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:02:198   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 14:05:02:198   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 14:05:02:198   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 14:05:02:517   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:05:02:517   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:05:02:517   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:05:02:517   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:02:517   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:05:02:663 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||1]
[11/07 14:05:02:663      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:02:664   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:02:664   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:02:665      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:03:170      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:03:341 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_RUN]
[11/07 14:05:03:789      DevCmn.cpp(05394)] :fnSNS_ClearOperatorSwitch()
[11/07 14:05:03:789      DevCmn.cpp(05401)] :fnSNS_ClearOperatorSwitch():return(0)
[11/07 14:05:03:789      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:05:03:882 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:05:03:882 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:05:03:882 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:05:03:992 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:05:03:992      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 14:05:04:007      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:05:04:039 AtmClerkCtrl.cp(00514)] :EMV Enabled.. Set Kernel Version [5]
[11/07 14:05:04:820 AtmClerkCtrl.cp(00525)] :OP_RUN ClerkProc:strOpResult[NORMAL||]
[11/07 14:05:04:976 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:05:04:976 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:05:04:976      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:05:04:976      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:05:04:976 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:05:05:210      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:05:05:445      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:05:05:445   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:05:05:445   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:05:05:445      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:05:05:445   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:05:445   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:05:460      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:05:05:460      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:05:05:460      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:05:05:460      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:05:460      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:05:460      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:05:05:460      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:05:05:460      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:05:05:460      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:05:05:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:05:05:507      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:05:05:507      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:05:05:539      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:05:05:554      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0041]
[11/07 14:05:05:554      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:05:05:554      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:05:05:554       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:05:05:554       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:05:05:554       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:05:05:554       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0041']
[11/07 14:05:05:601       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:05:05:601       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:05:05:601       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:05:05:601       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:05:05:601       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:05:05:601       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:05:05:601       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:05:05:601       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:05:05:601       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:05:05 EJ NUMBER = 0041 ] |14:05:05 [SERVICE MODE]<END_EJRNL>]
[11/07 14:05:05:601       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0041','11','07','2017','14','05','05','Change into service mode<START_EJRNL>[ 11/07/2017 14:05:05 EJ NUMBER = 0041 ] |14:05:05 [SERVICE MODE]<END_EJRNL>')]
[11/07 14:05:05:648       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:05:05:648       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:05:05:648       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:05:05:648       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:05:05:648       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:05:05:648       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:05:05:648       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:05:05:648       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[41]
[11/07 14:05:05:648       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [41]
[11/07 14:05:05:648       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[40], m_bRecordCountFinal=[1]
[11/07 14:05:05:695       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [41]
[11/07 14:05:05:695      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:05:05 EJ NUMBER = 0041 ] |14:05:05 [SERVICE MODE]<END_EJRNL>]
[11/07 14:05:05:695      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:05:05 EJ NUMBER = 0041 ] |14:05:05 [SERVICE MODE]<END_EJRNL>]
[11/07 14:05:05:695      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:05:05:710      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:05:05:867 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:05:05:867      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:05:05:867      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:05:05:867 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:05:05:867 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:05:05:867      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:05:05:867      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:05:06:070      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:05:06:289      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:05:06:289   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:05:06:289   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:05:06:289      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:05:06:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:06:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:06:320      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:05:06:320      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:05:06:320      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:05:06:320      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:06:320      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:06:320      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:05:06:320      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:05:06:320      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:05:06:320      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:05:06:335      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:05:06:367      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:05:06:367 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:05:06:367 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:05:06:367 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:05:06:367 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:05:06:367 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:05:06:367      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:05:06:367      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:05:06:367      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:05:06:367      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:06:367      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:05:06:367       Sound.cpp(00148)] :Stop
[11/07 14:05:06:367       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:06:367      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:06:367      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:06:367      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:06:367      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:05:06:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:06:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:06:382      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:06:382      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:06:382      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:05:07:945      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:05:07:945 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:05:08:039 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:05:08:054      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:05:08:054 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 14:05:08:226 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:05:08:226 AtmModeCtrl.cpp(01282)] :GetMemorySize[13885440]
[11/07 14:05:08:226 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:05:08:226      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:05:08:226      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:05:08:226   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:05:08:226   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:05:08:226   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:05:08:226   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:05:08:226 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:05:08:250      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:05:08:250      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:05:08:265      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:05:08:265      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:05:08:265      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:05:08:265      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:05:08:273      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:05:08:273 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:05:08:273 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:05:08:273 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:05:08:273 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:05:08:570      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:05:08:867      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[40000000])
[11/07 14:05:08:867   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:05:08:867   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:05:08:867 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:05:08:914     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:05:08:914     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:05:08:914     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:05:08:914     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:05:08:914     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:05:08:914     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:05:08:953     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:05:08:984     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:05:08:984     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:05:08:984 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:05:08:992 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:05:08:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:05:08:992   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:05:08:992   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:05:08:992   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:05:08:992   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:05:08:992 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:05:09:007      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:05:09:007      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:05:09:007   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:09:007   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:09:023      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:05:09:023      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:05:09:023      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:05:09:132      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:05:09:132 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:05:09:156 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:05:09:156      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:09:156      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:05:09:156      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:05:09:156   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:09:156   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:09:156   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:05:09:156   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:05:09:156      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:09:156      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:05:09:156       Sound.cpp(00148)] :Stop
[11/07 14:05:09:156       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:09:156      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:09:156      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:09:156      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:09:156      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:05:09:156   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:09:156   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:09:156      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:09:156      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:09:484      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:05:10:671 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 14:05:18:539      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:05:18:539 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 14:05:18:539      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:05:18:539      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:05:18:539 AtmModeCtrl.cpp(01741)] :strMCUErrorCode = [0000000]
[11/07 14:05:18:539 AtmModeCtrl.cpp(01760)] : ELSE => ATM_TRAN
[11/07 14:05:18:695 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:05:18:695 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:05:18:695 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:05:18:695 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:05:18:804 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:05:18:804      DevApl.cpp(01874)] :[TRAN START]
[11/07 14:05:18:804      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 14:05:19:007      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 14:05:19:023      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:05:19:023 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 14:05:19:039 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 14:05:19:039 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 14:05:19:054      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:05:19:070      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:05:19:070 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 14:05:19:093      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:05:19:093 TranDevProc.cpp(00526)] :fnAPD_CheckICCardType()
[11/07 14:05:19:109      DevCmn.cpp(01055)] :fstrMCU_GetICData()
[11/07 14:05:19:109      DevCmn.cpp(01060)] :fstrMCU_GetICData():return(3B781800000073C84013009000)
[11/07 14:05:19:109 TranDevProc.cpp(00541)] :fstrMCU_GetICData()=[3B781800000073C84013009000]
[11/07 14:05:19:109      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:05:19:109      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:05:19:109      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:05:19:109      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:05:19:109 TranDevProc.cpp(00554)] :fnAPD_CheckICCardType() return T_EMVCARD_INSERT
[11/07 14:05:19:109 TranDevProc.cpp(00560)] :fnAPD_InitialICCardProcessing()
[11/07 14:05:19:117      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:19:117      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:05:19:117      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:05:19:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:19:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:19:125   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 14:05:19:125   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 14:05:19:125      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:19:125      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 14:05:19:125       Sound.cpp(00148)] :Stop
[11/07 14:05:19:125       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:19:125      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:19:125      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:19:125      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:19:125      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:19:125   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:19:125   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:19:125      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:19:453      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:19:453      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 14:05:19:453      DevCmn.cpp(01402)] :fnEMV_SetKernelType(5)
[11/07 14:05:19:453      DevCmn.cpp(01406)] :EMV_SetTerminalType(EMV_TERMINAL_TYPE_14)
[11/07 14:05:19:492      DevCmn.cpp(01413)] :fnEMV_SetKernelType(.);return(1)
[11/07 14:05:19:492 TranDevProc.cpp(00576)] :fnEMV_SetKernelType(5) = [1]
[11/07 14:05:19:492      DevCmn.cpp(01429)] :fnEMV_SystemInitial()
[11/07 14:05:19:500      DevCmn.cpp(01434)] :fnEMV_SystemInitial(.);return(1)
[11/07 14:05:19:500 TranDevProc.cpp(00585)] :fnEMV_SystemInitial() = [1]
[11/07 14:05:19:500      DevCmn.cpp(01440)] :fnEMV_Sel_BuildCandidateApp()
[11/07 14:05:22:265      DevCmn.cpp(01457)] :fnEMV_Sel_BuildCandidateApp():return(1)
[11/07 14:05:22:265 TranDevProc.cpp(00593)] :fnEMV_Sel_BuildCandidateApp() = [1]
[11/07 14:05:22:265 TranDevProc.cpp(01089)] :fnAPD_EMVSelectAID()
[11/07 14:05:22:265      DevCmn.cpp(01464)] :fnEMV_Sel_GetAppListEx()
[11/07 14:05:22:296      DevCmn.cpp(01471)] :m_pMwiEmv->EMV_Sel_GetAppList(..):return 1
[11/07 14:05:22:296      DevCmn.cpp(01478)] :fnEMV_Sel_GetAppList():return(0001010F4352454449544F204445205649534107A0000000031010)
[11/07 14:05:22:296 TranDevProc.cpp(01099)] :fnEMV_Sel_GetAppListEx() = [0001010F4352454449544F204445205649534107A0000000031010]
[11/07 14:05:22:296 TranDevProc.cpp(01117)] :UserConfirm=[0], Number of AID = [1]
[11/07 14:05:22:296 TranDevProc.cpp(00670)] :fnAPD_EMVUserAIDLoad(nAIDNum=[1], strAID=[010F4352454449544F204445205649534107A0000000031010])
[11/07 14:05:22:312 TranDevProc.cpp(00700)] :AID List : [010F4352454449544F204445205649534107A0000000031010]
[11/07 14:05:22:312 TranDevProc.cpp(00715)] :AID List without 9F11 tag : [0F4352454449544F204445205649534107A0000000031010]
[11/07 14:05:22:312 TranDevProc.cpp(00716)] :Issuer Code Index : [ISO8859_01]
[11/07 14:05:22:312 TranDevProc.cpp(00764)] :Data before PACK : [4300520045004400490054004F0020004400450020005600490053004100]
[11/07 14:05:22:312 TranDevProc.cpp(00768)] :Packed length : [30]
[11/07 14:05:22:312 TranDevProc.cpp(00322)] :fnAPD_WCStoMBS - WCHAR   : [004300520045004400490054004F00200044004500200056004900530041]
[11/07 14:05:22:312 TranDevProc.cpp(00331)] :fnAPD_WCStoMBS - CHAR    : [4352454449544F204445205649534100]
[11/07 14:05:22:312 TranDevProc.cpp(00340)] :fnAPD_WCStoMBS - CString : [4352454449544F2044452056495341]
[11/07 14:05:22:312 TranDevProc.cpp(00786)] :Parsed AID [1], AID=[A0000000031010], DESC=[CREDITO DE VISA], FLAG=[TRUE]
[11/07 14:05:22:312 TranDevProc.cpp(00801)] :Continue = [0], Remain AIDList =[07A0000000031010]
[11/07 14:05:22:312 TranDevProc.cpp(00805)] :Max AID = [1]
[11/07 14:05:22:312 TranDevProc.cpp(01121)] :AID Number = [1], Max AID = [1]
[11/07 14:05:22:312      DevCmn.cpp(01505)] :fnEMV_Sel_FinalAppSelection(0)
[11/07 14:05:22:656      DevCmn.cpp(01510)] :fnEMV_Sel_FinalAppSelection():return(1)
[11/07 14:05:22:656 TranDevProc.cpp(01158)] :fnEMV_Sel_FinalAppSelection(0) = [1]
[11/07 14:05:22:656      DevCmn.cpp(01516)] :fnEMV_InitAppProcess(00, 000000000000, 171107140522, 1)
[11/07 14:05:24:171      DevCmn.cpp(01520)] :fnEMV_InitAppProcess(....):return(1)
[11/07 14:05:24:171 TranDevProc.cpp(01174)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_InitAppProcess:nResult(1)
[11/07 14:05:24:171 TranDevProc.cpp(01203)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID = [A0000000031010]
[11/07 14:05:24:171 TranDevProc.cpp(01204)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID Label = [CREDITO DE VISA]
[11/07 14:05:24:171 TranDevProc.cpp(00607)] :fnAPD_EMVSelectAID() = [1]
[11/07 14:05:24:171      DevCmn.cpp(01526)] :fnEMV_ReadAppData()
[11/07 14:05:26:617      DevCmn.cpp(01531)] :fnEMV_ReadAppData():return(1)
[11/07 14:05:26:617 TranDevProc.cpp(00623)] :m_pDevCmn->fnEMV_ReadAppData():nResult(1)
[11/07 14:05:26:617 TranLibProc.cpp(00538)] :CTranCmn::fnAPL_EmvMakeCardPanProc()
[11/07 14:05:26:617      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 14:05:26:632      DevCmn.cpp(01563)] :fnEMV_GetVal(66):return(Data Length = [0] )
[11/07 14:05:26:632 TranDevProc.cpp(00655)] :fnEMV_GetVal(EMVTid_LangPrefer) = []
[11/07 14:05:26:632      DevCmn.cpp(01421)] :fnEMV_SetConfig(1)
[11/07 14:05:26:632 TranDevProc.cpp(00659)] :fnEMV_SetConfig(EMV_CONFIG_TYPE_ONLINEPIN)
[11/07 14:05:26:632 TranDevProc.cpp(00662)] :fnAPD_InitialICCardProcessing():return OK
[11/07 14:05:26:648 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 14:05:26:679 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 14:05:26:679 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 14:05:26:695 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[83], nPinInputMode[2], strBtn[SPANISH|ENGLISH|X|X|X|X|X|EXIT], strBtnEvent[SPANISH|ENGLISH|X|X|X|X|X|EXIT], nScrNo[104])
[11/07 14:05:26:695 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:26:695 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,X,X,X,X,X,EXIT]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,X,X,X,X,X,EXIT])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,X,X,X,X,X,EXIT]
[11/07 14:05:26:695      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:26:695      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:05:26:695      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:26:695   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:26:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 14:05:26:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 14:05:26:710      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:26:710      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 14:05:26:710       Sound.cpp(00148)] :Stop
[11/07 14:05:26:710       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:26:710      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:26:710      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:26:710      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:26:710      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:05:26:710   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:26:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:26:710      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:26:710      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:26:710      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 14:05:28:945   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 14:05:28:945   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 14:05:28:945      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 14:05:28:945      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:29:157      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:29:157 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:29:158 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 14:05:29:158 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:05:29:158 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:29:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:05:29:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:05:29:159 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 14:05:29:160 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:05:29:160 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 14:05:29:160 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 14:05:29:160 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 14:05:29:161   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:29:161   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:29:162   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 14:05:29:162   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 14:05:29:162   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:29:163   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:29:163   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:05:29:163   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:05:29:164   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:29:164   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:29:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:05:29:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:05:29:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:29:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:29:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:05:29:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:05:29:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:29:167   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:29:167      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:29:167      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:05:29:167      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:05:29:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:29:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:29:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 14:05:29:169   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 14:05:29:169      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:29:169      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 14:05:29:170       Sound.cpp(00148)] :Stop
[11/07 14:05:29:170       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:29:170      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:29:170      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:29:170      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:29:171      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 14:05:29:171   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:29:171   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:29:172      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 14:05:29:172      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:29:476      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 14:05:30:161   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:05:30:161   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:30:162   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:05:30:162   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:30:162   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:05:30:250   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:05:30:250   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:30:250   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:05:30:250   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:30:250   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:05:30:401   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:05:30:401   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:30:402   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:05:30:402   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:30:402   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:05:30:524   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:05:30:524   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:30:525   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:05:30:525   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:30:525   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:05:31:495   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:05:31:495   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:05:31:495   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:05:31:496   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:31:496   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:05:31:585   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 14:05:31:585   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 14:05:31:585      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 14:05:31:586      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:31:619      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:31:619 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:31:620 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 14:05:31:620 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 14:05:31:620 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:31:621      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 14:05:31:731 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 14:05:31:731 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 14:05:31:731 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[18a], nPinInputMode[2], strBtn[X|YES|X|NO|X|X|X|EXIT], strBtnEvent[X|YES|X|NO|X|X|X|EXIT], nScrNo[111])
[11/07 14:05:31:731 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:31:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:31:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:31:733   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:31:733   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:31:734   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:31:734   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:31:735   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:05:31:735   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:05:31:735   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:31:736   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:31:736   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:31:736   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:31:737      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[111], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:31:737      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD111.swf)
[11/07 14:05:31:737      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD111.swf)
[11/07 14:05:31:738   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:31:738   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:31:738   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD111.swf])
[11/07 14:05:31:739   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD111.swf]
[11/07 14:05:31:739      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:31:739      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(111)
[11/07 14:05:31:739       Sound.cpp(00148)] :Stop
[11/07 14:05:31:740       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:31:740      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:31:740      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:31:740      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:31:740      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:05:31:741   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:31:741   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:31:742      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:31:742      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:31:745      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[111], nInputSec[0]):return(0)
[11/07 14:05:33:043   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[SELBALANCE/NO]
[11/07 14:05:33:043   WinAtmCtl.cpp(01145)] :SetScreenDataName=(SELBALANCE),SetScreenDataValue=(NO)
[11/07 14:05:33:044      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[SELBALANCE], szSetDataValue[NO])
[11/07 14:05:33:044      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:33:205      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:33:205 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:33:206 TranMenuProc.cp(00637)] :GetKeyStr=[NO]
[11/07 14:05:33:206 TranMenuProc.cp(00699)] :Pressed Button ID=[4]
[11/07 14:05:33:206 TranInputProc.c(00281)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:33:207 TranInputProc.c(00468)] :fnAPP_SelectTransaction()
[11/07 14:05:33:208 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|WITHDRAWAL|X|BALANCEINQUIRY|X|TRANSFER|X|EXIT], strBtnEvent[X|WITHDRAWAL|X|BALANCEINQUIRY|X|TRANSFER|X|EXIT], nScrNo[105])
[11/07 14:05:33:208 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:33:208   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:33:208   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:33:209   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:33:209   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:33:210   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:33:210   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:33:211   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:33:211   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:33:211   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:33:212   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:33:212 TranMenuProc.cp(00583)] :Screen#[105], Data:ID[1], Type[0], Content[X,WITHDRAWAL,X,BALANCEINQUIRY,X,TRANSFER,X,EXIT]
[11/07 14:05:33:212   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [X,WITHDRAWAL,X,BALANCEINQUIRY,X,TRANSFER,X,EXIT])
[11/07 14:05:33:212   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/X,WITHDRAWAL,X,BALANCEINQUIRY,X,TRANSFER,X,EXIT]
[11/07 14:05:33:213      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[105], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:33:213      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD105.swf)
[11/07 14:05:33:213      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD105.swf)
[11/07 14:05:33:214   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:33:214   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:33:214   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD105.swf])
[11/07 14:05:33:215   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD105.swf]
[11/07 14:05:33:215      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:33:215      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(105)
[11/07 14:05:33:216       Sound.cpp(00148)] :Stop
[11/07 14:05:33:216       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:33:216      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:33:216      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:33:216      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:33:216      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:05:33:217   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:33:217   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:33:218      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:33:218      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:33:533      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[105], nInputSec[0]):return(0)
[11/07 14:05:34:292   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[TRANSACTIONSELECT/WITHDRAWAL]
[11/07 14:05:34:293   WinAtmCtl.cpp(01145)] :SetScreenDataName=(TRANSACTIONSELECT),SetScreenDataValue=(WITHDRAWAL)
[11/07 14:05:34:293      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[TRANSACTIONSELECT], szSetDataValue[WITHDRAWAL])
[11/07 14:05:34:293      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:34:315      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:34:315 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:34:316 TranMenuProc.cp(00637)] :GetKeyStr=[WITHDRAWAL]
[11/07 14:05:34:316 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:05:34:316 TranInputProc.c(00568)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:34:317 TranMenuProc.cp(01067)] :fnAPP_TranWithdrawalProc()
[11/07 14:05:34:317      DevApl.cpp(01849)] :[PROCESS COUNT] : 1
[11/07 14:05:34:641      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 14:05:34:660 TranInputProc.c(00645)] :fnAPP_SelectReceipt()
[11/07 14:05:34:665 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[18a], nPinInputMode[2], strBtn[X|YES|X|NO|X|X|X|EXIT], strBtnEvent[X|YES|X|NO|X|X|X|EXIT], nScrNo[106])
[11/07 14:05:34:665 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:34:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:34:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:34:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:34:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:34:667   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:34:667   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:34:667   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:05:34:668   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:05:34:668   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:34:668   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:34:669   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:34:669   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:34:670      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[106], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:34:670      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD106.swf)
[11/07 14:05:34:670      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD106.swf)
[11/07 14:05:34:670   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:34:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:34:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD106.swf])
[11/07 14:05:34:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD106.swf]
[11/07 14:05:34:672      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:34:672      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(106)
[11/07 14:05:34:672       Sound.cpp(00148)] :Stop
[11/07 14:05:34:672       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:34:673      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:34:673      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:34:673      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:34:673      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:05:34:674   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:34:674   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:34:675      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:34:675      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:34:978      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[106], nInputSec[0]):return(0)
[11/07 14:05:36:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[RECEIPTSELECT/YES]
[11/07 14:05:36:072   WinAtmCtl.cpp(01145)] :SetScreenDataName=(RECEIPTSELECT),SetScreenDataValue=(YES)
[11/07 14:05:36:073      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[RECEIPTSELECT], szSetDataValue[YES])
[11/07 14:05:36:073      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:36:209      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:36:209 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:36:210 TranMenuProc.cp(00637)] :GetKeyStr=[YES]
[11/07 14:05:36:210 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:05:36:210 TranInputProc.c(00680)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:36:211 TranInputProc.c(00688)] :YES on Receipt selection. fnAPP_SelectReceipt() return OK
[11/07 14:05:36:211 TranInputProc.c(00738)] :fnAPP_SelectSourceAccount(3)
[11/07 14:05:36:212 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|CHECKING|X|SAVINGS|X|CREDITCARD|X|EXIT], strBtnEvent[X|CW_CHECKING|X|CW_SAVINGS|X|CW_CREDITCARD|X|EXIT], nScrNo[202])
[11/07 14:05:36:213 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:36:213   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:36:213   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:36:214   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:36:214   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:36:215   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:36:215   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:36:216   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:36:216   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:36:217   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:36:217   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:36:217      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[202], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:36:218      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD202.swf)
[11/07 14:05:36:218      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD202.swf)
[11/07 14:05:36:218   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:36:218   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:36:219   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD202.swf])
[11/07 14:05:36:219   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD202.swf]
[11/07 14:05:36:219      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:36:220      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(202)
[11/07 14:05:36:220       Sound.cpp(00148)] :Stop
[11/07 14:05:36:220       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:36:220      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:36:221      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:36:221      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:36:221      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:05:36:221   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:36:222   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:36:223      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:36:223      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:36:523      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[202], nInputSec[0]):return(0)
[11/07 14:05:37:060   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[WITHDRAWALACCOUNT/CHECKING]
[11/07 14:05:37:060   WinAtmCtl.cpp(01145)] :SetScreenDataName=(WITHDRAWALACCOUNT),SetScreenDataValue=(CHECKING)
[11/07 14:05:37:061      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[WITHDRAWALACCOUNT], szSetDataValue[CHECKING])
[11/07 14:05:37:061      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:37:083      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:37:083 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:37:084 TranMenuProc.cp(00637)] :GetKeyStr=[CHECKING]
[11/07 14:05:37:084 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:05:37:084 TranInputProc.c(00844)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:37:085 TranInputProc.c(00859)] :Valid Source Account is selected. Button = [2] return T_OK
[11/07 14:05:37:085 TranInputProc.c(01007)] :fnAPP_SelectWithAmount(UseFastCash=[1])
[11/07 14:05:37:085 TranInputProc.c(02259)] :fnAPP_CalcMoneyMinOut()
[11/07 14:05:37:088 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[20]
[11/07 14:05:37:158 TranDevProc.cpp(03053)] :nCstDispCnt1=[1],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:158 TranDevProc.cpp(03054)] :nCstDispCntTotal=[1]
[11/07 14:05:37:158 TranInputProc.c(02298)] :fnAPP_CalcMoneyMinOut:nMinMoney=[20]
[11/07 14:05:37:159 TranInputProc.c(02306)] :fnAPP_CalcMoneyMaxOut()
[11/07 14:05:37:168 TranInputProc.c(02331)] :m_pDevCmn->CSTCnt=[2]
[11/07 14:05:37:168 TranInputProc.c(02332)] :MAXOUTAMT=[200],MAXOUTCNT=[40]
[11/07 14:05:37:170 TranInputProc.c(02344)] :AvailCstCount=[1]
[11/07 14:05:37:170 TranInputProc.c(02345)] :m_pDevCmn->FirstCSTLoc=[0] m_pDevCmn->FirstCSTStatus=[1]
[11/07 14:05:37:173 TranInputProc.c(02357)] :AvailCstCount=[2]
[11/07 14:05:37:173 TranInputProc.c(02358)] :m_pDevCmn->SecondCSTLoc=[0] m_pDevCmn->SecondCSTStatus=[1]
[11/07 14:05:37:173 TranInputProc.c(02387)] :CstValue 1/2/3/4 = [20][20][0][0]
[11/07 14:05:37:173 TranInputProc.c(02388)] :CstCount 1/2/3/4 = [2000][2000][0][0]
[11/07 14:05:37:173 TranInputProc.c(02389)] :AvailCstCount=[2]
[11/07 14:05:37:173 TranInputProc.c(02442)] :fnAPP_CalcMoneyMaxOut() Return ::ReturnAmt=[200]
[11/07 14:05:37:174 TranInputProc.c(02449)] :fnAPP_CalculateFastCash
[11/07 14:05:37:174 TranInputProc.c(02461)] :strFastCash:[20,40,60,80,100,200]
[11/07 14:05:37:174 TranInputProc.c(02462)] :fnAPP_CalcMoneyMaxOut():[200]
[11/07 14:05:37:174 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[20]
[11/07 14:05:37:224 TranDevProc.cpp(03053)] :nCstDispCnt1=[1],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:224 TranDevProc.cpp(03054)] :nCstDispCntTotal=[1]
[11/07 14:05:37:224 TranInputProc.c(02494)] :m_nFastCash[0]=[20]
[11/07 14:05:37:224 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[40]
[11/07 14:05:37:278 TranDevProc.cpp(03053)] :nCstDispCnt1=[2],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:279 TranDevProc.cpp(03054)] :nCstDispCntTotal=[2]
[11/07 14:05:37:279 TranInputProc.c(02494)] :m_nFastCash[1]=[20]
[11/07 14:05:37:279 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[60]
[11/07 14:05:37:333 TranDevProc.cpp(03053)] :nCstDispCnt1=[3],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:334 TranDevProc.cpp(03054)] :nCstDispCntTotal=[3]
[11/07 14:05:37:334 TranInputProc.c(02494)] :m_nFastCash[2]=[20]
[11/07 14:05:37:334 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[80]
[11/07 14:05:37:389 TranDevProc.cpp(03053)] :nCstDispCnt1=[4],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:390 TranDevProc.cpp(03054)] :nCstDispCntTotal=[4]
[11/07 14:05:37:390 TranInputProc.c(02494)] :m_nFastCash[3]=[20]
[11/07 14:05:37:390 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[100]
[11/07 14:05:37:443 TranDevProc.cpp(03053)] :nCstDispCnt1=[5],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:443 TranDevProc.cpp(03054)] :nCstDispCntTotal=[5]
[11/07 14:05:37:443 TranInputProc.c(02494)] :m_nFastCash[4]=[20]
[11/07 14:05:37:444 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[200]
[11/07 14:05:37:599 TranDevProc.cpp(03053)] :nCstDispCnt1=[10],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:37:599 TranDevProc.cpp(03054)] :nCstDispCntTotal=[10]
[11/07 14:05:37:599 TranInputProc.c(02494)] :m_nFastCash[5]=[20]
[11/07 14:05:37:599 TranInputProc.c(02497)] :bAvailable[1],fnAPP_CalcMoneyMaxOut():[200]
[11/07 14:05:37:600 TranInputProc.c(01027)] :fnAPP_SelectWithAmount : m_FastCaseNo[1]
[11/07 14:05:37:602 TranInputProc.c(01135)] :Enter Amount : m_MoneyMaxOut=[200], MoneyMinOut=[20]
[11/07 14:05:37:603 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[13], strBtn[], strBtnEvent[], nScrNo[204])
[11/07 14:05:37:603 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:37:603   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:37:604   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:37:604   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 14:05:37:605   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 14:05:37:605   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:37:605   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:37:606   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:05:37:606   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:05:37:607   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:37:607   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:37:608   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:05:37:608   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:05:37:608   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:37:609   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:37:609   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:05:37:609   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:05:37:610   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:37:610   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:37:611 TranMenuProc.cp(00583)] :Screen#[204], Data:ID[1], Type[0], Content[200]
[11/07 14:05:37:611   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [200])
[11/07 14:05:37:611   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/200]
[11/07 14:05:37:612 TranMenuProc.cp(00583)] :Screen#[204], Data:ID[2], Type[0], Content[CASE1]
[11/07 14:05:37:612   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [CASE1])
[11/07 14:05:37:612   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/CASE1]
[11/07 14:05:37:613 TranMenuProc.cp(00583)] :Screen#[204], Data:ID[3], Type[0], Content[20]
[11/07 14:05:37:613   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [20])
[11/07 14:05:37:613   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/20]
[11/07 14:05:37:614      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[204], nInputSec[0], nPinInputMode[13], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:37:614      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD204.swf)
[11/07 14:05:37:614      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD204.swf)
[11/07 14:05:37:614   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:37:615   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:37:615   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD204.swf])
[11/07 14:05:37:615   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD204.swf]
[11/07 14:05:37:616      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:37:616      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(204)
[11/07 14:05:37:616       Sound.cpp(00148)] :Stop
[11/07 14:05:37:616       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:37:617      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:37:617      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:37:617      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:37:617      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[13]
[11/07 14:05:37:618   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:37:618   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:37:619      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,00,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:37:619      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:37:916      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[204], nInputSec[0]):return(0)
[11/07 14:05:38:590   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 14:05:38:590   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:38:591   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 14:05:38:591   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 14:05:38:591   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 14:05:38:871   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:05:38:871   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:05:38:872   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:05:38:872   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:38:872   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:05:39:108   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:05:39:108   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:05:39:108   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:05:39:109   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:05:39:109   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:05:39:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[WITHDRAWALAMOUNT/20]
[11/07 14:05:39:165   WinAtmCtl.cpp(01145)] :SetScreenDataName=(WITHDRAWALAMOUNT),SetScreenDataValue=(20)
[11/07 14:05:39:165      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[WITHDRAWALAMOUNT], szSetDataValue[20])
[11/07 14:05:39:166      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:39:378      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:39:378 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:39:379 TranMenuProc.cp(00637)] :GetKeyStr=[20]
[11/07 14:05:39:379 TranMenuProc.cp(00670)] :Amount Mode Input=[20]   return OK
[11/07 14:05:39:379 TranInputProc.c(01246)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:39:380 TranDevProc.cpp(03025)] :fbAPD_IsDispensible=[20]
[11/07 14:05:39:438 TranDevProc.cpp(03053)] :nCstDispCnt1=[1],nCstDispCnt2=[0],nCstDispCnt3=[0],nCstDispCnt4=[0]
[11/07 14:05:39:438 TranDevProc.cpp(03054)] :nCstDispCntTotal=[1]
[11/07 14:05:39:438 TranInputProc.c(01402)] :fnAPP_ConfirmAmount:szRetValue=[20.00]
[11/07 14:05:39:439 TranInputProc.c(01267)] :fnAPP_SelectWithAmount() return T_OK <= Confirm OK
[11/07 14:05:39:439 TranLibProc.cpp(00648)] :fnAPL_EmvTranDataMake()
[11/07 14:05:39:439      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:39:440      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:05:39:440      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:05:39:440   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:39:440   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:39:441   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 14:05:39:441   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 14:05:39:441      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:39:442      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 14:05:39:442       Sound.cpp(00148)] :Stop
[11/07 14:05:39:442       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:39:442      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:39:443      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:39:443      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:39:443      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:39:444   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:39:444   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:39:445      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:39:738      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:39:738      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 14:05:39:738      DevCmn.cpp(01570)] :fnEMV_TlvStoreVal(103, 01)
[11/07 14:05:39:739      DevCmn.cpp(01575)] :EMV_TlvStoreVal(..):return(1)
[11/07 14:05:39:739      DevCmn.cpp(01570)] :fnEMV_TlvStoreVal(3, 000000002000)
[11/07 14:05:39:740      DevCmn.cpp(01575)] :EMV_TlvStoreVal(..):return(1)
[11/07 14:05:39:740      DevCmn.cpp(01570)] :fnEMV_TlvStoreVal(129, 20)
[11/07 14:05:39:741      DevCmn.cpp(01575)] :EMV_TlvStoreVal(..):return(1)
[11/07 14:05:39:741 TranLibProc.cpp(00725)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_TlvStoreVal(EMVTid_AccountType, 20):nResult(1)
[11/07 14:05:39:742      DevCmn.cpp(01563)] :fnEMV_GetVal(58):return(Data Length = [4] )
[11/07 14:05:39:742 TranLibProc.cpp(00788)] :fnEMV_GetVal(EMVTid_IsuCountryCod) = [@]
[11/07 14:05:39:743      DevCmn.cpp(01563)] :fnEMV_GetVal(17):return(Data Length = [22] )
[11/07 14:05:39:743 TranLibProc.cpp(00804)] :fnEMV_GetVal(EMVTid_AppLabel) = [VISA CREDIT]
[11/07 14:05:39:743      DevCmn.cpp(01537)] :fnEMV_OffDataAuth()
[11/07 14:05:39:744      DevCmn.cpp(01542)] :fnEMV_OffDataAuth():return(1)
[11/07 14:05:39:744 TranLibProc.cpp(00813)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_OffDataAuth():nResult(1)
[11/07 14:05:39:744      DevCmn.cpp(01548)] :fnEMV_ProcRestriction()
[11/07 14:05:39:745      DevCmn.cpp(01553)] :fnEMV_ProcRestriction():return(1)
[11/07 14:05:39:745 TranLibProc.cpp(00833)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_ProcRestriction():nResult(1)
[11/07 14:05:39:745      DevCmn.cpp(01581)] :fnEMV_CardholderVerify1(769DD53AA41AF34A)
[11/07 14:05:39:746      DevCmn.cpp(01586)] :fnEMV_CardholderVerify1(.):return(1)
[11/07 14:05:39:747 TranLibProc.cpp(00881)] :fnAPL_EmvTranDataMake():m_pDevCmn->EMV_CardholderVerify1(PassWord):nResult(1)
[11/07 14:05:39:747      DevCmn.cpp(01592)] :EMV_TerminalRiskMgmt()
[11/07 14:05:39:747      DevCmn.cpp(01597)] :EMV_TerminalRiskMgmt():return(1)
[11/07 14:05:39:748 TranLibProc.cpp(00901)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_TerminalRiskMgmt():nResult(1)
[11/07 14:05:39:748      DevCmn.cpp(01602)] :fnEMV_ActionAnalysis(.)
[11/07 14:05:40:129      DevCmn.cpp(01607)] :fnEMV_ActionAnalysis(.):return(1)
[11/07 14:05:40:129 TranLibProc.cpp(00924)] :fnEMV_ActionAnalysis():m_pDevCmn->fnEMV_ActionAnalysis():nResult(1), strResult(  )
[11/07 14:05:40:145 TranLibProc.cpp(00950)] :fnAPL_EmvTranDataMake() First Generate AC OK return(0)
[11/07 14:05:40:146 TranInputProc.c(01460)] :fnAPP_SurchargeDisplay(0)
[11/07 14:05:40:146 TranInputProc.c(02574)] :BIN CHECKING : START
[11/07 14:05:40:146 TranInputProc.c(02610)] :Extra BIN CHECK : Extra Bin List Number=[0]
[11/07 14:05:40:146 TranInputProc.c(02645)] :BIN CHECK : No Matching
[11/07 14:05:40:147 TranInputProc.c(01520)] :NO Dynamic Flow, Withdrawal transaction : Surcharge : [00000355]
[11/07 14:05:40:147     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:05:40:147     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:05:40:148 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[18a], nPinInputMode[2], strBtn[X|YES|X|NO|X|X|X|EXIT], strBtnEvent[X|YES|X|NO|X|X|X|EXIT], nScrNo[201])
[11/07 14:05:40:148 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:05:40:149   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:05:40:149   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:05:40:150   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:05:40:150   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:05:40:150   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:05:40:151   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:05:40:151   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:05:40:151   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:05:40:152   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:05:40:152   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:05:40:153   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:05:40:153   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:05:40:153 TranMenuProc.cp(00583)] :Screen#[201], Data:ID[1], Type[0], Content[$ 3.55]
[11/07 14:05:40:154   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [$ 3.55])
[11/07 14:05:40:154   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/$ 3.55]
[11/07 14:05:40:154 TranMenuProc.cp(00583)] :Screen#[201], Data:ID[2], Type[0], Content[Citibank]
[11/07 14:05:40:155   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [Citibank])
[11/07 14:05:40:155   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/Citibank]
[11/07 14:05:40:155      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[201], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:40:156      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD201.swf)
[11/07 14:05:40:156      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD201.swf)
[11/07 14:05:40:156   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:40:156   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:40:157   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD201.swf])
[11/07 14:05:40:157   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD201.swf]
[11/07 14:05:40:157      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:40:158      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(201)
[11/07 14:05:40:158       Sound.cpp(00148)] :Stop
[11/07 14:05:40:158       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:40:158      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:40:159      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:40:159      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:40:159      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:05:40:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:40:160   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:40:161      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:05:40:161      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:05:40:163      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[201], nInputSec[0]):return(0)
[11/07 14:05:41:649   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[SURCHARGE/YES]
[11/07 14:05:41:650   WinAtmCtl.cpp(01145)] :SetScreenDataName=(SURCHARGE),SetScreenDataValue=(YES)
[11/07 14:05:41:650      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[SURCHARGE], szSetDataValue[YES])
[11/07 14:05:41:650      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:05:41:851      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:05:41:851 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:05:41:852 TranMenuProc.cp(00637)] :GetKeyStr=[YES]
[11/07 14:05:41:852 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:05:41:852 TranInputProc.c(01634)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:05:41:853 TranInputProc.c(01642)] :fnAPP_SurchargeDisplay: Return() T_OK
[11/07 14:05:41:853      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:05:42:092      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:05:42:111 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:05:42:111 TranHostProc.cp(00075)] :TranCode(3), m_pDevCmn->TranStatus(20)
[11/07 14:05:42:118      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:42:119      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:05:42:119      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:05:42:119   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:42:119   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:42:120   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:05:42:120   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:05:42:120      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:42:121      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:05:42:121       Sound.cpp(00148)] :Stop
[11/07 14:05:42:121       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:42:121      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:42:122      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:42:122      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:42:122      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:42:122   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:42:123   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:42:123      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:42:425      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:42:425      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:05:43:202 TranHostProc.cp(00214)] :fnAPP_SendHost::m_pProfile->TRANS.SerialNo(000002)
[11/07 14:05:43:202 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:05:43:202 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:05:43:202 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:05:43:203 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[3])
[11/07 14:05:43:203 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    85]:return
[11/07 14:05:43:203 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[3] RealFlag[1])
[11/07 14:05:43:223 TranHostProc.cp(01075)] :Track2Data_40=[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX]
[11/07 14:05:43:223 TranHostProc.cp(01126)] :TranReqMsg.TransactionAmount_V=[2000]
[11/07 14:05:43:223 TranHostProc.cp(01142)] :TranReqMsg.SurchargeAmount_V=[00000355]
[11/07 14:05:43:223 TranHostProc.cp(02418)] :Adding ud FIeld
[11/07 14:05:43:223      DevCmn.cpp(01624)] :fnEMV_MakeEMVTagData(TRANSACTION)
[11/07 14:05:43:224      DevCmn.cpp(01563)] :fnEMV_GetVal(3):return(Data Length = [12] )
[11/07 14:05:43:225      DevCmn.cpp(01563)] :fnEMV_GetVal(5):return(Data Length = [0] )
[11/07 14:05:43:226      DevCmn.cpp(01563)] :fnEMV_GetVal(8):return(Data Length = [16] )
[11/07 14:05:43:227      DevCmn.cpp(01563)] :fnEMV_GetVal(13):return(Data Length = [6] )
[11/07 14:05:43:228      DevCmn.cpp(01563)] :fnEMV_GetVal(16):return(Data Length = [4] )
[11/07 14:05:43:229      DevCmn.cpp(01563)] :fnEMV_GetVal(19):return(Data Length = [20] )
[11/07 14:05:43:230      DevCmn.cpp(01563)] :fnEMV_GetVal(20):return(Data Length = [2] )
[11/07 14:05:43:230      DevCmn.cpp(01563)] :fnEMV_GetVal(24):return(Data Length = [4] )
[11/07 14:05:43:231      DevCmn.cpp(01563)] :fnEMV_GetVal(34):return(Data Length = [6] )
[11/07 14:05:43:232      DevCmn.cpp(01563)] :fnEMV_GetVal(36):return(Data Length = [2] )
[11/07 14:05:43:233      DevCmn.cpp(01563)] :fnEMV_GetVal(55):return(Data Length = [14] )
[11/07 14:05:43:234      DevCmn.cpp(01563)] :fnEMV_GetVal(73):return(Data Length = [2] )
[11/07 14:05:43:235      DevCmn.cpp(01563)] :fnEMV_GetVal(82):return(Data Length = [6] )
[11/07 14:05:43:236      DevCmn.cpp(01563)] :fnEMV_GetVal(83):return(Data Length = [4] )
[11/07 14:05:43:236      DevCmn.cpp(01563)] :fnEMV_GetVal(87):return(Data Length = [2] )
[11/07 14:05:43:237      DevCmn.cpp(01563)] :fnEMV_GetVal(88):return(Data Length = [10] )
[11/07 14:05:43:239      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 14:05:43:240      DevCmn.cpp(01563)] :fnEMV_GetVal(94):return(Data Length = [4] )
[11/07 14:05:43:240      DevCmn.cpp(01563)] :fnEMV_GetVal(96):return(Data Length = [6] )
[11/07 14:05:43:241      DevCmn.cpp(01563)] :fnEMV_GetVal(100):return(Data Length = [8] )
[11/07 14:05:43:242      DevCmn.cpp(01563)] :fnEMV_GetVal(102):return(Data Length = [6] )
[11/07 14:05:43:243      DevCmn.cpp(01563)] :fnEMV_GetVal(103):return(Data Length = [2] )
[11/07 14:05:43:244      DevCmn.cpp(01563)] :fnEMV_GetVal(104):return(Data Length = [8] )
[11/07 14:05:43:244      DevCmn.cpp(01563)] :fnEMV_GetVal(120):return(Data Length = [14] )
[11/07 14:05:43:245      DevCmn.cpp(01563)] :fnEMV_GetVal(27):return(Data Length = [4] )
[11/07 14:05:43:246      DevCmn.cpp(01563)] :fnEMV_GetVal(38):return(Data Length = [14] )
[11/07 14:05:43:247      DevCmn.cpp(01563)] :fnEMV_GetVal(51):return(Data Length = [16] )
[11/07 14:05:43:248      DevCmn.cpp(01563)] :fnEMV_GetVal(125):return(Data Length = [2] )
[11/07 14:05:43:248      DevCmn.cpp(01563)] :fnEMV_GetVal(33):return(Data Length = [28] )
[11/07 14:05:43:249      DevCmn.cpp(01563)] :fnEMV_GetVal(101):return(Data Length = [4] )
[11/07 14:05:43:250      DevCmn.cpp(01563)] :fnEMV_GetVal(75):return(Data Length = [4] )
[11/07 14:05:43:250      DevCmn.cpp(01563)] :fnEMV_GetVal(53):return(Data Length = [10] )
[11/07 14:05:43:251      DevCmn.cpp(01856)] :fnEMV_MakeEMVTagData(TRANSACTION):return.. DATA LENGTH= [436]
[11/07 14:05:43:366 TranLibProc.cpp(00427)] :fnAPL_MakePackCardTrack
[11/07 14:05:43:367 TranLibProc.cpp(00444)] :fnAPL_MakePackCardTrack return
[11/07 14:05:43:409 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:05:43:409 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[20]
[11/07 14:05:43:409 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 14:05:43:410 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(545)
[11/07 14:05:43:410 TranHostProc.cp(00254)] :SendLength(545), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:05:43:411 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:05:43:429      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||ON||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:05:43:435 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:05:43:436     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:05:43:437     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:05:43:437  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:05:43:438       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:05:43:438    CESocket.cpp(00116)] :Create() start

[11/07 14:05:43:438    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:05:43:438    CESocket.cpp(00220)] :Connect() start - socket:1192 address: 192.168.198.199 port: 45000
[11/07 14:05:43:441    CESocket.cpp(00441)] :Connect() OK
[11/07 14:05:43:441    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:05:43:441  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:05:43:441  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:05:43:441  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 85, protocol : STANDARD1
[11/07 14:05:43:442  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:05:43:442    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:05:45:045    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:05:45:045    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:05:45:045       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:05:45:053  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:05:45:053    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:05:45:053       TCPIP.cpp(00091)] :LineSendData
[11/07 14:05:45:053    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:05:45:053    CESocket.cpp(00520)] :Send() end - total sendLen: 548
[11/07 14:05:45:053  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:548]

[11/07 14:05:45:207    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:05:45:207    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:05:45:207       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:05:45:269  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:05:45:269    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:05:45:409    CESocket.cpp(00755)] :receive Data(thread): [len:173]
[11/07 14:05:45:409    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 173
[11/07 14:05:45:410       TCPIP.cpp(00123)] :receive Data(put_data): [len: 173]
[11/07 14:05:45:484  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:05:45:484    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:05:45:484  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[76]

[11/07 14:05:45:484    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:05:45:484       TCPIP.cpp(00091)] :LineSendData
[11/07 14:05:45:484    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:05:45:485    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:05:45:607    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:05:45:607    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:05:45:607       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:05:45:700  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:05:45:700    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:05:45:700       TCPIP.cpp(00091)] :LineSendData
[11/07 14:05:45:700    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:05:45:700    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:05:45:723       TCPIP.cpp(00082)] :line close start
[11/07 14:05:45:723    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:05:45:723    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:05:45:723    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:05:45:723     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:05:45:723    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:05:45:723    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:05:45:723      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:05:45:724   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:05:45:724   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:05:45:724      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:05:45:725 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:05:45:725 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:05:45:725 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:05:45:725  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    8500020011062017152259123456785183125597901106201706000000075000000035500ud910AC5DE4103BDF07F8400128A023030710F860D84240000081CF5D79BD7AD1B4A][LEN:170]

[11/07 14:05:45:725     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:05:45:725      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:05:45:726 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[170])
[11/07 14:05:45:726      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:05:45:726   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:05:45:726   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:05:45:726      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:05:45:727 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:05:45:727 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:05:45:727 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:05:45:727 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[85]
[11/07 14:05:45:727 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[0002]
[11/07 14:05:45:727 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[00]
[11/07 14:05:45:728 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11062017152259123456785183]
[11/07 14:05:45:728 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[1255979011062017]
[11/07 14:05:45:728 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[06000]
[11/07 14:05:45:728 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[00007500]
[11/07 14:05:45:728 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[00000355]
[11/07 14:05:45:728 TranHostProc.cp(03862)] :m_strArrRecvData[10]=[]
[11/07 14:05:45:729 TranHostProc.cp(03862)] :m_strArrRecvData[11]=[00]
[11/07 14:05:45:729 TranHostProc.cp(03862)] :m_strArrRecvData[12]=[ud910AC5DE4103BDF07F8400128A023030710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:45:729 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[13]
[11/07 14:05:45:759 TranHostProc.cp(04284)] :TranRespMsg.ResponseCode_2=[00]
[11/07 14:05:46:058 TranHostProc.cp(04327)] :TranRespMsg.AccountBalance_V=[06000]
[11/07 14:05:46:058 TranHostProc.cp(04336)] :TranRespMsg.AvailableBalance_V=[00007500]
[11/07 14:05:46:058 TranHostProc.cp(04347)] :TranRespMsg.SurchargeAmount_V=[00000355]
[11/07 14:05:46:058 TranHostProc.cp(04351)] :m_strArrRecvData.GetSize(2)=[13],Cnt=[10]
[11/07 14:05:46:058 TranHostProc.cp(04359)] :m_strArrRecvData.GetSize(3)=[13],Cnt=[11]
[11/07 14:05:46:059 TranHostProc.cp(04369)] :m_strArrRecvData.GetSize(4)=[13],Cnt=[12]
[11/07 14:05:46:059 TranHostProc.cp(03557)] :ud = [910AC5DE4103BDF07F8400128A023030710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:059 TranHostProc.cp(03563)] :EMV Tag (ud) Value = [910AC5DE4103BDF07F8400128A023030710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:059 TranHostProc.cp(04388)] :m_strArrRecvData.GetSize(5)=[13],Cnt=[12]
[11/07 14:05:46:059 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:05:46:059 TranReversalPro(00498)] :fnAPP_TramReversalFlagON() : REVERSAL FLAG >> ON
[11/07 14:05:46:099 TranHostProc.cp(02841)] :TranRespMsg.ResponseCode_2=[00]
[11/07 14:05:46:124 TranHostProc.cp(02847)] :TranRespMsg.RetrievalRefNo_12=[123456785183]
[11/07 14:05:46:132 TranHostProc.cp(02852)] :TranReqMsg.TransactionAmount_V=[2000]
[11/07 14:05:46:172 TranLibProc.cpp(00427)] :fnAPL_MakePackCardTrack
[11/07 14:05:46:173 TranLibProc.cpp(00444)] :fnAPL_MakePackCardTrack return
[11/07 14:05:46:199 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:05:46:199 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:05:46:199      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:05:46:472      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:05:46:501 TranOutputProc.(03012)] :fnAPP_SumProc::InputID=[0], iCount=[000001], iMoney=[00000000002000]
[11/07 14:05:46:502 TranOutputProc.(03024)] :IniGetInt(_ATMINFO_PATH, _APPFLD_DISPENSE, _APPKEY_DISPENSE_CST1)=[0]
[11/07 14:05:46:502 TranOutputProc.(03025)] :IniGetInt(_ATMINFO_PATH, _APPFLD_DISPENSE, _APPKEY_DISPENSE_CST2)=[0]
[11/07 14:05:46:894     TranCmn.cpp(01801)] :fnApp_Perform2ndGenAC(bBalance=[0])
[11/07 14:05:46:894 TranLibProc.cpp(00956)] :fnAPL_EmvOnlineApproval(nOnlineMode(1), nHostResponse(1), EMV Tag = [910AC5DE4103BDF07F8400128A023030710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:894 TranLibProc.cpp(00975)] :sTagName=[91], Length=[10], Remain=[C5DE4103BDF07F8400128A023030710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:894 TranLibProc.cpp(00984)] :Parsing EMV Host Tag : sTag8A = [], sTag91 = [C5DE4103BDF07F840012], sTag71 = [], sTag72 = []
[11/07 14:05:46:895 TranLibProc.cpp(00993)] :Remain EMV Tag = [8A023030710F860D84240000081CF5D79BD7AD1B4A], bDataLeft=[1]
[11/07 14:05:46:895 TranLibProc.cpp(00975)] :sTagName=[8A], Length=[2], Remain=[3030710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:895 TranLibProc.cpp(00984)] :Parsing EMV Host Tag : sTag8A = [3030], sTag91 = [C5DE4103BDF07F840012], sTag71 = [], sTag72 = []
[11/07 14:05:46:895 TranLibProc.cpp(00993)] :Remain EMV Tag = [710F860D84240000081CF5D79BD7AD1B4A], bDataLeft=[1]
[11/07 14:05:46:895 TranLibProc.cpp(00975)] :sTagName=[71], Length=[15], Remain=[860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:895 TranLibProc.cpp(00984)] :Parsing EMV Host Tag : sTag8A = [3030], sTag91 = [C5DE4103BDF07F840012], sTag71 = [710F860D84240000081CF5D79BD7AD1B4A], sTag72 = []
[11/07 14:05:46:896 TranLibProc.cpp(00993)] :Remain EMV Tag = [860D84240000081CF5D79BD7AD1B4A], bDataLeft=[0]
[11/07 14:05:46:896 TranLibProc.cpp(00997)] :EMV Host Tag : sTag8A = [3030], sTag91 = [C5DE4103BDF07F840012], sTag71 = [710F860D84240000081CF5D79BD7AD1B4A], sTag72 = []
[11/07 14:05:46:897 TranLibProc.cpp(01014)] :EMV Host Tag : sTag7172 = [710F860D84240000081CF5D79BD7AD1B4A]
[11/07 14:05:46:897      DevCmn.cpp(01863)] :fnEMV_OnlineApproval(HostRes:1, OnlineMode:1, EMV_8A:3030, 20, C5DE4103BDF07F840012, 34, 710F860D84240000081CF5D79BD7AD1B4A)
[11/07 14:05:46:897      DevCmn.cpp(01901)] :New TAG for Retail : [113030]
[11/07 14:05:47:637      DevCmn.cpp(01907)] :fnEMV_OnlineApproval(.) => EMV_OnlineApproval2(....)  return(1)
[11/07 14:05:47:637 TranLibProc.cpp(01028)] :m_pDevCmn->fnEMV_OnlineApproval(1, 1, 3030, C5DE4103BDF07F840012, 710F860D84240000081CF5D79BD7AD1B4A) : return=[1]
[11/07 14:05:47:637      DevCmn.cpp(01613)] :fnEMV_CompleteProcess()
[11/07 14:05:47:638      DevCmn.cpp(01618)] :fnEMV_CompleteProcess():return(7)
[11/07 14:05:47:638 TranLibProc.cpp(01043)] :fnEMV_CompleteProcess() : return=[7]
[11/07 14:05:47:638 TranLibProc.cpp(01057)] :fnAPL_EmvOnlineApproval() return : SUCCESS
[11/07 14:05:47:639     TranCmn.cpp(01811)] :fnAPL_EmvOnlineApproval() successful
[11/07 14:05:47:639 TranLibProc.cpp(01063)] :fnAPL_EmvRemoveICCard(nFailReason=[0], bFallBackTr=[0])
[11/07 14:05:47:639      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(2)
[11/07 14:05:47:639 TranLibProc.cpp(01067)] :fnAPL_EmvRemoveICCard::m_pDevCmn->fnMCU_GetMaterialInfo():nSensor[2]
[11/07 14:05:47:640 TranLibProc.cpp(01111)] :Remove Card - Display Message = [APPROVED]
[11/07 14:05:47:640 TranLibProc.cpp(01125)] :fnAPL_EmvRemoveICCard Start, Time Out= [120 seconds]
[11/07 14:05:47:640      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:05:47:643   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [APPROVED])
[11/07 14:05:47:643   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/APPROVED]
[11/07 14:05:47:644      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:47:645      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:05:47:645      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:05:47:645   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:47:645   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:47:646   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD027.swf])
[11/07 14:05:47:646   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD027.swf]
[11/07 14:05:47:646      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:47:647      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:05:47:647       Sound.cpp(00148)] :Stop
[11/07 14:05:47:647       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:47:647      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:47:647      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:47:648      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:47:648      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:47:648   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:47:649   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:47:649      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:47:650      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:47:650      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0]):return(0)
[11/07 14:05:47:650 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:05:47:662      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:05:47:662      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:05:47:663   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:47:663   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:47:678      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 14:05:47:678      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 14:05:47:681      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 14:05:47:721      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:05:47:724 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:05:48:202      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(1)
[11/07 14:05:48:888      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(0)
[11/07 14:05:48:888 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:05:48:900      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:05:48:900   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:48:901   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:48:913      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:05:48:913      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:05:48:914      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:05:48:925      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:05:48:928 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:05:48:928      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(3)
[11/07 14:05:48:929      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(3), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:05:48:929       Sound.cpp(00148)] :Stop
[11/07 14:05:48:929       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:48:929      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:05:48:932 TranLibProc.cpp(01220)] :Exit Waiting loop... Sensor Status = [0]
[11/07 14:05:48:933 TranLibProc.cpp(01224)] :fnAPL_EmvRemoveICCard return TRUE
[11/07 14:05:48:933     TranCmn.cpp(01817)] : CARD REMOVED, Return OK
[11/07 14:05:48:933     TranCmn.cpp(01865)] :fnApp_DispenseCash()
[11/07 14:05:48:933 TranReversalPro(00498)] :fnAPP_TramReversalFlagON() : REVERSAL FLAG >> ON
[11/07 14:05:48:982 TranDevProc.cpp(02337)] :fnAPD_MoneyCountInitialize()
[11/07 14:05:48:983 TranDevProc.cpp(02354)] :fnAPD_MoneyCountInitialize():return
[11/07 14:05:48:983 TranDevProc.cpp(02409)] :fnAPD_MoneyCount(WaitFlag[0])
[11/07 14:05:48:983 TranDevProc.cpp(02425)] :fnAPD_MoneyCount:CashMoney[20], CashRemain20[0], CashRemain10[0],
[11/07 14:05:48:984   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [off])
[11/07 14:05:48:984   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/off]
[11/07 14:05:48:985      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[205], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:48:985      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD205.swf)
[11/07 14:05:48:985      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD205.swf)
[11/07 14:05:48:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:48:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:48:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD205.swf])
[11/07 14:05:48:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD205.swf]
[11/07 14:05:48:987      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:48:987      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(205)
[11/07 14:05:48:987       Sound.cpp(00148)] :Stop
[11/07 14:05:48:987       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:48:988      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:48:988      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:48:988      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:48:988      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:48:989   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:48:989   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:48:990      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:48:990      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:48:990      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[205], nInputSec[0]):return(0)
[11/07 14:05:48:991 TranDevProc.cpp(02483)] :fnCSH_GetAvailWithdraw=[32]
[11/07 14:05:48:991 TranDevProc.cpp(02484)] :m_pDevCmn->WithAvail=[32]
[11/07 14:05:48:991 TranDevProc.cpp(02485)] :WithAvail=[32]
[11/07 14:05:48:992      DevApl.cpp(01849)] :[PROCESS COUNT] : 6
[11/07 14:05:49:667      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[60000000])
[11/07 14:05:49:692      DevCsh.cpp(01673)] :fnCSH_Dispense(nCashAmt[20] AtmDefine.CashHandler[2])
[11/07 14:05:49:694      DevCmn.cpp(03909)] :fnCDU_DispenseAndPresent(nCashAmt[20]AtmDefine.MachineKind:[9])
[11/07 14:05:49:847      DevCmn.cpp(03919)] :fnCDU_DispenseAndPresent(...):return(0)
[11/07 14:05:49:848 TranDevProc.cpp(02549)] :fnAPD_MoneyCount(...):return
[11/07 14:05:49:848 TranDevProc.cpp(02558)] :fnAPD_MoneyCountCheck()
[11/07 14:05:56:308      DevCsh.cpp(01378)] :fstrCSH_GetLastDispensedAmount()::strReturn=[2000]
[11/07 14:05:56:308 TranDevProc.cpp(00056)] :Success::m_pDevCmn->fstrCSH_GetLastDispensedAmount()=[$2000]
[11/07 14:05:56:308 TranDevProc.cpp(00074)] :nRequestedAmount=[2000], nDispensedAmount=[2000]
[11/07 14:05:56:386      DevCsh.cpp(01378)] :fstrCSH_GetLastDispensedAmount()::strReturn=[2000]
[11/07 14:05:56:386 TranDevProc.cpp(02572)] :Success::m_pDevCmn->fstrCSH_GetLastDispensedAmount()=[$2000]
[11/07 14:05:56:386 TranDevProc.cpp(02585)] :CashFstCSTDispCnt=[1]
[11/07 14:05:56:386 TranDevProc.cpp(02586)] :CashSndCSTDispCnt=[0]
[11/07 14:05:56:386 TranDevProc.cpp(02587)] :CashTrdCSTDispCnt=[0]
[11/07 14:05:56:386 TranDevProc.cpp(02588)] :CashFthCSTDispCnt=[0]
[11/07 14:05:56:996 TranDevProc.cpp(02625)] :fnAPD_MoneyCountCheck():return
[11/07 14:05:57:011 TranDevProc.cpp(02632)] :fnAPD_MoneyOutCheck(ScrNum[0], CheckTime[30])
[11/07 14:05:57:011 TranDevProc.cpp(02642)] :fnAPD_MoneyOutCheck(...):return
[11/07 14:05:57:011      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[1])
[11/07 14:05:57:042 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(3)
[11/07 14:05:57:042 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:05:57:042      DevApl.cpp(01849)] :[PROCESS COUNT] : 6
[11/07 14:05:57:472      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[60000000])
[11/07 14:05:57:488      DevCsh.cpp(01378)] :fstrCSH_GetLastDispensedAmount()::strReturn=[2000]
[11/07 14:05:57:488     TranCmn.cpp(01901)] :nRequestedAmount=[2000]
[11/07 14:05:57:488     TranCmn.cpp(01902)] :nDispensedAmount=[2000]
[11/07 14:05:57:488     TranCmn.cpp(01905)] :Dispensed Full Amount
[11/07 14:05:57:488 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 14:05:57:558     TranCmn.cpp(01933)] :fnApp_DispenseCash() return [1]
[11/07 14:05:57:558 TranOutputProc.(03012)] :fnAPP_SumProc::InputID=[5], iCount=[000001], iMoney=[00000000002000]
[11/07 14:05:57:558 TranOutputProc.(03231)] :(Surcharge)iMoney=[00000000000355]
[11/07 14:05:57:910 TranOutputProc.(03012)] :fnAPP_SumProc::InputID=[1], iCount=[000001], iMoney=[00000000002000]
[11/07 14:05:57:910 TranOutputProc.(03079)] :nRequestedAmount=[$2000]
[11/07 14:05:57:910 TranOutputProc.(03080)] :nDispensedAmount=[$2000]
[11/07 14:05:57:910 TranOutputProc.(03095)] :iMoney=[00000000002000]
[11/07 14:05:57:910 TranOutputProc.(03128)] :m_pDevCmn->CSTCnt=[2]
[11/07 14:05:57:910 TranOutputProc.(03129)] :CashFstCSTDispCnt=[1], m_pDevCmn->fnCSH_GetNumberOfDispenseCash(CDU_CST_1)=[0]
[11/07 14:05:57:910 TranOutputProc.(03130)] :CashSndCSTDispCnt=[0], m_pDevCmn->fnCSH_GetNumberOfDispenseCash(CDU_CST_2)=[0]
[11/07 14:05:57:910 TranOutputProc.(03142)] :fnCSH_SetNumberOfDispenseCash::strDispCntData=[0,1,0]
[11/07 14:05:57:910      DevCsh.cpp(00209)] :CSTCnt=[2], strDispCntData=[0,1,0]
[11/07 14:05:57:910      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(1999)
[11/07 14:05:58:269 TranOutputProc.(00107)] :print device is 2
[11/07 14:05:58:285     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[2000]
[11/07 14:05:58:285     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[20.00]
[11/07 14:05:58:285     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[2000]
[11/07 14:05:58:285     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[20.00]
[11/07 14:05:58:285     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:05:58:285     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:05:58:285     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[2355]
[11/07 14:05:58:285     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[23.55]
[11/07 14:05:58:292     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[06000]
[11/07 14:05:58:292     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[60.00]
[11/07 14:05:58:292     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00007500]
[11/07 14:05:58:292     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[75.00]
[11/07 14:05:58:292 TranDevProc.cpp(02948)] :fnAPD_MoneyCountPrint(WaitFlag[0])
[11/07 14:05:58:292 TranOutputProc.(00535)] :m_pDevCmn->TranStatus [20], m_pDevCmn->strKindCode [TA]
[11/07 14:05:58:292 TranOutputProc.(00536)] :_REGNAME_APP_TRANSOTHERMSG=[                                                                             ]
[11/07 14:05:58:292     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(1)
[11/07 14:05:58:292     TranCmn.cpp(01270)] :Cash Withdrawal Journal, Other Message = [~L01 00 00 00]
[11/07 14:05:58:292     TranCmn.cpp(01326)] :m_strMDBJnlData[       9030    ^0002^CW^CA^--^3337^000000000000^11062017^152259^00007500^123456785183^125597^90^11062017^00000355^    2000^    2000^            ^ 6^ TRUE^       ^XXXXXXXXXXXX0000^0000^000000000000^~L01 00 00 00                                                                ]
[11/07 14:05:58:292     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:05:58:292 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[2], WaitFlag[0], ToJournal[70320200])
[11/07 14:05:58:300 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:05:58:300 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:05:58:300      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:05:58:332      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0042]
[11/07 14:05:58:332      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[TA]
[11/07 14:05:58:332      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[TA]
[11/07 14:05:58:332       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:05:58:332       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:05:58:332       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:05:58:332       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0042']
[11/07 14:05:58:386       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:05:58:386       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:05:58:386       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:05:58:386       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:05:58:386       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:05:58:386       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:05:58:386       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:05:58:386       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:05:58:386       DevDB.cpp(01106)] :pEJnl->Data [       9030    ^0002^CW^CA^--^3337^000000000000^11062017^152259^00007500^123456785183^125597^90^11062017^00000355^    2000^    2000^            ^ 6^ TRUE^       ^XXXXXXXXXXXX0000^0000^000000000000^~L01 00 00 00                                                                <START_EJRNL>[ 11/07/2017 14:05:58 EJ NUMBER = 0042 ] | TERMINAL     # = 9030| SEQUENCE     # = 0002| AUTHORIZED   # = 125597 90| DATE & TIME    = 11/06/2017 15:22:59| BUSINESS DATE  = 11/06/2017| CARD NUMBER    = ***************3337| VISA CREDIT    = A0000000031010| TRANSACTION    = WITHDRAWAL| ACCOUNT        = CHECKING| ______________________________________| DISPENSED AMOUNT  = $20.00| REQUESTED AMOUNT  = $20.00| TERMINAL FEE      = $3.55| TOTAL AMOUNT      = $23.55| LEDGER BALANCE    = $60.00| AVAILABLE BALANCE = $75.00| TERMINAL FEE PAID TO :| Citibank| ARPC           = C5DE4103BDF07F840012| SERVICE CODE   = 0201| TVR            = 8040048000| IAC            = 0010000000|   SEQ.#: 0002  JNL#:0042| REQ:$20.00 DSP:$20.00 DIF:$0.00| REJ:0,0 DIS:1,0<END_EJRNL>]
[11/07 14:05:58:386       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('1044','TA','0042','11','07','2017','14','05','58','       9030    ^0002^CW^CA^--^3337^000000000000^11062017^152259^00007500^123456785183^125597^90^11062017^00000355^    2000^    2000^            ^ 6^ TRUE^       ^XXXXXXXXXXXX0000^0000^000000000000^~L01 00 00 00                                                                <START_EJRNL>[ 11/07/2017 14:05:58 EJ NUMBER = 0042 ] | TERMINAL     # = 9030| SEQUENCE     # = 0002| AUTHORIZED   # = 125597 90| DATE & TIME    = 11/06/2017 15:22:59| BUSINESS DATE  = 11/06/2017| CARD NUMBER    = ***************3337| VISA CREDIT    = A0000000031010| TRANSACTION    = WITHDRAWAL| ACCOUNT        = CHECKING| ______________________________________| DISPENSED AMOUNT  = $20.00| REQUESTED AMOUNT  = $20.00| TERMINAL FEE      = $3.55| TOTAL AMOUNT      = $23.55| LEDGER BALANCE    = $60.00| AVAILABLE BALANCE = $75.00| TERMINAL FEE PAID TO :| Citibank| ARPC           = C5DE4103BDF07F840012| SERVICE CODE   = 0201| TVR            = 8040048000| IAC            = 0010000000|   SEQ.#: 0002  JNL#:0042| REQ:$20.00 DSP:$20.00 DIF:$0.00| REJ:0,0 DIS:1,0<END_EJRNL>')]
[11/07 14:05:58:441       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:05:58:441       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:05:58:441       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:05:58:441       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:05:58:441       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:05:58:441       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:05:58:441       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:05:58:441       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[42]
[11/07 14:05:58:441       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [42]
[11/07 14:05:58:441       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[41], m_bRecordCountFinal=[1]
[11/07 14:05:58:488       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [42]
[11/07 14:05:58:488      DevApl.cpp(06310)] :TempEjrMdb.Data=[       9030    ^0002^CW^CA^--^3337^000000000000^11062017^152259^00007500^123456785183^125597^90^11062017^00000355^    2000^    2000^            ^ 6^ TRUE^       ^XXXXXXXXXXXX0000^0000^000000000000^~L01 00 00 00                                                                <START_EJRNL>[ 11/07/2017 14:05:58 EJ NUMBER = 0042 ] | TERMINAL     # = 9030| SEQUENCE     # = 0002| AUTHORIZED   # = 125597 90| DATE & TIME    = 11/06/2017 15:22:59| BUSINESS DATE  = 11/06/2017| CARD NUMBER    = ***************3337| VISA CREDIT    = A0000000031010| TRANSACTION    = WITHDRAWAL| ACCOUNT        = CHECKING| ______________________________________| DISPENSED AMOUNT  = $20.00| REQUESTED AMOUNT  = $20.00| TERMINAL FEE      = $3.55| TOTAL AMOUNT      = $23.55| LEDGER BALANCE    = $60.00| AVAILABLE BALANCE = $75.00| TERMINAL FEE PAID TO :| Citibank| ARPC           = C5DE4103BDF07F840012| SERVICE CODE   = 0201| TVR            = 8040048000| IAC            = 0010000000|   SEQ.#: 0002  JNL#:0042| REQ:$20.00 DSP:$20.00 DIF:$0.00| REJ:0,0 DIS:1,0<END_EJRNL>]
[11/07 14:05:58:488      DevApl.cpp(06316)] :strTempArray0=[       9030    ^0002^CW^CA^--^3337^000000000000^11062017^152259^00007500^123456785183^125597^90^11062017^00000355^    2000^    2000^            ^ 6^ TRUE^       ^XXXXXXXXXXXX0000^0000^000000000000^~L01 00 00 00                                                                ] / strTempArray1=[[ 11/07/2017 14:05:58 EJ NUMBER = 0042 ] | TERMINAL     # = 9030| SEQUENCE     # = 0002| AUTHORIZED   # = 125597 90| DATE & TIME    = 11/06/2017 15:22:59| BUSINESS DATE  = 11/06/2017| CARD NUMBER    = ***************3337| VISA CREDIT    = A0000000031010| TRANSACTION    = WITHDRAWAL| ACCOUNT        = CHECKING| ______________________________________| DISPENSED AMOUNT  = $20.00| REQUESTED AMOUNT  = $20.00| TERMINAL FEE      = $3.55| TOTAL AMOUNT      = $23.55| LEDGER BALANCE    = $60.00| AVAILABLE BALANCE = $75.00| TERMINAL FEE PAID TO :| Citibank| ARPC           = C5DE4103BDF07F840012| SERVICE CODE   = 0201| TVR            = 8040048000| IAC            = 0010000000|   SEQ.#: 0002  JNL#:0042| REQ:$20.00 DSP:$20.00 DIF:$0.00| REJ:0,0 DIS:1,0<END_EJRNL>]
[11/07 14:05:58:488      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:05:58:488 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:05:58:488 TranOutputProc.(02083)] :fnAPP_PrintReceipt(sTranType=[Withdrawal], bTrOK=[1])
[11/07 14:05:58:488 TranOutputProc.(02103)] :fnAPP_PrintReceipt, Accept.SlipSelectFlag=[TRUE]
[11/07 14:05:58:488 TranDevProc.cpp(01676)] :fnAPD_SlipImagePrintProc(WaitFlag[0])
[11/07 14:05:58:488      DevApl.cpp(05943)] :fnAPL_ShuSlipImagePrint()
[11/07 14:05:58:527      DevApl.cpp(05946)] :fnAPL_ShuSlipImagePrint() : TranProc [0]
[11/07 14:05:58:527      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:, Form:
[11/07 14:05:58:527      DevApl.cpp(05955)] :fnAPL_ShuSlipImagePrint() Return
[11/07 14:05:58:527 TranDevProc.cpp(01687)] :fnAPD_SlipImagePrintProc(...):return
[11/07 14:05:58:527 TranOutputProc.(00107)] :print device is 1
[11/07 14:05:58:652 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[0], ToJournal[70320200])
[11/07 14:05:58:652      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[8], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:05:58:660      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD008.swf)
[11/07 14:05:58:660      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD008.swf)
[11/07 14:05:58:660   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:05:58:660   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:05:58:660   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD008.swf])
[11/07 14:05:58:660   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD008.swf]
[11/07 14:05:58:660      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:05:58:660      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(8)
[11/07 14:05:58:660       Sound.cpp(00148)] :Stop
[11/07 14:05:58:660       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:05:58:660      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:05:58:660      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:05:58:660      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:05:58:660      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:05:58:660   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:05:58:660   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:05:58:660      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:05:58:660      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:05:58:660      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[8], nInputSec[0]):return(0)
[11/07 14:05:58:660 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:05:58:660 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:05:58:660      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:05:58:660      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:05:58:660      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:05:58:660      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:06:00:128      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:06:00:128      DevCmn.cpp(00778)] :TranStatus=(20), strData=(20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20)
[11/07 14:06:00:128      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:06:00:128      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:06:00:128 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:06:00:136     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[2000]
[11/07 14:06:00:136     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[20.00]
[11/07 14:06:00:136     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[2000]
[11/07 14:06:00:136     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[20.00]
[11/07 14:06:00:136     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:06:00:136     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:06:00:136     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[2355]
[11/07 14:06:00:136     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[23.55]
[11/07 14:06:00:136     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[06000]
[11/07 14:06:00:136     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[60.00]
[11/07 14:06:00:136     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00007500]
[11/07 14:06:00:136     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[75.00]
[11/07 14:06:00:160 TranLibProc.cpp(00169)] :PrtData=[],MaxColumn=[40]
[11/07 14:06:00:160 TranLibProc.cpp(00175)] :PrtData.GetLength()=[0]
[11/07 14:06:00:160 TranLibProc.cpp(00182)] :nIndex=[20]
[11/07 14:06:00:160 TranLibProc.cpp(00188)] :PrtData=[]
[11/07 14:06:00:160 TranDevProc.cpp(01694)] :fnAPD_ShuPrint(PrintDevice[1], WaitFlag[0], ToJournal[70320200])
[11/07 14:06:00:160 TranDevProc.cpp(01647)] :fnAPD_EjrIndexSet()
[11/07 14:06:00:160 TranDevProc.cpp(01669)] :fnAPD_EjrIndexSet():return
[11/07 14:06:00:160      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:06:00:160      DevApl.cpp(06119)] :fnAPL_GetAvailDevice(DEV_SPR)=[1]
[11/07 14:06:00:160      DevApl.cpp(06120)] :fnAPL_GetDownErrorDevice(DEV_SPR)=[0]
[11/07 14:06:00:160      DevApl.cpp(06121)] :SlipHeadStatus=[0], SlipStatus=[0]
[11/07 14:06:00:222      DevCmn.cpp(00716)] :CDevCmn::fnSPR_Print() - Media:(null), Form:(null)
[11/07 14:06:00:222      DevCmn.cpp(00778)] :TranStatus=(20), strData
[11/07 14:06:00:222      DevCmn.cpp(00808)] :CDevCmn::fnSPR_Print():return(0)
[11/07 14:06:00:222      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:06:00:222 TranDevProc.cpp(01788)] :fnAPD_ShuPrint(...):return
[11/07 14:06:00:222 TranOutputProc.(07886)] :fnAPP_CouponPrintProc : PrintDevice[1], WaitFlag[0]
[11/07 14:06:00:222 TranOutputProc.(08122)] :fnAPP_CouponPrintProc : return()
[11/07 14:06:00:222 TranDevProc.cpp(01859)] :fnAPD_MaterialOut(Device[5], CheckTime[30], WaitFlag[0])
[11/07 14:06:00:222 TranDevProc.cpp(01875)] :fnAPD_MaterialOut:ActDevice[5]
[11/07 14:06:00:222 TranDevProc.cpp(01907)] :fnAPD_MaterialOut:ActDevice[5], TranProc[1], CashCountFlag[1], CashInOpenFlag[0],
[11/07 14:06:05:535      DevCmn.cpp(00653)] :fnSPR_GetMaterialInfo():return(2)
[11/07 14:06:05:535      DevCmn.cpp(00821)] :fnSPR_Eject(nWaitSec[30])
[11/07 14:06:05:535      DevCmn.cpp(00830)] :fnSPR_Eject(...):return(0)
[11/07 14:06:05:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[1])
[11/07 14:06:05:535 TranDevProc.cpp(01998)] :fnAPD_MaterialOut:MaterialOutFlag[1],m_pDevCmn->TranStatus=[20]
[11/07 14:06:05:535      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[107], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:05:535      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD107.swf)
[11/07 14:06:05:535      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD107.swf)
[11/07 14:06:05:535   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:05:535   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:05:535   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD107.swf])
[11/07 14:06:05:535   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD107.swf]
[11/07 14:06:05:535      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:05:535      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(107)
[11/07 14:06:05:535       Sound.cpp(00148)] :Stop
[11/07 14:06:05:535       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:05:535      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:05:535      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:05:535      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:05:535      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:05:535   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:05:535   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:05:535      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:05:535      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:05:535      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[107], nInputSec[0]):return(0)
[11/07 14:06:05:535 TranDevProc.cpp(02022)] :fnAPD_MaterialOut(...):return
[11/07 14:06:05:535 TranOutputProc.(02132)] :fnAPP_PrintReceipt() SlipSelectFlag[1], TranResult[1]
[11/07 14:06:05:535 TranDevProc.cpp(02029)] :fnAPD_MaterialOutCheckRetract(Device[5], WaitFlag[1])
[11/07 14:06:05:535 TranDevProc.cpp(02058)] :fnAPD_MaterialOutCheckRetract:ActDevice[5]
[11/07 14:06:05:535 TranDevProc.cpp(02066)] :fnAPD_MaterialOutCheckRetract:ActDevice[1], MaterialOutFlag[1]
[11/07 14:06:08:722      DevCmn.cpp(00837)] :fnSPR_WaitTaken()
[11/07 14:06:08:722      DevCmn.cpp(00846)] :fnSPR_WaitTaken():return(0)
[11/07 14:06:08:753 TranDevProc.cpp(02088)] :fnAPD_MaterialOutCheckRetract:m_pDevCmn->DeviceTimeout[0]
[11/07 14:06:08:753 TranDevProc.cpp(02107)] :fnAPD_MaterialOutCheckRetract:ActDevice[0], MaterialOutCheckFlag[1], RetractDevice[5], DevEnDisable[0]
[11/07 14:06:08:753      DevCmn.cpp(00653)] :fnSPR_GetMaterialInfo():return(0)
[11/07 14:06:08:753      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:08:785 TranDevProc.cpp(02200)] :fnAPD_MaterialOutCheckRetract:ActDevice[0], MaterialOutCheckFlag[1], RetractDevice[5], DevEnDisable[0]
[11/07 14:06:08:785 TranDevProc.cpp(02245)] :fnAPD_MaterialOutCheckRetract(...):return
[11/07 14:06:08:785 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(4)
[11/07 14:06:08:785 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:06:08:785 TranOutputProc.(02151)] :fnAPP_PrintReceipt():return
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:08:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:08:800      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:08:800      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:08:800      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:08:800 TranMenuProc.cp(01249)] :fnAPP_TranWithdrawalProc() return T_EXIT
[11/07 14:06:08:800 TranTermProc.cp(01129)] :fnAPP_ThankYou(ShowThankyou=[1])
[11/07 14:06:08:800 TranTermProc.cp(01139)] :fnAPP_ThankYou()
[11/07 14:06:08:816     TranCmn.cpp(01617)] :fnstr_GetVoiceGuianceText... Length of script is too short[0], return empty string
[11/07 14:06:08:816      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[15], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:08:816      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD015.swf)
[11/07 14:06:08:816      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD015.swf)
[11/07 14:06:08:816   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:08:816   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:08:816   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD015.swf])
[11/07 14:06:08:816   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD015.swf]
[11/07 14:06:08:816      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:08:816      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(15)
[11/07 14:06:08:816       Sound.cpp(00148)] :Stop
[11/07 14:06:08:816       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:08:816      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:08:832      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:08:832      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:08:832      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:08:832   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:08:832   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:08:832      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:08:832      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:08:832      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[15], nInputSec[0]):return(0)
[11/07 14:06:12:738 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 14:06:12:738 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 14:06:12:738 TranTermProc.cp(01149)] :fnAPP_ThankYou() return
[11/07 14:06:12:738 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(5)
[11/07 14:06:12:738 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:06:12:738 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:06:12:738 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:06:12:738 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:06:12:738 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 14:06:12:738 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 14:06:12:738 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:06:12:785 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:06:12:785 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:06:13:035   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:06:13:035   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:06:13:035      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:06:13:035 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 14:06:13:035 TranReversalPro(00067)] :fnAPP_TranReversalProc()
[11/07 14:06:13:035 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 14:06:13:035 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:13:035 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:13:035 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:13:035 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:13:082      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:13:253 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:06:13:253 AtmModeCtrl.cpp(01282)] :GetMemorySize[17563648]
[11/07 14:06:13:253 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:06:13:253      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:06:13:253      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:06:13:253   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:06:13:253   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:06:13:253   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:06:13:253   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:06:13:253 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:06:13:269      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:06:13:269      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:06:13:285      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:06:13:285      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:06:13:285      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:06:13:285      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:06:13:285      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:06:13:285 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:13:285 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:13:285 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:13:285 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:13:535      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:06:13:738      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:13:738      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:06:13:738   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:06:13:738   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:06:13:738 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:06:13:816     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:06:13:832     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:06:13:832     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:06:13:832     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:06:13:832     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:06:13:832     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:13:925     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:13:957     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:06:13:957     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:06:13:957 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:06:13:957 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:06:13:957      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:06:13:972   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:06:13:972   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:06:13:972   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:06:13:972   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:06:13:972 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:06:13:988      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:06:13:988      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:06:13:988   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:13:988   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:14:003      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:06:14:003      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:06:14:003      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:06:14:066      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:06:14:066 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:06:14:160 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:06:14:160      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:14:160      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:06:14:160      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:06:14:160   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:14:160   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:14:160   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:06:14:160   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:06:14:160      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:14:160      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:06:14:160       Sound.cpp(00148)] :Stop
[11/07 14:06:14:160       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:14:160      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:14:175      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:14:175      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:14:175      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:06:14:175   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:14:175   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:14:175      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:06:14:175      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:06:14:175      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:06:17:691      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(0)
[11/07 14:06:18:722 AtmModeCtrl.cpp(01684)] :Change Mode to Ready by Door status
[11/07 14:06:18:738      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:18:738 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:06:18:753      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:06:18:753   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:18:753   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:18:769      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:06:18:769      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:06:18:769      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:06:18:785      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:18:785 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:06:18:785 TranNmsProc.cpp(00370)] :NmsDoorStatus:(0)
[11/07 14:06:18:785     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:06:18:785     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:06:18:785     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:06:18:785      DevApl.cpp(02548)] :[ERROR CODE] : 0-2000400 DOOR IS OPENED
[11/07 14:06:18:910      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[02000400])
[11/07 14:06:18:957      DevApl.cpp(02521)] :[nCurErrCntSave]=[1]
[11/07 14:06:18:988     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(1)
[11/07 14:06:18:988     TranCmn.cpp(01326)] :m_strMDBJnlData[           9030^0000^--^--^--^0000^000000000000^00000000^000000^        ^000000000000^000000^00^00000000^00000000^00000000^00000000^            ^ 0^     ^2000400^XXXXXXXXXXXX0000^0000^000000000000^                                                                             ]
[11/07 14:06:19:003     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:06:19:003      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:06:19:003      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0043]
[11/07 14:06:19:003      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SC]
[11/07 14:06:19:003      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SC]
[11/07 14:06:19:003       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:06:19:003       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:06:19:003       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:06:19:019       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0043']
[11/07 14:06:19:066       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:06:19:066       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:06:19:066       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:06:19:066       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:06:19:066       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:06:19:066       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:06:19:066       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:06:19:066       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:06:19:066       DevDB.cpp(01106)] :pEJnl->Data [           9030^0000^--^--^--^0000^000000000000^00000000^000000^        ^000000000000^000000^00^00000000^00000000^00000000^00000000^            ^ 0^     ^2000400^XXXXXXXXXXXX0000^0000^000000000000^                                                                             <START_EJRNL>[ 11/07/2017 14:06:19 EJ NUMBER = 0043 ] |14:06:19 [DOOR IS OPENED]<END_EJRNL>]
[11/07 14:06:19:066       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0365','SC','0043','11','07','2017','14','06','19','           9030^0000^--^--^--^0000^000000000000^00000000^000000^        ^000000000000^000000^00^00000000^00000000^00000000^00000000^            ^ 0^     ^2000400^XXXXXXXXXXXX0000^0000^000000000000^                                                                             <START_EJRNL>[ 11/07/2017 14:06:19 EJ NUMBER = 0043 ] |14:06:19 [DOOR IS OPENED]<END_EJRNL>')]
[11/07 14:06:19:113       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:06:19:113       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:06:19:113       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:06:19:113       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:06:19:113       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:06:19:113       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:06:19:113       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:06:19:113       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[43]
[11/07 14:06:19:113       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [43]
[11/07 14:06:19:113       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[42], m_bRecordCountFinal=[1]
[11/07 14:06:19:160       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [43]
[11/07 14:06:19:160      DevApl.cpp(06310)] :TempEjrMdb.Data=[           9030^0000^--^--^--^0000^000000000000^00000000^000000^        ^000000000000^000000^00^00000000^00000000^00000000^00000000^            ^ 0^     ^2000400^XXXXXXXXXXXX0000^0000^000000000000^                                                                             <START_EJRNL>[ 11/07/2017 14:06:19 EJ NUMBER = 0043 ] |14:06:19 [DOOR IS OPENED]<END_EJRNL>]
[11/07 14:06:19:160      DevApl.cpp(06316)] :strTempArray0=[           9030^0000^--^--^--^0000^000000000000^00000000^000000^        ^000000000000^000000^00^00000000^00000000^00000000^00000000^            ^ 0^     ^2000400^XXXXXXXXXXXX0000^0000^000000000000^                                                                             ] / strTempArray1=[[ 11/07/2017 14:06:19 EJ NUMBER = 0043 ] |14:06:19 [DOOR IS OPENED]<END_EJRNL>]
[11/07 14:06:19:160      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:06:19:160 TranNmsProc.cpp(00389)] :11111 RMS Error code:(2000400)
[11/07 14:06:19:191 TranNmsProc.cpp(00406)] :Send Health Check : AtmStatus(ATM_READY      ), AtmStatusSave(ATM_CUSTOM     )
[11/07 14:06:19:191 TranNmsProc.cpp(00407)] :Send Health Check : 3  DOOR OPEN
[11/07 14:06:19:191 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:06:19:253 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:06:19:253 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:06:19:253 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:06:19:253 TranMainProc.cp(01138)] :TranCode:[0]
[11/07 14:06:19:253 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:06:19:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:19:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:19:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:19:269      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:19:269     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:06:19:269     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:06:19:269     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:19:347     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:19:363     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:06:19:363     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:06:19:363 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:06:19:363      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:06:19:597      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[32000400])
[11/07 14:06:19:613 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:06:19:613 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:06:19:613   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:06:19:613   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:06:19:613      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:19:613      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:06:19:613      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:06:19:613   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:19:613   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:19:613   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:06:19:613   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:06:19:613      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:19:613      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:06:19:613       Sound.cpp(00148)] :Stop
[11/07 14:06:19:613       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:19:613      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:19:613      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:19:613      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:19:613      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:19:613   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:19:613   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:19:613      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:19:988      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:19:988      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:06:20:769 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:06:20:769 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:06:20:769 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:06:20:769 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:06:20:769 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:06:20:769 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:06:20:769 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:06:20:769 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:06:20:769 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:06:20:769 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:06:20:769 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:06:20:800 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:06:20:800 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = [2000400]
[11/07 14:06:20:800 TranHostProc.cp(02129)] :strExtraTemp:[2000400],strTemp=[200040020004]
[11/07 14:06:20:800 TranHostProc.cp(02142)] :strReturn:[2000400]
[11/07 14:06:20:800 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[2000400]
[11/07 14:06:20:800 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:06:20:800 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:06:20:800 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 14:06:20:800 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:06:20:800 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:06:20:800 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:06:20:832      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:20:832 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:06:20:832     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:06:20:832     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:06:20:832  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:06:20:832       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:06:20:832    CESocket.cpp(00116)] :Create() start

[11/07 14:06:20:832    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:06:20:832    CESocket.cpp(00220)] :Connect() start - socket:2052 address: 192.168.198.199 port: 45000
[11/07 14:06:20:832    CESocket.cpp(00441)] :Connect() OK
[11/07 14:06:20:847    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:06:20:847  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:06:20:847  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:06:20:847  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:06:20:847  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:06:20:847    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:06:22:457    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:06:22:472    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:06:22:472       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:06:22:566  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:06:22:566    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:22:566       TCPIP.cpp(00091)] :LineSendData
[11/07 14:06:22:566    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:06:22:566    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:06:22:566  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:06:22:722    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:06:22:722    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:06:22:722       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:06:22:878  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:06:22:878    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:22:941    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:06:22:941    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:06:22:941       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:06:23:035  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:06:23:035    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:23:035  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:06:23:035    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:23:035       TCPIP.cpp(00091)] :LineSendData
[11/07 14:06:23:035    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:06:23:035    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:06:23:160    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:06:23:160    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:06:23:160       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:06:23:191  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:06:23:191    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:06:23:191       TCPIP.cpp(00091)] :LineSendData
[11/07 14:06:23:191    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:06:23:191    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:06:23:207       TCPIP.cpp(00082)] :line close start
[11/07 14:06:23:207    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:06:23:207    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:06:23:207    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:06:23:207     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:06:23:207    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:06:23:207    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:06:23:207      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:06:23:207   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:06:23:207   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:06:23:207      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:06:23:207 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:06:23:207 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:06:23:207 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:06:23:207  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:06:23:207     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:06:23:207      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:06:23:207 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:06:23:207      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:06:23:207   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:06:23:207   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:06:23:207      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:06:23:207 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:06:23:207 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:06:23:207 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:06:23:207 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:06:23:207 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:06:23:207 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:06:23:207 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:06:23:207 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:06:23:207      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:06:23:457      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[52000400])
[11/07 14:06:23:472 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:06:23:472 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:06:23:472 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:06:23:472 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:06:23:472 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:06:23:519 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:06:23:519 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:23:519 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:23:519 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:23:519 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:23:519 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:06:23:519 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:06:23:519 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:06:23:519 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:23:519 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:23:519 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:23:519 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:23:519      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:23:519      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:23:519      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:23:535      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:23:707 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:06:23:707 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:06:23:707 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:23:707 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:23:707 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[2000400]
[11/07 14:06:23:707   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:06:23:707   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:06:23:707   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:06:23:707   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:06:23:707   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:06:23:707   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:06:23:707      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:23:707      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:06:23:707      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:06:23:707   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:23:707   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:23:707   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:06:23:707   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:06:23:707      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:23:707      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:06:23:707       Sound.cpp(00148)] :Stop
[11/07 14:06:23:707       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:23:707      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:23:707      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:23:707      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:23:707      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:23:707   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:23:707   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:23:707      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:23:707      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:23:707      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:06:25:269 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:06:25:269 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:06:25:425 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:06:25:425      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:06:25:425      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:06:25:425 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:06:25:425 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:06:25:425      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:06:25:425      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:06:25:753      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:06:25:972      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[ 2000400])
[11/07 14:06:25:972      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:25:988   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:06:25:988   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:06:25:988      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:06:25:988   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:25:988   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:26:027      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:06:26:027      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:06:26:027      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:06:26:027      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:26:027      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:26:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:26:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:26:027      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:26:035      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:26:042      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:26:074      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:06:26:074 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:26:074 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:26:074 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:26:074 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:26:074 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:06:26:074   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:06:26:074   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:06:26:074   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:06:26:074   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:06:26:074   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:06:26:074   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:06:26:074   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [SERVICE DOOR OPENED])
[11/07 14:06:26:074   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/SERVICE DOOR OPENED]
[11/07 14:06:26:074      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:06:26:074      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:06:26:074      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:06:26:074   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:26:074   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:26:074   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:06:26:074   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:06:26:074      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:26:074      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:06:26:074       Sound.cpp(00148)] :Stop
[11/07 14:06:26:074       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:26:074      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:26:074      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:26:082      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:26:082      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:06:26:082   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:26:082   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:26:082      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:06:26:082      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:06:26:082      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:06:27:652      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:06:27:652 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:06:27:699      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 14:06:27:707      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:06:27:722      DevApl.cpp(02521)] :[nCurErrCntSave]=[0]
[11/07 14:06:27:746 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[1], AtmStatus=[3]
[11/07 14:06:27:746 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[1]
[11/07 14:06:27:746 TranNmsProc.cpp(00370)] :NmsDoorStatus:(1)
[11/07 14:06:27:746      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:06:27:769      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0044]
[11/07 14:06:27:769      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:06:27:769      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:06:27:769       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:06:27:769       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:06:27:769       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:06:27:769       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0044']
[11/07 14:06:27:816       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:06:27:816       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:06:27:816       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:06:27:816       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:06:27:816       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:06:27:816       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:06:27:816       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:06:27:816       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:06:27:816       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:06:27 EJ NUMBER = 0044 ] |14:06:27 [DOOR IS CLOSED]<END_EJRNL>]
[11/07 14:06:27:816       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0115','SB','0044','11','07','2017','14','06','27','Change into service mode<START_EJRNL>[ 11/07/2017 14:06:27 EJ NUMBER = 0044 ] |14:06:27 [DOOR IS CLOSED]<END_EJRNL>')]
[11/07 14:06:27:871       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:06:27:871       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:06:27:871       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:06:27:871       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:06:27:871       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:06:27:871       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:06:27:871       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:06:27:871       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[44]
[11/07 14:06:27:871       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [44]
[11/07 14:06:27:871       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[43], m_bRecordCountFinal=[1]
[11/07 14:06:27:917       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [44]
[11/07 14:06:27:917      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:06:27 EJ NUMBER = 0044 ] |14:06:27 [DOOR IS CLOSED]<END_EJRNL>]
[11/07 14:06:27:917      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:06:27 EJ NUMBER = 0044 ] |14:06:27 [DOOR IS CLOSED]<END_EJRNL>]
[11/07 14:06:27:917      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:06:27:917 TranNmsProc.cpp(00422)] :m_pDevCmn->fstrAPL_GetErrorCode(FALSE):(0000000)
[11/07 14:06:27:949 TranNmsProc.cpp(00440)] :Send Health Check : AtmStatus(ATM_READY      ), AtmStatusSave(ATM_READY      )
[11/07 14:06:27:949 TranNmsProc.cpp(00441)] :Send Health Check : 4  DOOR CLOSE
[11/07 14:06:27:949 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:06:27:964 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:06:27:964 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:06:27:964 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:06:27:964 TranMainProc.cp(01138)] :TranCode:[1060]
[11/07 14:06:27:964 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[1]
[11/07 14:06:27:972 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:06:27:972 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:06:27:972 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:27:972 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:28:136 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 14:06:28:136 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:06:28:136 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:06:28:136 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:28:136 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:29:699 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:06:29:699 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:06:29:699 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:29:808 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:31:371 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 14:06:31:371      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:31:371      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:31:371      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:31:371      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:31:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:31:386     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:06:31:386     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:06:31:386     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:31:480     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:31:511     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:06:31:511     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:06:31:511 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:06:31:511      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:06:31:808      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:06:31:824 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:06:31:824 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:06:31:824   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:06:31:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:06:31:824      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:31:824      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:06:31:824      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:06:31:824   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:31:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:31:824   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:06:31:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:06:31:824      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:31:824      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:06:31:824       Sound.cpp(00148)] :Stop
[11/07 14:06:31:824       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:31:824      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:31:824      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:31:824      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:31:824      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:31:824   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:31:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:31:824      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:32:214      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:32:214      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:06:32:996 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:06:32:996 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:06:32:996 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:06:32:996 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:06:32:996 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:06:32:996 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:06:32:996 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:06:32:996 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:06:32:996 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:06:32:996 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:06:32:996 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:06:33:042 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:06:33:042      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:06:33:042      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:06:33:042 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 14:06:33:042 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 14:06:33:042 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 14:06:33:042 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:06:33:042 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:06:33:042 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 14:06:33:042 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:06:33:042 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:06:33:042 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:06:33:058      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:33:058 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:06:33:058     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:06:33:058     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:06:33:058  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:06:33:058       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:06:33:058    CESocket.cpp(00116)] :Create() start

[11/07 14:06:33:058    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:06:33:058    CESocket.cpp(00220)] :Connect() start - socket:360 address: 192.168.198.199 port: 45000
[11/07 14:06:33:074    CESocket.cpp(00441)] :Connect() OK
[11/07 14:06:33:074    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:06:33:074  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:06:33:074  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:06:33:074  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:06:33:074  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:06:33:074    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:06:34:707    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:06:34:714    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:06:34:714       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:06:34:792  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:06:34:792    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:34:792       TCPIP.cpp(00091)] :LineSendData
[11/07 14:06:34:792    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:06:34:792    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:06:34:792  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:06:34:972    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:06:34:972    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:06:34:972       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:06:35:105  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:06:35:105    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:35:175    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:06:35:175    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:06:35:175       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:06:35:269  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:06:35:269    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:35:269  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:06:35:269    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:06:35:269       TCPIP.cpp(00091)] :LineSendData
[11/07 14:06:35:269    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:06:35:269    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:06:35:394    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:06:35:394    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:06:35:394       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:06:35:425  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:06:35:425    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:06:35:425       TCPIP.cpp(00091)] :LineSendData
[11/07 14:06:35:425    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:06:35:425    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:06:35:441       TCPIP.cpp(00082)] :line close start
[11/07 14:06:35:441    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:06:35:441    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:06:35:441     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:06:35:441    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:06:35:441    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:06:35:441      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:06:35:441    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:06:35:441   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:06:35:441   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:06:35:441      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:06:35:441 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:06:35:441 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:06:35:441 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:06:35:441  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:06:35:441     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:06:35:441      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:06:35:441 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:06:35:441      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:06:35:441   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:06:35:441   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:06:35:441      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:06:35:441 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:06:35:441 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:06:35:441 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:06:35:441 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:06:35:441 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:06:35:441 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:06:35:441 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:06:35:441 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:06:35:457      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:06:35:753      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:06:35:785 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:06:35:785 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:06:35:785 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:06:35:785 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:06:35:785 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:06:35:832 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:06:35:832 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:35:832 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:35:832 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:35:832 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:35:832 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:06:35:832 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:06:35:832 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:06:35:832 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:35:832 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:35:832 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:35:832 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:35:832      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:35:832      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:35:832      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:35:847      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:36:019 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:06:36:019 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:06:36:019 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:36:019 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:36:019 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:06:36:019   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:06:36:019   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:06:36:019   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:06:36:019   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:06:36:019   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:06:36:019   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:06:36:019      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:36:019      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:06:36:019      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:06:36:019   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:36:019   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:36:019   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:06:36:019   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:06:36:019      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:36:019      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:06:36:019       Sound.cpp(00148)] :Stop
[11/07 14:06:36:019       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:36:019      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:36:019      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:36:019      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:36:019      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:36:019   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:36:019   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:36:019      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:36:019      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:36:019      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:06:37:582 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:06:37:582 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:06:37:738 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:06:37:738      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:06:37:738      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:06:37:738 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:06:37:738 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:06:37:738      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:06:37:738      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:06:38:003      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:06:38:269      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:38:269      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:06:38:269   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:06:38:269   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:06:38:269      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:06:38:269   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:38:269   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:38:300      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:06:38:300      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:06:38:300      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:06:38:300      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:38:300      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:38:300      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:38:300      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:38:300      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:38:300      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:38:316      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:38:347      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:06:38:347 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:38:347 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:38:347 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:38:347 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:38:347 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:06:38:347      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:06:38:347      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:06:38:347      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:06:38:347      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:38:347      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:06:38:347       Sound.cpp(00148)] :Stop
[11/07 14:06:38:347       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:38:347      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:38:347      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:38:347      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:38:347      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:06:38:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:38:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:38:347      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:06:38:347      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:06:38:347      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:06:39:910      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:06:39:910 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:06:40:003 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:06:40:019      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:06:40:019 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[1], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:06:40:175 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:06:40:175 AtmModeCtrl.cpp(01282)] :GetMemorySize[18612224]
[11/07 14:06:40:175 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:06:40:175      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:06:40:175      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:06:40:175   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:06:40:175   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:06:40:175   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:06:40:175   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:06:40:175 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:06:40:222 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:06:40:222 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[2]
[11/07 14:06:40:222 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:40:222 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:40:222 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:40:222 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:40:222      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:06:40:238      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:06:40:238      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:06:40:238      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:06:40:238      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:06:40:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:06:40:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:06:40:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:06:40:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:06:40:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:06:40:253      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:06:40:410 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:06:40:410 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:06:40:410 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:40:410 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:40:410 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:06:40:410   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:06:40:410   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:06:40:410   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:06:40:410   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:06:40:410   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:06:40:410   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:06:40:410      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:40:410      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:06:40:410      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:06:40:410   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:40:410   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:40:410   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:06:40:410   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:06:40:410      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:40:410      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:06:40:410       Sound.cpp(00148)] :Stop
[11/07 14:06:40:410       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:40:410      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:40:410      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:40:410      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:40:410      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:06:40:410   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:40:410   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:40:410      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:06:40:800      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:06:40:800      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:06:42:363 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:06:42:363 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[1]
[11/07 14:06:42:363      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:06:42:363      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:06:42:378      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:06:42:378      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:06:42:378      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:06:42:378      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:06:42:378      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:06:42:378 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:06:42:378 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:06:42:378 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:06:42:378 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:06:42:691      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:06:42:925      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:06:42:925   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:06:42:925   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:06:42:925 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:06:43:050     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:06:43:050     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:06:43:050     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:06:43:050     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:06:43:050     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:06:43:050     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:43:097     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:06:43:144     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:06:43:144     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:06:43:144 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:06:43:144 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:06:43:144      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:06:43:144   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:06:43:144   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:06:43:144   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:06:43:144   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:06:43:144 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:06:43:160      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:06:43:160      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:06:43:160   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:43:160   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:43:175      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:06:43:175      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:06:43:175      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:06:43:238      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:06:43:238 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:06:43:285 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:06:43:285      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:06:43:285      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:06:43:285      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:06:43:285   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:06:43:285   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:06:43:285   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:06:43:285   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:06:43:285      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:06:43:285      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:06:43:285       Sound.cpp(00148)] :Stop
[11/07 14:06:43:285       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:06:43:285      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:06:43:285      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:06:43:285      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:06:43:285      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:06:43:285   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:06:43:285   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:06:43:285      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:06:43:285      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:06:43:285      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:06:44:957 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:07:10:395   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:07:10:395   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:07:10:396   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:07:10:396   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:10:396   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:07:10:624   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:07:10:624   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:07:10:625   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:07:10:625   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:10:625   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:07:10:836   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:10:836   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:10:837   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:10:837   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:10:837   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:11:026   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 14:07:11:026   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:11:026   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 14:07:11:027   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 14:07:11:027   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 14:07:11:239   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 14:07:11:239   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:11:240   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 14:07:11:240   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 14:07:11:240   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 14:07:11:634   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 14:07:11:634   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:11:635   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 14:07:11:635   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 14:07:11:894      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 14:07:11:910      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:07:11:916 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 14:07:12:182      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:07:12:460      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:07:12:466      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:07:12:466   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:07:12:467   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:07:12:467      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:07:12:468   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:12:468   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:12:480      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:07:12:480      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:07:12:481      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:07:12:481      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:07:12:840      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:07:12:840      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:07:12:840      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:07:12:840      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:07:12:840      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:07:12:840      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:07:12:840      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:07:12:856      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:07:12:856      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:07:12:856      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:07:12:856      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:07:12:856      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:07:12:872 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[1], AtmStatus=[4]
[11/07 14:07:12:872 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[1]
[11/07 14:07:13:590      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:07:13:590 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:07:13:606      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:07:13:606   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:13:606   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:13:622      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:07:13:622      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:07:13:622      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:07:13:637      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:07:13:637 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:07:13:793 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:07:13:793 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:07:13:793      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:07:13:793      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:07:13:793 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:07:14:168      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:07:14:434      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:07:14:434   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:07:14:434   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:07:14:434      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:07:14:434   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:14:434   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:14:450      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:07:14:450      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:07:14:450      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:07:14:450      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:07:14:450      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:07:14:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:07:14:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:07:14:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:07:14:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:07:14:465      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:07:14:481      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 14:07:14:481      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:07:14:481      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:07:14:481      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:07:14:481      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:07:14:481      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:07:14:481       Sound.cpp(00148)] :Stop
[11/07 14:07:14:481       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:07:14:481      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:07:14:481      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:07:14:481      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:07:14:481      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:07:14:481   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:14:481   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:14:481      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:07:14:481      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:07:14:481      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:07:14:481      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:07:14:512 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 14:07:14:512      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:07:14:528      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0045]
[11/07 14:07:14:528      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 14:07:14:528      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 14:07:14:528       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:07:14:528       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:07:14:528       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:07:14:528       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0045']
[11/07 14:07:14:575       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:07:14:575       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:07:14:575       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:07:14:575       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:07:14:575       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:07:14:575       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:07:14:575       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:07:14:575       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:07:14:575       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 14:07:14 EJ NUMBER = 0045 ] |14:07:14 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:07:14:575       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0045','11','07','2017','14','07','14','Change into operator mode<START_EJRNL>[ 11/07/2017 14:07:14 EJ NUMBER = 0045 ] |14:07:14 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 14:07:14:622       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:07:14:622       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:07:14:622       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:07:14:622       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:07:14:622       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:07:14:622       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:07:14:622       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:07:14:622       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[45]
[11/07 14:07:14:622       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [45]
[11/07 14:07:14:622       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[44], m_bRecordCountFinal=[1]
[11/07 14:07:14:668       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [45]
[11/07 14:07:14:668      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 14:07:14 EJ NUMBER = 0045 ] |14:07:14 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:07:14:668      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 14:07:14 EJ NUMBER = 0045 ] |14:07:14 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:07:14:668      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:07:14:668      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:07:14:684      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:07:14:700     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:07:14:700     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:07:14:762 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:07:14:762 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:07:14:762 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:07:14:872 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:07:15:418 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:15:426      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:15:426   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:15:426   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:15:426      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:15:426      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:15:789   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:07:15:789   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:15:790   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:07:15:790   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:07:15:790   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:07:15:966   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:07:15:966   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:15:967   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:07:15:967   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:07:15:967   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:07:16:146   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:07:16:146   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:16:147   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:07:16:147   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:07:16:147   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:07:16:331   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:07:16:331   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:16:332   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:07:16:332   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:07:16:332   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:07:16:527   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:07:16:527   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:16:528   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:07:16:528   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:07:16:528   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:07:16:673   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:07:16:673   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:16:674   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:07:16:674   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:07:16:674   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:07:17:553   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:07:17:553   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:07:17:554   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:07:17:554   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:17:554   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:07:17:958 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:17:958      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:17:958   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:17:959   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:17:960      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:17:960      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:18:847   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:18:847   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:18:847   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:18:848   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:18:848   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:19:075   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:19:075   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:19:076   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:19:076   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:19:076   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:19:322   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:19:322   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:19:322   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:19:323   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:19:323   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:19:558   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:19:558   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:19:558   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:19:558   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:19:558   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:19:678   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:19:678   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:19:678   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:19:678   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:19:678   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:19:853   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:19:853   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:19:854   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:19:854   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:19:854   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:20:007   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:20:007   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:20:008   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:20:008   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:20:008   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:20:206   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:07:20:206   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:07:20:206   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:07:20:206   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:20:206   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:07:20:686 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:07:20:686      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:07:20:687   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:20:687   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:20:688      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:20:688      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:25:146   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:07:25:146   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:07:25:147   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:07:25:147   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:07:25:147   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:07:25:467   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:07:25:468   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:07:25:468   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:07:25:468   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:25:469   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:07:25:825 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:25:825      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:25:826   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:25:826   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:25:827      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:25:827      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:27:024 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:27:024      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:27:024   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:27:025   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:27:026      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:27:026      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:29:193 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:29:193      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:29:194   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:29:194   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:29:195      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:29:195      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:30:245   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:30:245   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:30:246   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:30:246   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:30:246   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:30:940 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:30:940      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:30:941   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:30:941   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:30:942      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:30:942      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:32:481   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:32:481   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:32:482   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:32:482   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:32:482   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:32:952 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:32:952      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:32:953   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:32:954   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:32:957      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:32:957      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:34:546 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:34:546      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:34:546   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:34:547   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:34:548      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:34:548      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:38:543   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:38:543   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:38:544   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:38:544   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:38:544   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:38:931 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:38:931      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:38:931   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:38:932   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:38:933      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:38:933      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:40:934 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:40:935      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:40:935   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:40:935   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:40:936      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:40:937      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:43:188   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:43:188   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:43:189   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:43:189   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:43:189   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:43:700 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:43:700      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:43:701   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:43:701   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:43:702      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:43:702      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:45:538 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:07:45:539      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:07:45:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:45:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:45:540      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:45:541      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:50:959   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:50:959   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:50:960   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:50:960   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:50:960   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:51:308 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:51:309      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:51:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:51:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:51:311      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:51:311      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:53:271 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:07:53:271      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:07:53:271   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:53:272   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:53:273      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:53:273      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:54:654 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:07:54:654      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:07:54:654   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:54:655   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:54:656      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:54:656      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:56:718   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:07:56:718   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:07:56:718   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:07:56:718   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:07:56:719   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:07:57:121 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:07:57:122      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:07:57:123   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:57:124   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:57:125      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:57:125      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:07:57:697 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 14:07:57:698      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 14:07:57:698   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:07:57:698   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:07:57:699      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:07:57:700      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:01:418   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:01:418   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:01:419   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:01:419   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:01:419   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:01:824 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:08:01:824      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:08:01:825   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:01:825   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:01:826      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:01:826      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:06:564 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 14:08:06:564      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 14:08:06:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:06:565   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:06:566      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:06:566      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:11:339   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:11:339   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:11:340   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:11:340   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:11:340   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:11:709 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:08:11:709      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:08:11:709   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:11:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:11:712      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:11:712      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:12:606   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:12:606   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:12:607   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:12:607   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:12:607   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:13:058 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:13:059      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:13:059   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:13:059   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:13:060      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:13:061      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:16:666 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:08:16:666      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:08:16:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:16:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:16:667      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:16:667      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:18:470 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:18:471      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:18:471   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:18:471   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:18:472      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:18:473      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:19:990 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:19:991      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:19:991   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:19:991   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:19:992      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:19:992      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:20:591   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:20:591   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:20:591   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:20:591   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:20:592   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:20:992 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:20:992      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:20:993   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:20:993   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:20:994      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:20:994      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:22:084 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:22:084      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:22:085   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:22:085   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:22:086      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:22:086      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:23:847   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:23:847   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:23:848   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:23:848   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:23:848   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:24:196 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:24:196      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:24:197   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:24:197   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:24:198      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:24:198      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:25:297 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:25:297      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:25:298   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:25:298   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:25:299      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:25:299      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:26:074   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:26:074   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:26:075   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:26:075   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:26:075   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:26:415 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:26:415      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:26:416   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:26:416   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:26:416      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:26:416      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:27:503   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:27:503   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:27:504   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:27:504   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:27:504   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:27:942 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:08:27:942      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:08:27:942   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:27:943   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:27:944      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:27:944      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:30:278   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:30:278   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:30:279   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:30:279   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:30:279   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:30:823 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:30:823      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:30:824   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:30:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:30:825      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:30:825      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:45:927 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:08:45:927      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:08:45:928   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:45:928   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:45:929      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:45:929      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:47:136 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 14:08:47:136      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 14:08:47:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:47:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:47:138      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:47:138      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:48:336   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:48:336   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:48:336   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:48:336   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:48:336   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:48:767 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:08:48:767      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:08:48:768   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:48:768   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:48:769      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:48:769      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:51:286   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:08:51:287   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:08:51:287   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:08:51:287   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:51:288   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:08:51:765 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:51:765      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:51:765   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:51:766   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:51:767      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:51:767      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:55:714 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:55:714      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:55:715   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:55:715   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:55:716      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:55:716      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:58:635 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:08:58:636      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:08:58:636   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:08:58:636   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:08:58:638      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:08:58:638      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:08:59:811   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:08:59:811   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:08:59:812   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:08:59:812   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:08:59:812   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:09:00:381   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:09:00:381   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:09:00:382   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:09:00:382   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:09:00:382   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:09:00:822 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:09:00:822      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:09:00:822   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:00:823   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:00:824      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:09:00:824      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:09:02:111   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:09:02:111   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:09:02:111   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:09:02:112   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:09:02:112   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:09:02:610 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:09:02:610      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:09:02:610   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:02:611   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:02:612      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:09:02:612      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:09:09:106      DevCmn.cpp(03320)] :fnCDU_GetCSTStatus(nCSTNo[2]):return(3)
[11/07 14:09:09:137      DevApl.cpp(05136)] :fnAPL_CheckPrintCshPosition():[  :  :   CST2 ABNORMAL POSITION]
[11/07 14:09:21:372      DevCmn.cpp(03320)] :fnCDU_GetCSTStatus(nCSTNo[2]):return(0)
[11/07 14:09:21:372      DevCmn.cpp(03222)] :fnCDU_GetRecycleBoxStatus():return(0)
[11/07 14:09:21:403      DevApl.cpp(05136)] :fnAPL_CheckPrintCshPosition():[  :  :   CST2 NORMAL POSITION  ]
[11/07 14:09:22:810   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:09:22:811   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:09:22:811   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:09:22:811   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:09:22:811   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:09:23:335 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:09:23:336      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:09:23:336   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:23:336   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:23:337      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:09:23:338      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:09:32:720   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 14:09:32:720   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:09:32:721   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 14:09:32:721   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 14:09:32:721   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 14:09:32:958   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 14:09:32:958   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:09:32:958   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 14:09:32:958   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 14:09:32:958   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 14:09:33:221   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:09:33:221   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:09:33:222   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:09:33:222   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:09:33:222   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:09:33:459 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||1]
[11/07 14:09:33:459      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:09:33:460   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:33:460   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:33:462      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:09:33:767      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:09:33:903 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_RUN]
[11/07 14:09:34:039      DevCmn.cpp(05394)] :fnSNS_ClearOperatorSwitch()
[11/07 14:09:34:039      DevCmn.cpp(05401)] :fnSNS_ClearOperatorSwitch():return(0)
[11/07 14:09:34:042      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:09:34:299 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:09:34:299 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:09:34:299 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:09:34:409 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:09:34:409      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 14:09:34:424      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:09:34:456 AtmClerkCtrl.cp(00514)] :EMV Enabled.. Set Kernel Version [5]
[11/07 14:09:35:237 AtmClerkCtrl.cp(00525)] :OP_RUN ClerkProc:strOpResult[NORMAL||]
[11/07 14:09:35:393 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:09:35:393 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:09:35:393      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:09:35:393      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:09:35:393 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:09:35:612      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:09:35:831      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:09:35:831   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:09:35:831   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:09:35:846      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:09:35:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:35:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:35:862      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:09:35:862      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:09:35:862      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:09:35:862      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:09:35:862      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:09:35:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:09:35:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:09:35:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:09:35:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:09:35:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:09:35:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:09:35:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:09:35:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:09:35:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:09:35:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:09:35:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:09:35:909      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:09:35:909      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:09:35:940      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:09:35:956      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0046]
[11/07 14:09:35:956      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:09:35:956      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:09:35:956       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:09:35:956       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:09:35:956       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:09:35:956       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0046']
[11/07 14:09:36:002       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:09:36:002       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:09:36:002       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:09:36:002       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:09:36:002       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:09:36:002       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:09:36:002       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:09:36:002       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:09:36:002       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:09:35 EJ NUMBER = 0046 ] |14:09:35 [SERVICE MODE]<END_EJRNL>]
[11/07 14:09:36:002       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0046','11','07','2017','14','09','35','Change into service mode<START_EJRNL>[ 11/07/2017 14:09:35 EJ NUMBER = 0046 ] |14:09:35 [SERVICE MODE]<END_EJRNL>')]
[11/07 14:09:36:049       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:09:36:049       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:09:36:049       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:09:36:049       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:09:36:049       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:09:36:049       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:09:36:049       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:09:36:049       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[46]
[11/07 14:09:36:049       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [46]
[11/07 14:09:36:049       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[45], m_bRecordCountFinal=[1]
[11/07 14:09:36:096       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [46]
[11/07 14:09:36:096      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:09:35 EJ NUMBER = 0046 ] |14:09:35 [SERVICE MODE]<END_EJRNL>]
[11/07 14:09:36:096      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:09:35 EJ NUMBER = 0046 ] |14:09:35 [SERVICE MODE]<END_EJRNL>]
[11/07 14:09:36:096      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:09:36:112      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:09:36:268 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:09:36:268      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:09:36:268      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:09:36:268 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:09:36:268 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:09:36:268      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:09:36:268      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:09:36:565      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:09:36:815      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:09:36:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:09:36:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:09:36:815      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:09:36:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:36:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:36:831      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:09:36:831      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:09:36:831      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:09:36:831      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:09:36:831      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:09:36:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:09:36:838      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:09:36:838      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:09:36:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:09:36:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:09:36:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:09:36:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:09:36:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:09:36:854      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:09:36:854      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:09:36:854      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:09:36:877      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:09:36:877 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:09:36:877 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:09:36:877 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:09:36:877 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:09:36:877 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[01], m_nRMSDisplay=[0]
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:09:36:885      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:09:36:885      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:09:36:885      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:09:36:885      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:09:36:885      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:09:36:885       Sound.cpp(00148)] :Stop
[11/07 14:09:36:885       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:09:36:885      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:09:36:885      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:09:36:885      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:09:36:885      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:09:36:885   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:36:885   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:36:893      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:09:36:893      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:09:36:893      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:09:38:456      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:09:38:456 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:09:38:557 TranNmsProc.cpp(01046)] :fnAPP_UpdateDispensingCSTsStatus(): Status=[1]->[0]
[11/07 14:09:38:573 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 0 => A3
[11/07 14:09:38:596 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[1], m_ModemStatus=[3], AtmStatus=[3]
[11/07 14:09:38:596 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 14:09:38:596 TranNmsProc.cpp(00488)] :NmsCashStatus:(0)
[11/07 14:09:38:831 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:09:38:831 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 3 => A0
[11/07 14:09:38:838      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:09:39:010 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:09:39:010 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 14:09:39:010 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:09:39:010      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:09:39:010      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:09:39:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:09:39:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:09:39:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:09:39:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:09:39:010 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:09:39:026      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:09:39:026      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:09:39:041      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:09:39:041      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:09:39:041      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:09:39:041      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:09:39:041      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:09:39:041 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:09:39:041 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:09:39:041 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:09:39:041 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:09:39:276      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:09:39:713      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:09:39:713   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:09:39:713   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:09:39:713 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:09:39:776     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:09:39:776     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:09:39:776     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:09:39:776     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:09:39:776     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:09:39:791     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:09:39:838     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:09:39:870     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:09:39:870     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:09:39:870 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:09:39:870 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:09:39:870      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:09:39:870   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:09:39:870   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:09:39:870   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:09:39:870   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:09:39:870 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:09:39:901      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:09:39:901      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:09:39:901   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:39:901   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:39:916      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:09:39:916      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:09:39:916      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:09:40:010      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:09:40:010 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:09:40:026 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:09:40:026      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:09:40:026      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:09:40:026      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:09:40:041   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:09:40:041   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:09:40:041   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:09:40:041   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:09:40:041      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:09:40:041      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:09:40:041       Sound.cpp(00148)] :Stop
[11/07 14:09:40:041       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:09:40:041      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:09:40:041      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:09:40:041      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:09:40:041      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:09:40:041   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:09:40:041   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:09:40:041      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:09:40:041      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:09:40:432      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:10:46:713 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[1], AtmStatus=[4]
[11/07 14:10:46:713 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[1]
[11/07 14:10:47:901 AtmModeCtrl.cpp(01706)] :Change Mode to Ready by RMS_REPORT_START_COMM||RMS_REPORT_COMMUNICATING
[11/07 14:10:47:916      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:10:47:932 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:10:47:948      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:10:47:948   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:10:47:948   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:10:47:963      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:10:47:963      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:10:47:963      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:10:47:979      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:10:47:979 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:10:47:979 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[1], m_ModemStatus=[2], AtmStatus=[3]
[11/07 14:10:47:979 TranNmsProc.cpp(00128)] :Send Health Check : 1
[11/07 14:10:47:979 TranNmsProc.cpp(00129)] :Send Health Check : AtmStatus(ATM_READY      ), nHealthCheckReason=[8]
[11/07 14:10:47:995 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:10:48:010 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:10:48:010 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:10:48:010 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:10:48:010 TranMainProc.cp(01138)] :TranCode:[0]
[11/07 14:10:48:010 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 14:10:48:010 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:10:48:010 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:10:48:010 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:48:120 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:48:291 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 14:10:48:291 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 14:10:48:291      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:10:48:291      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:10:48:291      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:10:48:291      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:10:48:291      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:10:48:307      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:10:48:307      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:10:48:307      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:10:48:307      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:10:48:307      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:10:48:307      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:10:48:307     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:10:48:307     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:10:48:307     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:10:48:370     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:10:48:416     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:10:48:416     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:10:48:416 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:10:48:416      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:10:48:729      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:10:48:729 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:10:48:729 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:10:48:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:10:48:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:10:48:745      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:10:48:745      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:10:48:745      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:10:48:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:10:48:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:10:48:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:10:48:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:10:48:745      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:10:48:745      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:10:48:745       Sound.cpp(00148)] :Stop
[11/07 14:10:48:745       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:10:48:745      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:10:48:745      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:10:48:745      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:10:48:745      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:10:48:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:10:48:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:10:48:745      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:10:49:088      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:10:49:088      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:10:49:870 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:10:49:870 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:10:49:870 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:10:49:870 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:10:49:870 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:10:49:870 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:10:49:870 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:10:49:870 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:10:49:870 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:10:49:870 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:10:49:870 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:10:49:901 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:10:49:901      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:10:49:901      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:10:49:901 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 14:10:49:901 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 14:10:49:901 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 14:10:49:901 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:10:49:901 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:10:49:901 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 14:10:49:901 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:10:49:901 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:10:49:901 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:10:49:916      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:10:49:924 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:10:49:924     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:10:49:924     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:10:49:924  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:10:49:924       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:10:49:924    CESocket.cpp(00116)] :Create() start

[11/07 14:10:49:924    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:10:49:924    CESocket.cpp(00220)] :Connect() start - socket:572 address: 192.168.198.199 port: 45000
[11/07 14:10:49:924    CESocket.cpp(00441)] :Connect() OK
[11/07 14:10:49:924    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:10:49:924  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:10:49:924  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:10:49:924  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:10:49:924  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:10:49:924    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:10:51:549    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:10:51:549    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:10:51:549       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:10:51:659  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:10:51:659    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:10:51:659       TCPIP.cpp(00091)] :LineSendData
[11/07 14:10:51:659    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:10:51:659    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:10:51:659  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:10:51:815    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:10:51:815    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:10:51:815       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:10:51:971  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:10:51:971    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:10:52:018    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:10:52:018    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:10:52:018       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:10:52:127  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:10:52:127    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:10:52:127  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:10:52:127    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:10:52:127       TCPIP.cpp(00091)] :LineSendData
[11/07 14:10:52:127    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:10:52:127    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:10:52:237    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:10:52:237    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:10:52:237       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:10:52:284  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:10:52:284    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:10:52:284       TCPIP.cpp(00091)] :LineSendData
[11/07 14:10:52:284    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:10:52:284    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:10:52:299       TCPIP.cpp(00082)] :line close start
[11/07 14:10:52:299    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:10:52:299    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:10:52:299    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:10:52:299     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:10:52:299    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:10:52:299    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:10:52:299      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:10:52:299   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:10:52:299   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:10:52:299      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:10:52:299 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:10:52:299 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:10:52:299 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:10:52:299  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:10:52:299     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:10:52:299      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:10:52:299 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:10:52:299      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:10:52:299   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:10:52:299   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:10:52:299      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:10:52:299 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:10:52:299 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:10:52:299 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:10:52:299 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:10:52:299 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:10:52:299 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:10:52:299 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:10:52:299 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:10:52:315      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:10:52:565      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:10:52:581 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:10:52:581 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:10:52:581 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:10:52:581 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:10:52:581 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:10:52:627 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:10:52:627 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:10:52:627 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:10:52:627 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:52:627 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:52:627 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:10:52:627 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:10:52:627 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:10:52:627 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:52:627 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:52:627 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:10:52:627 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:10:52:627 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:10:52:627 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:10:52:627 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:52:627 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:52:627      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:10:52:627      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:10:52:627      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:10:52:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:10:52:815 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:10:52:815 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:10:52:815 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:52:815 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:52:815 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:10:52:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:10:52:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:10:52:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:10:52:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:10:52:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:10:52:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:10:52:815      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:10:52:815      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:10:52:815      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:10:52:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:10:52:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:10:52:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:10:52:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:10:52:815      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:10:52:815      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:10:52:815       Sound.cpp(00148)] :Stop
[11/07 14:10:52:815       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:10:52:815      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:10:52:815      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:10:52:815      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:10:52:815      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:10:52:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:10:52:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:10:52:815      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:10:52:815      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:10:52:815      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:10:54:377 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:10:54:377 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:10:54:534 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:10:54:534      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:10:54:534      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:10:54:534 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:10:54:534 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:10:54:534      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:10:54:534      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:10:54:768      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:10:54:971      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:10:54:971      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:10:54:971   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:10:54:971   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:10:54:971      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:10:54:971   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:10:54:971   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:10:54:987      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:10:54:987      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:10:54:987      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:10:54:987      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:10:54:987      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:10:54:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:10:54:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:10:54:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:10:54:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:10:55:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:10:55:018      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:10:55:018 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:10:55:018 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:10:55:018 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:55:018 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:55:018 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:10:55:018      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:10:55:018      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:10:55:018      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:10:55:018      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:10:55:018      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:10:55:018       Sound.cpp(00148)] :Stop
[11/07 14:10:55:018       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:10:55:018      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:10:55:018      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:10:55:018      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:10:55:018      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:10:55:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:10:55:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:10:55:018      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:10:55:018      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:10:55:018      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:10:56:596      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:10:56:596 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:10:56:674 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:10:56:690      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:10:56:706 TranNmsProc.cpp(00145)] :Send Health Check : 5
[11/07 14:10:56:706 TranNmsProc.cpp(00146)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave=[ATM_READY      ]
[11/07 14:10:56:721 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:10:56:737 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:10:56:737 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:10:56:737 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:10:56:737 TranMainProc.cp(01138)] :TranCode:[1060]
[11/07 14:10:56:737 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 14:10:56:737 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:10:56:737 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:10:56:737 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:10:56:846 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:10:57:002 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 14:10:57:002 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 14:10:57:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:10:57:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:10:57:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:10:57:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:10:57:002      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:10:57:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:10:57:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:10:57:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:10:57:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:10:57:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:10:57:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:10:57:018     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:10:57:018     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:10:57:018     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:10:57:096     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:10:57:127     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:10:57:127     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:10:57:127 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:10:57:127      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:10:57:331      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:10:57:362 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:10:57:362 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:10:57:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:10:57:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:10:57:362      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:10:57:362      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:10:57:362      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:10:57:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:10:57:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:10:57:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:10:57:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:10:57:362      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:10:57:362      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:10:57:362       Sound.cpp(00148)] :Stop
[11/07 14:10:57:362       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:10:57:362      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:10:57:362      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:10:57:362      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:10:57:362      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:10:57:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:10:57:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:10:57:362      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:10:57:752      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:10:57:752      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:10:58:534 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:10:58:534 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:10:58:534 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:10:58:534 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:10:58:534 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:10:58:534 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:10:58:534 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:10:58:534 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:10:58:534 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:10:58:534 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:10:58:534 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:10:58:565 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:10:58:565      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:10:58:565      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:10:58:565 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 14:10:58:565 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 14:10:58:565 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 14:10:58:565 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:10:58:565 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:10:58:565 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70399916)
[11/07 14:10:58:565 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:10:58:565 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:10:58:565 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:10:58:581      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:10:58:581 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:10:58:596     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:10:58:596     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:10:58:596  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:10:58:596       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:10:58:596    CESocket.cpp(00116)] :Create() start

[11/07 14:10:58:596    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:10:58:596    CESocket.cpp(00220)] :Connect() start - socket:1992 address: 192.168.198.199 port: 45000
[11/07 14:10:58:596    CESocket.cpp(00441)] :Connect() OK
[11/07 14:10:58:596    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:10:58:596  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:10:58:596  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:10:58:596  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:10:58:596  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:10:58:596    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:11:00:221    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:11:00:221    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:11:00:221       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:11:00:315  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:11:00:315    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:11:00:315       TCPIP.cpp(00091)] :LineSendData
[11/07 14:11:00:315    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:11:00:315    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:11:00:315  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:11:00:471    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:11:00:471    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:11:00:471       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:11:00:627  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:11:00:627    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:11:00:674    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:11:00:674    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:11:00:674       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:11:00:784  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:11:00:784    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:11:00:784  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:11:00:784    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:11:00:784       TCPIP.cpp(00091)] :LineSendData
[11/07 14:11:00:784    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:11:00:784    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:11:00:893    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:11:00:893    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:11:00:893       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:11:00:940  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:11:00:940    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:11:00:940       TCPIP.cpp(00091)] :LineSendData
[11/07 14:11:00:940    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:11:00:940    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:11:00:956       TCPIP.cpp(00082)] :line close start
[11/07 14:11:00:956    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:11:00:956    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:11:00:956    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:11:00:956     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:11:00:956    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:11:00:956    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:11:00:956      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:11:00:956   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:11:00:971   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:11:00:971      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:11:00:971 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:11:00:971 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:11:00:971 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:11:00:971  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:11:00:971     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:11:00:971      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:11:00:971 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:11:00:971      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:11:00:971   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:11:00:971   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:11:00:971      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:11:00:971 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:11:00:971 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:11:00:971 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:11:00:971 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:11:00:971 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:11:00:971 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:11:00:971 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:11:00:971 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:11:00:971      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:11:01:174      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:11:01:190 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:11:01:190 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:11:01:190 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:11:01:190 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:11:01:190 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:11:01:237 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:11:01:237 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:11:01:237 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:11:01:237 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:11:01:237 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:11:01:237 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:11:01:237 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:11:01:237 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:11:01:237 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:11:01:237 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:11:01:237 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:11:01:237 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:11:01:237 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:11:01:237 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:11:01:237 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:11:01:237 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:11:01:237      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:11:01:237      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:11:01:237      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:11:01:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:11:01:424 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:11:01:424 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:11:01:424 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:11:01:424 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:11:01:424 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:11:01:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:11:01:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:11:01:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:11:01:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:11:01:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:11:01:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:11:01:424      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:11:01:424      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:11:01:424      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:11:01:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:11:01:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:11:01:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:11:01:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:11:01:424      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:11:01:424      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:11:01:424       Sound.cpp(00148)] :Stop
[11/07 14:11:01:424       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:11:01:424      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:11:01:424      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:11:01:424      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:11:01:424      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:11:01:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:11:01:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:11:01:424      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:11:01:424      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:11:01:424      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:11:02:987 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:11:02:987 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:11:03:143 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:11:03:143 AtmModeCtrl.cpp(01282)] :GetMemorySize[17563648]
[11/07 14:11:03:143 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:11:03:143      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:11:03:143      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:11:03:143   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:11:03:143   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:11:03:143   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:11:03:143   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:11:03:143 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:11:03:174      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:11:03:174      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:11:03:190      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:11:03:190      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:11:03:190      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:11:03:190      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:11:03:190      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:11:03:190 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:11:03:190 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:11:03:190 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:11:03:190 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:11:03:424      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:11:03:659      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:11:03:659      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:11:03:659   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:11:03:659   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:11:03:659 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:11:03:721     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:11:03:721     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:11:03:721     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:11:03:721     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:11:03:721     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:11:03:721     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:11:03:752     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:11:03:784     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:11:03:784     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:11:03:784 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:11:03:784 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:11:03:784      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:11:03:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:11:03:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:11:03:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:11:03:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:11:03:784 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:11:03:815      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:11:03:815      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:11:03:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:11:03:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:11:03:831      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:11:03:831      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:11:03:831      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:11:03:877      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:11:03:877 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:11:03:893 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:11:03:893      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:11:03:893      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:11:03:893      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:11:03:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:11:03:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:11:03:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:11:03:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:11:03:893      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:11:03:893      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:11:03:893       Sound.cpp(00148)] :Stop
[11/07 14:11:03:893       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:11:03:893      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:11:03:893      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:11:03:893      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:11:03:893      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:11:03:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:11:03:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:11:03:893      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:11:03:893      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:11:03:893      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:11:05:581 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:13:54:534 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[1], AtmStatus=[4]
[11/07 14:13:54:534 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[1]
[11/07 14:13:55:706 AtmModeCtrl.cpp(01706)] :Change Mode to Ready by RMS_REPORT_START_COMM||RMS_REPORT_COMMUNICATING
[11/07 14:13:55:706      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:13:55:721 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:13:55:737      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:13:55:737   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:13:55:737   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:13:55:752      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:13:55:752      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:13:55:752      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:13:55:768      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:13:55:768 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:13:55:940 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:13:55:940      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:13:55:940      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:13:55:940 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:13:55:940 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:13:55:940      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:13:55:940      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:13:56:174      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:13:56:424      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:13:56:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:13:56:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:13:56:424      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:13:56:424   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:13:56:424   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:13:56:440      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:13:56:440      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:13:56:440      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:13:56:440      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:13:56:815      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:13:56:815      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:13:56:815      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:13:56:815      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:13:56:815      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:13:56:815      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:13:56:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:13:56:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:13:56:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:13:56:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:13:56:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:13:56:831      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:13:56:846      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:13:56:846 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:13:56:846 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:13:56:846 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:13:56:846 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:13:56:846 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[01], m_nRMSDisplay=[0]
[11/07 14:13:56:846 TranNmsProc.cpp(02557)] :fnAPP_RMSProgressDisplay : fstrAPL_GetErrorCode=[0000000]
[11/07 14:13:57:002   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:13:57:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:13:57:002   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING...... ])
[11/07 14:13:57:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING...... ]
[11/07 14:13:57:002   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:13:57:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:13:57:002      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:13:57:002      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:13:57:002      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:13:57:002   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:13:57:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:13:57:002   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:13:57:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:13:57:002      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:13:57:002      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:13:57:002       Sound.cpp(00148)] :Stop
[11/07 14:13:57:002       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:13:57:002      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:13:57:002      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:13:57:002      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:13:57:002      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:13:57:002   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:13:57:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:13:57:002      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:13:57:002      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:13:57:002      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:13:58:721      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:13:58:721      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:13:58:721      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:13:58:721      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:13:58:721      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:13:58:721       Sound.cpp(00148)] :Stop
[11/07 14:13:58:721       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:13:58:721      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:13:58:721      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:13:58:721      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:13:58:721      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:13:58:721   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:13:58:721   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:13:58:721      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:13:58:721      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:13:58:721      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:14:00:284      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:14:00:284 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:14:00:393 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:14:00:409      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:14:00:424 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[1], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:14:00:581 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:14:00:581 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 14:14:00:581 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:14:00:581      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:14:00:581      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:14:00:581   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:14:00:581   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:14:00:581   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:14:00:581   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:14:00:581 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:14:00:581 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:14:00:627      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:14:00:627      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:14:00:643      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:14:00:643      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:14:00:643      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:14:00:643      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:14:00:643      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:14:00:643 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:14:00:643 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:14:00:643 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:14:00:643 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:14:00:893      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:14:01:143      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:14:01:143   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:14:01:143   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:14:01:143 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:14:01:206     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:14:01:206     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:14:01:206     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:14:01:206     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:14:01:206     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:14:01:206     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:14:01:252     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:14:01:284     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:14:01:284     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:14:01:284 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:14:01:284 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:14:01:284      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:14:01:284   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:14:01:284   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:14:01:299   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:14:01:299   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:14:01:299 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:14:01:315      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:14:01:315      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:14:01:315   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:01:315   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:01:331      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:14:01:331      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:14:01:331      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:14:01:377      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:14:01:377 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:14:01:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:14:01:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:14:01:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:14:01:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:14:01:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:14:01:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:14:01:377 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:14:01:377      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:14:01:377      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:14:01:377      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:14:01:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:14:01:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:14:01:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:14:01:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:14:01:377      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:14:01:377      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:14:01:377       Sound.cpp(00148)] :Stop
[11/07 14:14:01:377       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:14:01:377      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:14:01:377      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:14:01:377      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:14:01:377      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:14:01:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:01:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:01:377      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:14:01:377      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:14:01:752      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:14:03:424 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:14:03:424 TranNmsProc.cpp(02191)] :fnAPP_CheckRMSStatus() m_ModemStatus=[2][0000000]
[11/07 14:14:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:14:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:14:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:14:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:14:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:14:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:14:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:14:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:14:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:14:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:14:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:14:03:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:14:03:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:14:03:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING...    ])
[11/07 14:14:03:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING...    ]
[11/07 14:14:03:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:14:03:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:14:03:596      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:14:03:596      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:14:03:596      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:14:03:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:14:03:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:14:03:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:14:03:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:14:03:596      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:14:03:596      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:14:03:596       Sound.cpp(00148)] :Stop
[11/07 14:14:03:596       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:14:03:596      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:14:03:596      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:14:03:596      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:14:03:596      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:14:03:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:03:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:03:596      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:14:03:971      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:14:03:971      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:14:04:752 TranNmsProc.cpp(02217)] :m_RMSParameter=[80]
[11/07 14:14:04:909 AtmModeCtrl.cpp(02035)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[HOST_OFFLINE   ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:14:04:909      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:14:04:940      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0047]
[11/07 14:14:04:940      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SF]
[11/07 14:14:04:940      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SF]
[11/07 14:14:04:940       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:14:04:940       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:14:04:940       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:14:04:940       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0047']
[11/07 14:14:04:987       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:14:04:987       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:14:04:987       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:14:04:987       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:14:04:987       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:14:04:987       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:14:04:987       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:14:04:987       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:14:04:987       DevDB.cpp(01106)] :pEJnl->Data [System Reboot<START_EJRNL>[ 11/07/2017 14:14:04 EJ NUMBER = 0047 ] |14:14:04 [REBOOT SYSTEM]<END_EJRNL>]
[11/07 14:14:04:987       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0103','SF','0047','11','07','2017','14','14','04','System Reboot<START_EJRNL>[ 11/07/2017 14:14:04 EJ NUMBER = 0047 ] |14:14:04 [REBOOT SYSTEM]<END_EJRNL>')]
[11/07 14:14:05:034       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:14:05:034       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:14:05:034       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:14:05:034       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:14:05:034       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:14:05:034       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:14:05:034       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:14:05:034       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[47]
[11/07 14:14:05:034       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [47]
[11/07 14:14:05:034       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[46], m_bRecordCountFinal=[1]
[11/07 14:14:05:081       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [47]
[11/07 14:14:05:081      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Reboot<START_EJRNL>[ 11/07/2017 14:14:04 EJ NUMBER = 0047 ] |14:14:04 [REBOOT SYSTEM]<END_EJRNL>]
[11/07 14:14:05:081      DevApl.cpp(06316)] :strTempArray0=[System Reboot] / strTempArray1=[[ 11/07/2017 14:14:04 EJ NUMBER = 0047 ] |14:14:04 [REBOOT SYSTEM]<END_EJRNL>]
[11/07 14:14:05:081      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:14:05:081      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[2], nPinInputMode=[1]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:05:081      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:14:05:081      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:14:05:081      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:14:05:081 AtmModeCtrl.cpp(02076)] :TerminateProcess(): nRebootFlag=[1]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:14:05:081      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:14:05:081      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:14:05:081      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:14:05:081      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:14:05:081      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:14:05:081       Sound.cpp(00148)] :Stop
[11/07 14:14:05:081       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:14:05:081      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:14:05:081      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:14:05:081      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:14:05:081      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:14:05:081   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:05:081   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:05:081      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:14:05:081      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:14:05:081      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:14:05:299      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:14:05:549      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:14:05:565      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:14:05:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:14:05:565   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:14:05:565      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:14:05:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:05:565   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:05:581      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:14:05:581      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:14:05:581      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:14:05:581      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:14:05:581      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:14:05:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:14:05:588      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:14:05:588      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:14:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:14:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:14:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:14:05:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:14:05:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:14:05:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:14:05:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:14:05:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:14:05:627      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[||ON||OFF||OFF||ON||111111||222222||555555||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:14:05:627      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||ON||OFF||OFF||ON||111111||222222||NHD||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:14:05:627      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APSTART]
[11/07 14:14:05:627      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:14:05:627      DevApl.cpp(01123)] :fnAPL_UnLoadDevice()
[11/07 14:14:05:627       Sound.cpp(00082)] :CloseDevice()
[11/07 14:14:05:627       Sound.cpp(00148)] :Stop
[11/07 14:14:05:627       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:14:05:627       Sound.cpp(00090)] :CloseDevice()=[0]
[11/07 14:14:05:627      DevCmn.cpp(04162)] :fnPBM_Deinitialize()
[11/07 14:14:05:627      DevCmn.cpp(04171)] :fnPBM_Deinitialize():return(0)
[11/07 14:14:05:627      DevCmn.cpp(03797)] :fnCDU_Deinitialize()
[11/07 14:14:06:791      DevCmn.cpp(03806)] :fnCDU_Deinitialize():return(0)
[11/07 14:14:06:791      DevCmn.cpp(01089)] :fnMCU_Deinitialize()
[11/07 14:14:07:620      DevCmn.cpp(01096)] :fnMCU_Deinitialize():return(0)
[11/07 14:14:07:620      DevCmn.cpp(00699)] :fnSPR_Deinitialize()
[11/07 14:14:11:018      DevCmn.cpp(00708)] :fnSPR_Deinitialize():return(0)
[11/07 14:14:11:018      DevCmn.cpp(00431)] :fnJPR_Deinitialize()
[11/07 14:14:11:018      DevCmn.cpp(00440)] :fnJPR_Deinitialize():return(0)
[11/07 14:14:11:018      DevCmn.cpp(02762)] :fnDEP_Deinitialize()
[11/07 14:14:11:018      DevCmn.cpp(02771)] :fnDEP_Deinitialize(...):return(0)
[11/07 14:14:11:065      DevCmn.cpp(05672)] :fnVFD_Deinitialize()
[11/07 14:14:11:065      DevCmn.cpp(05679)] :fnVFD_Deinitialize():return(0)
[11/07 14:14:11:081      DevCmn.cpp(05046)] :fnUPS_Deinitialize()
[11/07 14:14:11:081      DevCmn.cpp(05053)] :fnUPS_Deinitialize():return(0)
[11/07 14:14:11:081      DevCmn.cpp(04403)] :fnCMR_Deinitialize()
[11/07 14:14:11:081      DevCmn.cpp(04410)] :fnCMR_Deinitialize():return(0)
[11/07 14:14:11:081      DevCmn.cpp(05557)] :fnSNS_Deinitialize()
[11/07 14:14:11:096      DevCmn.cpp(05564)] :fnSNS_Deinitialize():return(0)
[11/07 14:14:11:096      DevCmn.cpp(05210)] :fnPIN_Deinitialize()
[11/07 14:14:12:221      DevCmn.cpp(05217)] :fnPIN_Deinitialize():return(0)
[11/07 14:14:12:221      DevCmn.cpp(04945)] :fnSPL_Deinitialize()
[11/07 14:14:12:221      DevCmn.cpp(04952)] :fnSPL_Deinitialize():return(0)
[11/07 14:14:12:221      DevCmn.cpp(04692)] :fnLGT_Deinitialize()
[11/07 14:14:12:252      DevCmn.cpp(04699)] :fnLGT_Deinitialize():return(0)
[11/07 14:14:12:252      DevCmn.cpp(04580)] :fnDOR_Deinitialize()
[11/07 14:14:12:346      DevCmn.cpp(04587)] :fnDOR_Deinitialize():return(0)
[11/07 14:14:20:206      DevApl.cpp(01189)] :fnAPL_UnLoadDevice():return
[11/07 14:14:20:206 AtmModeCtrl.cpp(02109)] :TerminateProcess(): nRebootFlag=[1]
[11/07 14:14:20:206 AtmModeCtrl.cpp(02122)] :WindowsShutdownProcess(nRebootFlag[1])
[11/07 14:14:20:206 AtmModeCtrl.cpp(02115)] :TerminateProcess():return
[11/07 14:14:20:206   WinAtmCtl.cpp(01119)] :AtmStart():return
[11/07 14:14:46:796   LoaderDlg.cpp(00137)] :









Loading Loader.exe
[11/07 14:14:46:859   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[11/07 14:14:47:379    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:14:47:395    CESocket.cpp(00101)] :~CCESocket()

[11/07 14:14:47:682    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:14:47:707    CESocket.cpp(00101)] :~CCESocket()

[11/07 14:14:48:546    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:14:48:551   WinAtmCtl.cpp(01638)] :CSuppressOleBusyMsg()
[11/07 14:14:48:551   WinAtmCtl.cpp(01649)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[015EA9D8]
[11/07 14:14:48:552   WinAtmCtl.cpp(00202)] :===============================================================
[11/07 14:14:48:552   WinAtmCtl.cpp(00203)] :===============================================================
[11/07 14:14:48:552   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[11/07 14:14:48:553   WinAtmCtl.cpp(00363)] :OnCreate()
[11/07 14:14:48:599   WinAtmCtl.cpp(00377)] :OnCreate():return
[11/07 14:14:48:599   WinAtmCtl.cpp(01168)] :handle1=[10250]
[11/07 14:14:48:600   WinAtmCtl.cpp(01171)] :handle2=[1024e]
[11/07 14:14:48:633   WinAtmCtl.cpp(00977)] :AtmStart()
[11/07 14:14:48:633      DevCmn.cpp(00045)] :CDevCmn()
[11/07 14:14:48:633      DevCmn.cpp(00053)] :CDevCmn():return
[11/07 14:14:48:634     TranCmn.cpp(00032)] :CTranCmn()
[11/07 14:14:48:634     TranCmn.cpp(00033)] :CTranCmn():return
[11/07 14:14:48:634      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[11/07 14:14:48:693      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : TOUCH
[11/07 14:14:48:694      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 1
[11/07 14:14:48:694  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[11/07 14:14:48:694  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[11/07 14:14:48:695  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[11/07 14:14:48:695  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[11/07 14:14:48:695  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1886496740, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 14:14:48:696  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1886496740, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 14:14:48:696     NetWork.cpp(00095)] :[SetInformation] CtrlType : 1, LineType : 2
[11/07 14:14:48:745 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[11/07 14:14:56:640      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[11/07 14:14:56:640      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1107]
[11/07 14:14:56:640      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[],nStep[1]
[11/07 14:14:56:640      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:56:640      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1107\Log1107.zip]
[11/07 14:14:56:640      DevCmn.cpp(06424)] :BSTrace Log
[11/07 14:14:56:640      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1107\BSTrace1711071414.nwlog]
[11/07 14:14:56:703      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 14:14:56:703      DevCmn.cpp(06444)] :BSTrace Log Trace End
[11/07 14:14:56:703      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log1107\BSTrace1711071414.nwlog],nStep[2]
[11/07 14:14:57:000      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:000      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1107\BSTrace1711071414.nwlog]
[11/07 14:14:57:000      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[11/07 14:14:57:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:015      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[11/07 14:14:57:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[11/07 14:14:57:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:015      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[11/07 14:14:57:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[11/07 14:14:57:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:015      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[11/07 14:14:57:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[11/07 14:14:57:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:015      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[11/07 14:14:57:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[11/07 14:14:57:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:015      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[11/07 14:14:57:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[11/07 14:14:57:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:015      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[11/07 14:14:57:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log07.txt],nStep[2]
[11/07 14:14:57:046      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:046      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log07.txt]
[11/07 14:14:57:046      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi07.txt],nStep[2]
[11/07 14:14:57:046      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:046      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi07.txt]
[11/07 14:14:57:046      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear07.txt],nStep[2]
[11/07 14:14:57:062      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:062      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear07.txt]
[11/07 14:14:57:062      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog07.txt],nStep[2]
[11/07 14:14:57:062      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:062      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog07.txt]
[11/07 14:14:57:062      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace07_#1.txt],nStep[2]
[11/07 14:14:57:062      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:062      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace07_#1.txt]
[11/07 14:14:57:062      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp07.txt],nStep[2]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:14:57:078      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp07.txt]
[11/07 14:14:57:078      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log06.txt],nStep[2]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:14:57:078      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log06.txt]
[11/07 14:14:57:078      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi06.txt],nStep[2]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:14:57:078      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi06.txt]
[11/07 14:14:57:078      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear06.txt],nStep[2]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:14:57:078      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear06.txt]
[11/07 14:14:57:078      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog06.txt],nStep[2]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:14:57:078      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog06.txt]
[11/07 14:14:57:078      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace06_#1.txt],nStep[2]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:14:57:078      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace06_#1.txt]
[11/07 14:14:57:078      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp06.txt],nStep[3]
[11/07 14:14:57:078      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:14:57:078      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp06.txt]
[11/07 14:14:57:078      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[11/07 14:14:57:078      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||ON||OFF||OFF||ON||111111||222222||NHD||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:14:57:078      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||ON||OFF||OFF||ON||111111||222222||NHD||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:14:57:093      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:14:57:093      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:14:57:093      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 14:14:57:093      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 14:14:57:093      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[11/07 14:14:57:093      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[11/07 14:14:57:093      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[11/07 14:14:57:093      DevApl.cpp(00722)] :    BATTERY LOW SHUTDOWN OPTION IS ENABLED
[11/07 14:14:57:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[11/07 14:14:57:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[11/07 14:14:57:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[11/07 14:14:57:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[11/07 14:14:57:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[11/07 14:14:57:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[11/07 14:14:57:093       Sound.cpp(00059)] :OpenDevice()
[11/07 14:14:57:093       Sound.cpp(00076)] :OpenDevice()=[0]
[11/07 14:14:57:093      DevApl.cpp(10595)] :BINLIST Count of BinList =[0], Command=[UPDATE]
[11/07 14:14:57:109      DevApl.cpp(10621)] :BINLIST Count of BININFO1=[2]
[11/07 14:14:57:109      DevApl.cpp(10626)] :BINLIST nCntMain=[2]
[11/07 14:14:57:125      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[2||1234567890||1234567891]
[11/07 14:14:57:125      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=100c4e4d)
[11/07 14:14:57:125      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 14:14:57:125      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[11/07 14:14:57:125      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[11/07 14:14:57:125     TranCmn.cpp(00065)] :SetOwner()
[11/07 14:14:57:125     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[V01.05.00.00]
[11/07 14:14:57:312     TranCmn.cpp(00108)] :AP VERSION = [V01.05.00.00D CD                        ]
[11/07 14:14:57:312     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[11/07 14:14:57:312     TranCmn.cpp(00381)] :Successfully read AID Total Count = [9] => Term_data Exist : Return without creating
[11/07 14:14:57:312     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[11/07 14:14:57:343     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[11/07 14:14:57:359     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[11/07 14:14:57:375     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[11/07 14:14:57:390     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[11/07 14:14:57:390     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[1], nCnt=[2]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[11/07 14:14:57:390     TranCmn.cpp(00287)] :nCount[2]
[11/07 14:14:57:406 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[11/07 14:14:57:437 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[11/07 14:14:57:437     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[11/07 14:14:57:437     TranCmn.cpp(00364)] :SetOwner():return
[11/07 14:14:57:437   WinAtmCtl.cpp(01660)] :Suppress(): pOMF=[015EA9D8]
[11/07 14:14:57:437   WinAtmCtl.cpp(01667)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[11/07 14:14:57:437   WinAtmCtl.cpp(01272)] :strDate=[07], strYYMM=[1711]
[11/07 14:14:57:437      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[11/07 14:14:57:437      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:14:57:437      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[11/07 14:14:57:437      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[11/07 14:14:57:437   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:14:57:437   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:14:57:437   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[11/07 14:14:57:437   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[11/07 14:14:57:437      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:14:57:437      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[11/07 14:14:57:453       Sound.cpp(00148)] :Stop
[11/07 14:14:57:453       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:14:57:453      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:14:57:453      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:14:57:453      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[AP]
[11/07 14:14:57:453      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:14:57:453   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:14:57:453   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:14:57:453      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:14:57:453      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:14:57:453      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[11/07 14:14:57:648      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:14:57:695      DevCmn.cpp(05658)] :fnVFD_Initialize(nPortNum[9], nBaudRate[38400])
[11/07 14:14:57:703      DevCmn.cpp(05665)] :fnVFD_Initialize(...):return(0)
[11/07 14:14:57:703      DevCmn.cpp(04566)] :fnDOR_Initialize()
[11/07 14:15:10:669      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[11/07 14:15:10:669      DevCmn.cpp(04678)] :fnLGT_Initialize()
[11/07 14:15:10:716      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[11/07 14:15:10:716      DevCmn.cpp(04931)] :fnSPL_Initialize()
[11/07 14:15:10:716      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[11/07 14:15:10:716      DevCmn.cpp(05196)] :fnPIN_Initialize()
[11/07 14:15:12:169      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[11/07 14:15:12:169      DevCmn.cpp(05541)] :fnSNS_Initialize()
[11/07 14:15:12:205      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[11/07 14:15:12:205      DevCmn.cpp(04389)] :fnCMR_Initialize()
[11/07 14:15:12:205      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[11/07 14:15:12:206      DevCmn.cpp(05032)] :fnUPS_Initialize()
[11/07 14:15:12:338      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[11/07 14:15:13:541   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:15:13:541   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:15:13:541      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[11/07 14:15:14:479 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:15:14:479      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:15:14:479      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:15:14:479      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:15:14:479      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:15:14:479      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:15:14:479 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[11/07 14:15:14:479      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:15:14:698      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 14:15:14:713      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[11/07 14:15:14:713      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[11/07 14:15:14:713      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[11/07 14:15:14:729 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[189140992], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1958211584]
[11/07 14:15:14:729      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:15:14:729 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:15:14:729 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:15:14:729 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:14:838 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:14:838      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:15:14:854      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0048]
[11/07 14:15:14:854      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[11/07 14:15:14:854      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[11/07 14:15:14:854       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:15:14:854       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:15:14:854       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:15:14:854       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0048']
[11/07 14:15:14:916       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:15:14:916       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:15:14:916       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:15:14:916       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:15:14:916       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:15:14:916       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:15:14:916       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:15:14:916       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:15:14:916       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 11/07/2017 14:15:14 EJ NUMBER = 0048 ] |14:15:14 [Power On]<END_EJRNL>]
[11/07 14:15:14:916       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0048','11','07','2017','14','15','14','System Power On<START_EJRNL>[ 11/07/2017 14:15:14 EJ NUMBER = 0048 ] |14:15:14 [Power On]<END_EJRNL>')]
[11/07 14:15:14:963       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:15:14:963       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:15:14:963       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:15:14:963       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:15:14:963       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:15:14:963       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:15:14:963       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:15:14:963       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[48]
[11/07 14:15:14:963       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [48]
[11/07 14:15:14:963       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[47], m_bRecordCountFinal=[1]
[11/07 14:15:15:010       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [48]
[11/07 14:15:15:010      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 11/07/2017 14:15:14 EJ NUMBER = 0048 ] |14:15:14 [Power On]<END_EJRNL>]
[11/07 14:15:15:010      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 11/07/2017 14:15:14 EJ NUMBER = 0048 ] |14:15:14 [Power On]<END_EJRNL>]
[11/07 14:15:15:010      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:15:15:041      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:15:057 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:15:15:057      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:15:15:057      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:15:15:057      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:15:15:073      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[11/07 14:15:15:073      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[11/07 14:15:15:073      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 14:15:15:073      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[11/07 14:15:15:073      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 14:15:15:073      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:15:15:073      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:15:073      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:15:15:088      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:15:15:104      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:15:15:104      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:15:15:104      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:15:15:151      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:15:15:151      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 14:15:16:995      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 14:15:16:995      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:15:16:995      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 14:15:19:518      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 14:15:19:518      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:15:19:518      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 14:15:30:268      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 14:15:33:409      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[11/07 14:15:36:549      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[11/07 14:15:36:612      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[11/07 14:15:36:612      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 14:15:39:799      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[11/07 14:15:39:799      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[11/07 14:15:39:799      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(1999)
[11/07 14:15:39:799      DevCmn.cpp(03636)] :fnCDU_GetNumberOfDispense(nCSTNo[1]):return(1)
[11/07 14:15:39:799      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[11/07 14:15:39:799      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(2000)
[11/07 14:15:39:815      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 14:15:42:971      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 14:15:42:971      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:42:971      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(2000)
[11/07 14:15:42:971      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(2000)
[11/07 14:15:42:971      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[11/07 14:15:42:971      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 14:15:42:971      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[11/07 14:15:42:971      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[11/07 14:15:42:971      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][0][0][0]
[11/07 14:15:42:971      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[11/07 14:15:42:987      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:15:43:065 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[11/07 14:15:43:065 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[11/07 14:15:43:112      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:15:43:112      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:15:43:143     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[0200]
[11/07 14:15:43:143     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[2.00]
[11/07 14:15:43:190      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APRUN]
[11/07 14:15:43:190      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[11/07 14:15:43:190 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD1]
[11/07 14:15:43:190      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=0, pTime=11
[11/07 14:15:43:190      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 14:15:43:206 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[11/07 14:15:43:377 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:15:43:377 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:15:43:377      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:15:43:377      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:15:43:377 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:15:43:846      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:15:44:049      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:44:065   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:15:44:065   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:15:44:065      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:15:44:065   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:44:065   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:44:081      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:15:44:081      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:15:44:081      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:15:44:081      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:15:44:081      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:15:44:081      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:15:44:081      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:44:081      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:15:44:081      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:15:44:096      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:15:44:127      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:44:127      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:15:44:159      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:15:44:174      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0049]
[11/07 14:15:44:174      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:15:44:174      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:15:44:174       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:15:44:174       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:15:44:174       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:15:44:174       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0049']
[11/07 14:15:44:221       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:15:44:221       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:15:44:221       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:15:44:221       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:15:44:221       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:15:44:221       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:15:44:221       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:15:44:221       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:15:44:221       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:15:44 EJ NUMBER = 0049 ] |14:15:44 [SERVICE MODE]<END_EJRNL>]
[11/07 14:15:44:221       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0049','11','07','2017','14','15','44','Change into service mode<START_EJRNL>[ 11/07/2017 14:15:44 EJ NUMBER = 0049 ] |14:15:44 [SERVICE MODE]<END_EJRNL>')]
[11/07 14:15:44:268       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:15:44:268       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:15:44:268       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:15:44:268       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:15:44:268       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:15:44:268       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:15:44:268       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:15:44:268       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[49]
[11/07 14:15:44:268       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [49]
[11/07 14:15:44:268       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[48], m_bRecordCountFinal=[1]
[11/07 14:15:44:315       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [49]
[11/07 14:15:44:315      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:15:44 EJ NUMBER = 0049 ] |14:15:44 [SERVICE MODE]<END_EJRNL>]
[11/07 14:15:44:315      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:15:44 EJ NUMBER = 0049 ] |14:15:44 [SERVICE MODE]<END_EJRNL>]
[11/07 14:15:44:315      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:15:44:331      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:15:44:487 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:15:44:487      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:15:44:487      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:15:44:487 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:15:44:487 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:15:44:487      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:15:44:487      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:15:44:737      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:15:44:924      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:44:924   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:15:44:924   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:15:44:924      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:15:44:924   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:44:924   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:44:940      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:15:44:940      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:15:44:940      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:15:44:940      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:15:44:940      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:15:44:940      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:15:44:940      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:44:940      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:15:44:940      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:15:44:956      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:15:44:987      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:44:987 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:15:44:987 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:15:44:987 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:44:987 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:44:987 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:15:44:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:15:44:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:15:44:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[11/07 14:15:44:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[11/07 14:15:44:987      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:15:44:987      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:15:44:987      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:15:44:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:15:44:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:15:44:987      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:15:44:987      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:15:44:987       Sound.cpp(00148)] :Stop
[11/07 14:15:44:987       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:15:44:987      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:15:44:987      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:15:44:987      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:15:44:987      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:15:44:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:45:002   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:45:002      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:15:45:002      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:45:018      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:15:46:612      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:15:46:612 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:15:46:690 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[11/07 14:15:46:721 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 14:15:46:768 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[11/07 14:15:46:862 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[11/07 14:15:47:018 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A6
[11/07 14:15:47:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:15:47:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:15:47:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:15:47:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:15:47:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:15:47:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:15:47:018   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[11/07 14:15:47:018   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[11/07 14:15:47:018      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:15:47:018      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:15:47:018      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:15:47:034   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:15:47:034   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:15:47:034   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:15:47:034   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:15:47:034      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:15:47:034      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:15:47:034       Sound.cpp(00148)] :Stop
[11/07 14:15:47:034       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:15:47:034      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:15:47:034      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:15:47:034      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:15:47:034      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:15:47:034   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:47:034   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:47:034      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:15:47:034      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:47:409      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:15:48:987      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:15:49:018 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[11/07 14:15:49:018 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[11/07 14:15:49:034 TranMainProc.cp(00182)] :TranStatus[11]
[11/07 14:15:49:034 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[11/07 14:15:49:034 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[11/07 14:15:49:034     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:15:49:034     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:15:49:034     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:15:49:081     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:15:49:112     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:15:49:112     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:15:49:112 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[11/07 14:15:49:112      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:15:49:331      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:15:49:346 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:15:49:346 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[11/07 14:15:49:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[11/07 14:15:49:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[11/07 14:15:49:362      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:15:49:362      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:15:49:362      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:15:49:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:15:49:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:15:49:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:15:49:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:15:49:362      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:15:49:362      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:15:49:362       Sound.cpp(00148)] :Stop
[11/07 14:15:49:362       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:15:49:362      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:15:49:362      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:15:49:362      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:15:49:362      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:15:49:362   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:49:362   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:49:362      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:15:49:752      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:15:49:752      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:15:50:534 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:15:50:534 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:15:50:534 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:15:50:534 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1011])
[11/07 14:15:50:534 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    88]:return
[11/07 14:15:50:534 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[11/07 14:15:50:534 TranHostProc.cp(01345)] :m_strProtocolType=[STANDARD1], m_KeyMode=[3]
[11/07 14:15:50:549 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:15:50:549 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[11/07 14:15:50:549 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70006700)
[11/07 14:15:50:549 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(23)
[11/07 14:15:50:549 TranHostProc.cp(00254)] :SendLength(23), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:15:50:549 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:15:50:565      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:15:50:581 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:15:50:581     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:15:50:581     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:15:50:581  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:15:50:581       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:15:50:581    CESocket.cpp(00116)] :Create() start

[11/07 14:15:50:581    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:15:50:581    CESocket.cpp(00220)] :Connect() start - socket:1980 address: 192.168.198.199 port: 45000
[11/07 14:15:50:581    CESocket.cpp(00441)] :Connect() OK
[11/07 14:15:50:581    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:15:50:581  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:15:50:581  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:15:50:581  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 88, protocol : STANDARD1
[11/07 14:15:50:581  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:15:50:581    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:15:52:206    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:15:52:206    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:15:52:206       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:15:52:299  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:15:52:299    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:15:52:299       TCPIP.cpp(00091)] :LineSendData
[11/07 14:15:52:299    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:15:52:299    CESocket.cpp(00520)] :Send() end - total sendLen: 26
[11/07 14:15:52:299  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:26]

[11/07 14:15:52:456    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:15:52:456    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:15:52:456       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:15:52:612  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:15:52:612    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:15:52:659    CESocket.cpp(00755)] :receive Data(thread): [len:108]
[11/07 14:15:52:659    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 108
[11/07 14:15:52:659       TCPIP.cpp(00123)] :receive Data(put_data): [len: 108]
[11/07 14:15:52:768  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:15:52:768    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:15:52:768  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[1]

[11/07 14:15:52:768    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:15:52:768       TCPIP.cpp(00091)] :LineSendData
[11/07 14:15:52:768    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:15:52:768    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:15:52:893    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:15:52:893    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:15:52:893       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:15:52:924  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:15:52:924    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:15:52:924       TCPIP.cpp(00091)] :LineSendData
[11/07 14:15:52:924    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:15:52:924    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:15:52:940       TCPIP.cpp(00082)] :line close start
[11/07 14:15:52:940    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:15:52:940    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:15:52:940    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:15:52:940     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:15:52:940    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:15:52:940    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:15:52:940      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:15:52:940   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:15:52:940   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:15:52:940      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:15:52:940 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:15:52:956 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:15:52:956 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:15:52:956  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    881106201715330700050011808CE54F7E2CCC00000355022808CE54F7E2CCC11808CE54F7E2CCC][LEN:105]

[11/07 14:15:52:956     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:15:52:956      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:15:52:956 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[105])
[11/07 14:15:52:956      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:15:52:956   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:15:52:956   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:15:52:956      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:15:52:956 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[88]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[11062017153307]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[000500]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11808CE54F7E2CCC]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[00000355]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[0]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[22808CE54F7E2CCC]
[11/07 14:15:52:956 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[11808CE54F7E2CCC]
[11/07 14:15:52:956 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[10]
[11/07 14:15:53:190 TranHostProc.cp(04029)] :OpenRespMsg.SurchargeAmount_V=[00000355]
[11/07 14:15:53:221 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:15:53:237 TranOutputProc.(02767)] :fnAPP_LoadWorkingKey(), Keymode = [3]
[11/07 14:15:53:237      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:53:237      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K3], szKeyValue[11808CE54F7E2CCC])
[11/07 14:15:53:237      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:53:299      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:15:53:315 TranOutputProc.(02839)] :fnAPP_LoadWorkingKey() K3 KeyLoad Success!
[11/07 14:15:53:315      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:53:315      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K2], szKeyValue[22808CE54F7E2CCC])
[11/07 14:15:53:315      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:53:362      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:15:53:377 TranOutputProc.(02865)] :fnAPP_LoadWorkingKey() K2 KeyLoad Success!
[11/07 14:15:53:377      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:53:377      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK], szKeyName[K1], szKeyValue[11808CE54F7E2CCC])
[11/07 14:15:53:377      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:53:612      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:15:53:627 TranOutputProc.(02893)] :fnAPP_LoadWorkingKey() K1 KeyLoad Success!
[11/07 14:15:53:627 TranHostProc.cp(03105)] :fnAPP_STD1_RecvHost(): TranResult = TRUE
[11/07 14:15:53:627 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:15:53:627 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:15:53:627      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:15:53:846      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:15:53:924 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[11/07 14:15:53:924 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:15:53:924 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:15:53:924 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:15:53:924 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:15:53:971 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:15:53:971 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:15:53:971 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:15:53:971 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:53:971 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:53:971 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:15:53:971 TranMainProc.cp(00096)] :[fnAPP_MainOpenPorc] Send ATM_REPORT_STATUS to RMS agent
[11/07 14:15:53:971 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:15:53:971 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:15:53:971 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:15:53:971 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:15:53:971 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:53:971 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:53:971      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:15:53:971      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:53:971      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:15:53:987      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:15:54:159 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:15:54:159 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:15:54:159 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:54:159 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:54:159 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:15:54:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:15:54:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:15:54:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:15:54:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:15:54:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:15:54:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:15:54:159      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:15:54:159      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:15:54:159      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:15:54:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:15:54:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:15:54:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:15:54:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:15:54:159      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:15:54:159      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:15:54:159       Sound.cpp(00148)] :Stop
[11/07 14:15:54:159       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:15:54:159      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:15:54:159      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:15:54:159      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:15:54:159      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:15:54:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:54:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:54:159      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:15:54:159      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:15:54:159      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:15:55:721 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:15:55:721 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:15:55:721 TranMainProc.cp(00134)] :fnAPP_MainOpenProc:: Return(1)
[11/07 14:15:55:799 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_ONLINE    ], HostStatusSave[HOST_WAITREADY ]
[11/07 14:15:55:877 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:15:55:877      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:15:55:877      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:15:55:877 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:15:55:877 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:15:55:877      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:15:55:877      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:15:56:159      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:15:56:393      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:15:56:393      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:56:393   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:15:56:393   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:15:56:393      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:15:56:393   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:56:393   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:56:409      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:15:56:409      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:15:56:409      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:15:56:409      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:15:56:409      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:15:56:409      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:15:56:409      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:56:409      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:15:56:409      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:15:56:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:15:56:456      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:15:56:456 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:15:56:456 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:15:56:456 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:56:456 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:56:456 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:15:56:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:15:56:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:15:56:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:15:56:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:15:56:456      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:15:56:456      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:15:56:456      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:15:56:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:15:56:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:15:56:456      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:15:56:456      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:15:56:456       Sound.cpp(00148)] :Stop
[11/07 14:15:56:456       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:15:56:456      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:15:56:456      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:15:56:456      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:15:56:456      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:15:56:456   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:56:471   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:56:471      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:15:56:471      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:15:56:471      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:15:58:049      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:15:58:049 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:15:58:143 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:15:58:143 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 6 => A0
[11/07 14:15:58:159      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:15:58:174 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:15:58:174 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[15], m_pDevCmn->m_DelayTime=[0]
[11/07 14:15:58:174 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:15:58:190      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:15:58:190   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:58:190   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:58:206      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:15:58:206      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:15:58:206      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:15:58:221      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:58:221 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:15:58:221 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[15], m_DelayTime=[0]
[11/07 14:15:58:252 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_READY      )
[11/07 14:15:58:252 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 14:15:58:252 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:15:58:284 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:15:58:284 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:15:58:284 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:15:58:284 TranMainProc.cp(01138)] :TranCode:[1011]
[11/07 14:15:58:284 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 14:15:58:284 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:15:58:284 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:15:58:284 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:15:58:393 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:15:58:549 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 14:15:58:549 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 14:15:58:549      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:15:58:549      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:15:58:549      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:15:58:549      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:15:58:549      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:15:58:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:15:58:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:15:58:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:15:58:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:15:58:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:15:58:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:15:58:565     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:15:58:565     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:15:58:565     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:15:58:659     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:15:58:690     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:15:58:690     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:15:58:690 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:15:58:690      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:15:58:924      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:15:58:940 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:15:58:940 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:15:58:940   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:15:58:940   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:15:58:940      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:15:58:940      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:15:58:940      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:15:58:940   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:15:58:940   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:15:58:940   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:15:58:940   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:15:58:940      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:15:58:940      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:15:58:940       Sound.cpp(00148)] :Stop
[11/07 14:15:58:940       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:15:58:940      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:15:58:940      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:15:58:940      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:15:58:940      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:15:58:940   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:15:58:940   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:15:58:940      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:15:59:315      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:15:59:315      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:16:00:096 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:16:00:096 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:16:00:096 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:16:00:096 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:16:00:096 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:16:00:096 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:16:00:096 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:16:00:096 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:16:00:096 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:16:00:096 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:16:00:096 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:16:00:127 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:16:00:127      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:16:00:127      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:16:00:127 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 14:16:00:127 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 14:16:00:127 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 14:16:00:127 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:16:00:127 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:16:00:127 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70006700)
[11/07 14:16:00:127 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:16:00:127 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:16:00:127 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:16:00:143      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:16:00:143 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:16:00:143     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:16:00:143     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:16:00:143  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:16:00:143       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:16:00:143    CESocket.cpp(00116)] :Create() start

[11/07 14:16:00:143    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:16:00:143    CESocket.cpp(00220)] :Connect() start - socket:772 address: 192.168.198.199 port: 45000
[11/07 14:16:00:143    CESocket.cpp(00441)] :Connect() OK
[11/07 14:16:00:143    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:16:00:143  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:16:00:143  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:16:00:143  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:16:00:159  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:16:00:159    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:16:01:784    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:16:01:784    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:16:01:784       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:16:01:877  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:16:01:877    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:16:01:877       TCPIP.cpp(00091)] :LineSendData
[11/07 14:16:01:877    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:16:01:877    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:16:01:877  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:16:02:049    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:16:02:049    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:16:02:049       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:16:02:190  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:16:02:190    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:16:02:268    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:16:02:268    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:16:02:268       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:16:02:346  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:16:02:346    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:16:02:346  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:16:02:346    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:16:02:346       TCPIP.cpp(00091)] :LineSendData
[11/07 14:16:02:346    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:16:02:346    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:16:02:471    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:16:02:471    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:16:02:471       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:16:02:502  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:16:02:502    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:16:02:502       TCPIP.cpp(00091)] :LineSendData
[11/07 14:16:02:502    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:16:02:502    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:16:02:534       TCPIP.cpp(00082)] :line close start
[11/07 14:16:02:534    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:16:02:534    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:16:02:534    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:16:02:534     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:16:02:534    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:16:02:534    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:16:02:534      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:16:02:534   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:16:02:534   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:16:02:534      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:16:02:534 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:16:02:534 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:16:02:534 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:16:02:534  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:16:02:534     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:16:02:534      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:16:02:534 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:16:02:534      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:16:02:534   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:16:02:534   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:16:02:534      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:16:02:534 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:16:02:534 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:16:02:534 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:16:02:534 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:16:02:534 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:16:02:534 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:16:02:534 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:16:02:534 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:16:02:534      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:16:02:784      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:16:02:799 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:16:02:799 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:16:02:799 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:16:02:799 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:16:02:799 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:16:02:846 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:16:02:846 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:16:02:846 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:16:02:846 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:16:02:846 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:16:02:846 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:16:02:846 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:16:02:846 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:16:02:846 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:16:02:846 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:16:02:846      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 14:16:03:002 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:16:03:002      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:16:03:002      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:16:03:002 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:16:03:002 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:16:03:002      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:16:03:002      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:16:03:237      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:16:03:549      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:16:03:565      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:16:03:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:16:03:565   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:16:03:565      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:16:03:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:16:03:565   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:16:03:581      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:16:03:581      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:16:03:581      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:16:03:581      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:16:03:581      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:16:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:16:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:16:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:16:03:581      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:16:03:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:16:03:627      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:16:03:627 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:16:03:627 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:16:03:627 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:16:03:627 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:16:03:627 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:16:03:627      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:16:03:627      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:16:03:627      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:16:03:627      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:16:03:627      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:16:03:627       Sound.cpp(00148)] :Stop
[11/07 14:16:03:627       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:16:03:627      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:16:03:627      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:16:03:627      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:16:03:627      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:16:03:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:16:03:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:16:03:627      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:16:03:627      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:16:03:627      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:16:05:206      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:16:05:206 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:16:05:315 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:16:05:331      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:16:05:331 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 14:16:05:331 TranNmsProc.cpp(00488)] :NmsCashStatus:(0)
[11/07 14:16:05:487 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:16:05:487 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 14:16:05:487 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:16:05:487      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:16:05:487      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:16:05:487   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:16:05:487   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:16:05:487   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:16:05:487   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:16:05:487 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:16:05:487 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:16:05:596 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:16:05:596 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:16:05:596 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:16:05:596 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:16:05:596 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:16:05:596 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:16:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:16:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:16:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:16:05:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:16:05:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:16:05:784 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:16:05:784 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:16:05:784 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:16:05:784 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:16:05:784 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:16:05:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:16:05:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:16:05:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:16:05:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:16:05:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:16:05:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:16:05:784      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:16:05:784      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:16:05:784      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:16:05:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:16:05:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:16:05:784   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:16:05:784   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:16:05:784      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:16:05:784      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:16:05:784       Sound.cpp(00148)] :Stop
[11/07 14:16:05:784       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:16:05:784      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:16:05:784      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:16:05:784      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:16:05:784      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:16:05:791   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:16:05:791   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:16:05:791      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:16:06:127      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:16:06:127      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:16:07:690 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:16:07:690 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:16:07:690      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:16:07:690      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:16:07:706      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:16:07:706      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:16:07:706      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:16:07:706      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:16:07:713      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:16:07:713 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:16:07:713 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:16:07:713 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:16:07:713 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:16:08:002      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:16:08:260      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:16:08:260   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:16:08:260   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:16:08:260 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0xffffffff]
[11/07 14:16:08:323     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:16:08:331     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:16:08:331     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:16:08:331     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:16:08:331     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:16:08:331     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:16:08:377     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:16:08:416     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:16:08:416     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:16:08:416 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:16:08:416 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:16:08:416      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:16:08:416   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:16:08:416   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:16:08:416   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:16:08:416   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:16:08:424 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:16:08:448      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:16:08:448      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:16:08:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:16:08:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:16:08:463      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:16:08:463      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:16:08:463      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:16:08:557      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:16:08:557 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:16:08:557   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:16:08:557   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:16:08:557   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:16:08:557   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:16:08:557   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:16:08:557   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:16:08:557 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:16:08:557      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:16:08:557      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:16:08:573      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:16:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:16:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:16:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:16:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:16:08:573      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:16:08:573      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:16:08:573       Sound.cpp(00148)] :Stop
[11/07 14:16:08:573       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:16:08:573      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:16:08:573      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:16:08:573      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:16:08:573      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:16:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:16:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:16:08:573      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:16:08:573      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:16:08:588      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:16:10:291 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:16:10:291 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:17:38:307 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[1], AtmStatus=[4]
[11/07 14:17:38:307 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[1]
[11/07 14:17:39:479 AtmModeCtrl.cpp(01706)] :Change Mode to Ready by RMS_REPORT_START_COMM||RMS_REPORT_COMMUNICATING
[11/07 14:17:39:495      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:17:39:495 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:17:39:510      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:17:39:510   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:39:510   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:39:526      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:17:39:526      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:17:39:526      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:17:39:541      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:17:39:541 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:17:39:729 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:17:39:729      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:17:39:729      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:17:39:729 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:17:39:729 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:17:39:729      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:17:39:729      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:17:39:979      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:17:40:182      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:17:40:182   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:17:40:182   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:17:40:182      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:17:40:182   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:40:182   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:40:198      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:17:40:198      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:17:40:198      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:17:40:198      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:17:40:588      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:17:40:588      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:17:40:588      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:17:40:588      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:17:40:588      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:17:40:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:17:40:635      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:17:40:635 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:17:40:635 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:17:40:635 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:17:40:635 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:17:40:635 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[01], m_nRMSDisplay=[0]
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:17:40:635      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:17:40:635      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:17:40:635      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:17:40:635      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:17:40:635      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:17:40:635       Sound.cpp(00148)] :Stop
[11/07 14:17:40:635       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:17:40:635      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:17:40:635      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:17:40:635      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:17:40:635      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:17:40:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:40:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:40:635      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:17:40:635      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:17:40:635      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:17:42:213      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:17:42:213 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:17:42:323 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:17:42:338      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:17:42:338 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[1], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:17:42:495 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:17:42:495 AtmModeCtrl.cpp(01282)] :GetMemorySize[14934016]
[11/07 14:17:42:495 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:17:42:495      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:17:42:495      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:17:42:495   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:17:42:495   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:17:42:495   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:17:42:495   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:17:42:495 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:17:42:495 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:17:42:526      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:17:42:526      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:17:42:541      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:17:42:541      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:17:42:541      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:17:42:541      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:17:42:541      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:17:42:541 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:17:42:541 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:17:42:541 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:17:42:541 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:17:42:760      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:17:43:041      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:17:43:041   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:17:43:041   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:17:43:041 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:17:43:088     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:17:43:104     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:17:43:104     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:17:43:104     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:17:43:104     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:17:43:104     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:17:43:135     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:17:43:166     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:17:43:166     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:17:43:166 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:17:43:166 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:17:43:166      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:17:43:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:17:43:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:17:43:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:17:43:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:17:43:166 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:17:43:182      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:17:43:182      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:17:43:182   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:43:182   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:43:198      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:17:43:198      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:17:43:198      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:17:43:245      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:17:43:245 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:17:43:245   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:17:43:245   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:17:43:245   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:17:43:245   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:17:43:245   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:17:43:245   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:17:43:245 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:17:43:245      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:17:43:245      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:17:43:245      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:17:43:245   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:17:43:245   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:17:43:245   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:17:43:245   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:17:43:245      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:17:43:245      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:17:43:245       Sound.cpp(00148)] :Stop
[11/07 14:17:43:245       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:17:43:245      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:17:43:245      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:17:43:245      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:17:43:245      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:17:43:245   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:43:245   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:43:245      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:17:43:245      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:17:43:620      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:17:45:276 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:17:45:276 TranNmsProc.cpp(02191)] :fnAPP_CheckRMSStatus() m_ModemStatus=[2][0000000]
[11/07 14:17:45:432      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:17:45:432      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:17:45:432      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:17:45:432      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:17:45:432      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:17:45:432      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:17:45:448      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:17:45:448      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:17:45:448      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:17:45:448      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:17:45:448      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:17:45:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:17:45:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:17:45:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING...    ])
[11/07 14:17:45:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING...    ]
[11/07 14:17:45:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:17:45:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:17:45:448      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:17:45:448      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:17:45:448      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:17:45:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:17:45:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:17:45:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:17:45:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:17:45:448      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:17:45:448      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:17:45:448       Sound.cpp(00148)] :Stop
[11/07 14:17:45:448       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:17:45:448      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:17:45:448      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:17:45:448      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:17:45:448      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:17:45:448   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:45:448   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:45:448      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:17:45:870      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:17:45:870      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:17:46:651 TranNmsProc.cpp(02217)] :m_RMSParameter=[80]
[11/07 14:17:46:807 AtmModeCtrl.cpp(02035)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[HOST_OFFLINE   ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:17:46:807      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:17:46:838      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0050]
[11/07 14:17:46:838      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SF]
[11/07 14:17:46:838      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SF]
[11/07 14:17:46:838       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:17:46:838       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:17:46:838       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:17:46:838       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0050']
[11/07 14:17:46:885       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:17:46:885       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:17:46:885       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:17:46:885       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:17:46:885       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:17:46:885       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:17:46:885       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:17:46:885       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:17:46:885       DevDB.cpp(01106)] :pEJnl->Data [System Reboot<START_EJRNL>[ 11/07/2017 14:17:46 EJ NUMBER = 0050 ] |14:17:46 [REBOOT SYSTEM]<END_EJRNL>]
[11/07 14:17:46:885       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0103','SF','0050','11','07','2017','14','17','46','System Reboot<START_EJRNL>[ 11/07/2017 14:17:46 EJ NUMBER = 0050 ] |14:17:46 [REBOOT SYSTEM]<END_EJRNL>')]
[11/07 14:17:46:932       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:17:46:932       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:17:46:932       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:17:46:932       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:17:46:932       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:17:46:932       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:17:46:932       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:17:46:932       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[50]
[11/07 14:17:46:932       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [50]
[11/07 14:17:46:932       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[49], m_bRecordCountFinal=[1]
[11/07 14:17:46:979       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [50]
[11/07 14:17:46:979      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Reboot<START_EJRNL>[ 11/07/2017 14:17:46 EJ NUMBER = 0050 ] |14:17:46 [REBOOT SYSTEM]<END_EJRNL>]
[11/07 14:17:46:979      DevApl.cpp(06316)] :strTempArray0=[System Reboot] / strTempArray1=[[ 11/07/2017 14:17:46 EJ NUMBER = 0050 ] |14:17:46 [REBOOT SYSTEM]<END_EJRNL>]
[11/07 14:17:46:979      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:17:46:979      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[2], nPinInputMode=[1]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:46:979      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:17:46:979      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:17:46:979      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:17:46:979 AtmModeCtrl.cpp(02076)] :TerminateProcess(): nRebootFlag=[1]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:17:46:979      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:17:46:979      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:17:46:979      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:17:46:979      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:17:46:979      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:17:46:979       Sound.cpp(00148)] :Stop
[11/07 14:17:46:979       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:17:46:979      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:17:46:979      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:17:46:979      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:17:46:979      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:17:46:979   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:46:979   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:46:979      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:17:46:979      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:17:46:979      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:17:47:213      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:17:47:604      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:17:47:620      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:17:47:620   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:17:47:620   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:17:47:620      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:17:47:620   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:17:47:620   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:17:47:635      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:17:47:635      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:17:47:635      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:17:47:635      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:17:47:635      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:17:47:635      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:17:47:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:17:47:643      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:17:47:651      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:17:47:651      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:17:47:651      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:17:47:659      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:17:47:659      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:17:47:659      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:17:47:659      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:17:47:659      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:17:47:682      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[||ON||OFF||OFF||ON||111111||222222||555555||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:17:47:682      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||ON||OFF||OFF||ON||111111||222222||NHD||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:17:47:682      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APSTART]
[11/07 14:17:47:682      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:17:47:682      DevApl.cpp(01123)] :fnAPL_UnLoadDevice()
[11/07 14:17:47:682       Sound.cpp(00082)] :CloseDevice()
[11/07 14:17:47:682       Sound.cpp(00148)] :Stop
[11/07 14:17:47:682       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:17:47:682       Sound.cpp(00090)] :CloseDevice()=[0]
[11/07 14:17:47:682      DevCmn.cpp(04162)] :fnPBM_Deinitialize()
[11/07 14:17:47:682      DevCmn.cpp(04171)] :fnPBM_Deinitialize():return(0)
[11/07 14:17:47:682      DevCmn.cpp(03797)] :fnCDU_Deinitialize()
[11/07 14:17:48:713      DevCmn.cpp(03806)] :fnCDU_Deinitialize():return(0)
[11/07 14:17:48:713      DevCmn.cpp(01089)] :fnMCU_Deinitialize()
[11/07 14:17:49:659      DevCmn.cpp(01096)] :fnMCU_Deinitialize():return(0)
[11/07 14:17:49:659      DevCmn.cpp(00699)] :fnSPR_Deinitialize()
[11/07 14:17:53:088      DevCmn.cpp(00708)] :fnSPR_Deinitialize():return(0)
[11/07 14:17:53:088      DevCmn.cpp(00431)] :fnJPR_Deinitialize()
[11/07 14:17:53:088      DevCmn.cpp(00440)] :fnJPR_Deinitialize():return(0)
[11/07 14:17:53:088      DevCmn.cpp(02762)] :fnDEP_Deinitialize()
[11/07 14:17:53:088      DevCmn.cpp(02771)] :fnDEP_Deinitialize(...):return(0)
[11/07 14:17:53:135      DevCmn.cpp(05672)] :fnVFD_Deinitialize()
[11/07 14:17:53:135      DevCmn.cpp(05679)] :fnVFD_Deinitialize():return(0)
[11/07 14:17:53:151      DevCmn.cpp(05046)] :fnUPS_Deinitialize()
[11/07 14:17:53:151      DevCmn.cpp(05053)] :fnUPS_Deinitialize():return(0)
[11/07 14:17:53:151      DevCmn.cpp(04403)] :fnCMR_Deinitialize()
[11/07 14:17:53:151      DevCmn.cpp(04410)] :fnCMR_Deinitialize():return(0)
[11/07 14:17:53:151      DevCmn.cpp(05557)] :fnSNS_Deinitialize()
[11/07 14:17:53:166      DevCmn.cpp(05564)] :fnSNS_Deinitialize():return(0)
[11/07 14:17:53:166      DevCmn.cpp(05210)] :fnPIN_Deinitialize()
[11/07 14:17:54:245      DevCmn.cpp(05217)] :fnPIN_Deinitialize():return(0)
[11/07 14:17:54:245      DevCmn.cpp(04945)] :fnSPL_Deinitialize()
[11/07 14:17:54:245      DevCmn.cpp(04952)] :fnSPL_Deinitialize():return(0)
[11/07 14:17:54:245      DevCmn.cpp(04692)] :fnLGT_Deinitialize()
[11/07 14:17:54:291      DevCmn.cpp(04699)] :fnLGT_Deinitialize():return(0)
[11/07 14:17:54:291      DevCmn.cpp(04580)] :fnDOR_Deinitialize()
[11/07 14:17:54:370      DevCmn.cpp(04587)] :fnDOR_Deinitialize():return(0)
[11/07 14:18:02:229      DevApl.cpp(01189)] :fnAPL_UnLoadDevice():return
[11/07 14:18:02:229 AtmModeCtrl.cpp(02109)] :TerminateProcess(): nRebootFlag=[1]
[11/07 14:18:02:229 AtmModeCtrl.cpp(02122)] :WindowsShutdownProcess(nRebootFlag[1])
[11/07 14:18:02:245 AtmModeCtrl.cpp(02115)] :TerminateProcess():return
[11/07 14:18:02:245   WinAtmCtl.cpp(01119)] :AtmStart():return
[11/07 14:18:31:859   LoaderDlg.cpp(00137)] :









Loading Loader.exe
[11/07 14:18:31:890   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[11/07 14:18:32:579    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:18:32:588    CESocket.cpp(00101)] :~CCESocket()

[11/07 14:18:32:738    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:18:32:768    CESocket.cpp(00101)] :~CCESocket()

[11/07 14:18:34:072    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:18:34:077   WinAtmCtl.cpp(01638)] :CSuppressOleBusyMsg()
[11/07 14:18:34:077   WinAtmCtl.cpp(01649)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[014EA9D8]
[11/07 14:18:34:077   WinAtmCtl.cpp(00202)] :===============================================================
[11/07 14:18:34:077   WinAtmCtl.cpp(00203)] :===============================================================
[11/07 14:18:34:077   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[11/07 14:18:34:078   WinAtmCtl.cpp(00363)] :OnCreate()
[11/07 14:18:34:159   WinAtmCtl.cpp(00377)] :OnCreate():return
[11/07 14:18:34:160   WinAtmCtl.cpp(01168)] :handle1=[10252]
[11/07 14:18:34:160   WinAtmCtl.cpp(01171)] :handle2=[10250]
[11/07 14:18:34:214   WinAtmCtl.cpp(00977)] :AtmStart()
[11/07 14:18:34:215      DevCmn.cpp(00045)] :CDevCmn()
[11/07 14:18:34:215      DevCmn.cpp(00053)] :CDevCmn():return
[11/07 14:18:34:215     TranCmn.cpp(00032)] :CTranCmn()
[11/07 14:18:34:215     TranCmn.cpp(00033)] :CTranCmn():return
[11/07 14:18:34:215      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[11/07 14:18:34:300      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : TOUCH
[11/07 14:18:34:300      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 1
[11/07 14:18:34:300  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[11/07 14:18:34:301  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[11/07 14:18:34:301  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[11/07 14:18:34:301  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[11/07 14:18:34:302  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1878697956, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 14:18:34:302  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1878697956, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 14:18:34:303     NetWork.cpp(00095)] :[SetInformation] CtrlType : 1, LineType : 2
[11/07 14:18:34:352 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[11/07 14:18:42:400      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[11/07 14:18:42:400      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1107]
[11/07 14:18:42:400      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[],nStep[1]
[11/07 14:18:42:400      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:400      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1107\Log1107.zip]
[11/07 14:18:42:400      DevCmn.cpp(06424)] :BSTrace Log
[11/07 14:18:42:400      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1107\BSTrace1711071418.nwlog]
[11/07 14:18:42:478      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 14:18:42:478      DevCmn.cpp(06444)] :BSTrace Log Trace End
[11/07 14:18:42:478      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log1107\BSTrace1711071418.nwlog],nStep[2]
[11/07 14:18:42:759      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:759      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1107\BSTrace1711071418.nwlog]
[11/07 14:18:42:759      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[11/07 14:18:42:775      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:775      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[11/07 14:18:42:775      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[11/07 14:18:42:775      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:775      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[11/07 14:18:42:775      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[11/07 14:18:42:775      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:775      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[11/07 14:18:42:791      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[11/07 14:18:42:791      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:791      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[11/07 14:18:42:791      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[11/07 14:18:42:791      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:791      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[11/07 14:18:42:791      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[11/07 14:18:42:791      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:791      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[11/07 14:18:42:791      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log07.txt],nStep[2]
[11/07 14:18:42:822      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:822      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log07.txt]
[11/07 14:18:42:822      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi07.txt],nStep[2]
[11/07 14:18:42:822      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:822      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi07.txt]
[11/07 14:18:42:822      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear07.txt],nStep[2]
[11/07 14:18:42:837      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:837      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear07.txt]
[11/07 14:18:42:837      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog07.txt],nStep[2]
[11/07 14:18:42:837      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:837      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog07.txt]
[11/07 14:18:42:837      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace07_#1.txt],nStep[2]
[11/07 14:18:42:837      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:837      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace07_#1.txt]
[11/07 14:18:42:837      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp07.txt],nStep[2]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:18:42:853      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp07.txt]
[11/07 14:18:42:853      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log06.txt],nStep[2]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:18:42:853      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log06.txt]
[11/07 14:18:42:853      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi06.txt],nStep[2]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:18:42:853      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi06.txt]
[11/07 14:18:42:853      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear06.txt],nStep[2]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:18:42:853      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear06.txt]
[11/07 14:18:42:853      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog06.txt],nStep[2]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:18:42:853      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog06.txt]
[11/07 14:18:42:853      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace06_#1.txt],nStep[2]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:18:42:853      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace06_#1.txt]
[11/07 14:18:42:853      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp06.txt],nStep[3]
[11/07 14:18:42:853      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:18:42:853      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp06.txt]
[11/07 14:18:42:853      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[11/07 14:18:42:853      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||ON||OFF||OFF||ON||111111||222222||NHD||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:18:42:853      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||ON||OFF||OFF||ON||111111||222222||NHD||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:18:42:853      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:18:42:853      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:18:42:853      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 14:18:42:853      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 14:18:42:853      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[11/07 14:18:42:853      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[11/07 14:18:42:853      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[11/07 14:18:42:853      DevApl.cpp(00722)] :    BATTERY LOW SHUTDOWN OPTION IS ENABLED
[11/07 14:18:42:853   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[11/07 14:18:42:853   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[11/07 14:18:42:869   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[11/07 14:18:42:869   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[11/07 14:18:42:869   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[11/07 14:18:42:869   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[11/07 14:18:42:869       Sound.cpp(00059)] :OpenDevice()
[11/07 14:18:42:869       Sound.cpp(00076)] :OpenDevice()=[0]
[11/07 14:18:42:869      DevApl.cpp(10595)] :BINLIST Count of BinList =[2], Command=[UPDATE]
[11/07 14:18:42:884      DevApl.cpp(10621)] :BINLIST Count of BININFO1=[2]
[11/07 14:18:42:884      DevApl.cpp(10626)] :BINLIST nCntMain=[2]
[11/07 14:18:42:900      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[2||1234567890||1234567891]
[11/07 14:18:42:900      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=100c4e4d)
[11/07 14:18:42:900      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 14:18:42:900      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[11/07 14:18:42:900      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[11/07 14:18:42:900     TranCmn.cpp(00065)] :SetOwner()
[11/07 14:18:42:900     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[V01.05.00.00]
[11/07 14:18:43:119     TranCmn.cpp(00108)] :AP VERSION = [V01.05.00.00D CD                        ]
[11/07 14:18:43:119     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[11/07 14:18:43:134     TranCmn.cpp(00381)] :Successfully read AID Total Count = [9] => Term_data Exist : Return without creating
[11/07 14:18:43:134     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[11/07 14:18:43:150     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[11/07 14:18:43:166     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[11/07 14:18:43:197     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[11/07 14:18:43:212     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[11/07 14:18:43:212     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[1], nCnt=[2]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[11/07 14:18:43:212     TranCmn.cpp(00287)] :nCount[2]
[11/07 14:18:43:228 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[11/07 14:18:43:259 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[11/07 14:18:43:259     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[11/07 14:18:43:259     TranCmn.cpp(00364)] :SetOwner():return
[11/07 14:18:43:259   WinAtmCtl.cpp(01660)] :Suppress(): pOMF=[014EA9D8]
[11/07 14:18:43:259   WinAtmCtl.cpp(01667)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[11/07 14:18:43:259   WinAtmCtl.cpp(01272)] :strDate=[07], strYYMM=[1711]
[11/07 14:18:43:259      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[11/07 14:18:43:259      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:18:43:275      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[11/07 14:18:43:275      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[11/07 14:18:43:275   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:18:43:275   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:18:43:275   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[11/07 14:18:43:275   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[11/07 14:18:43:275      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:18:43:275      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[11/07 14:18:43:275       Sound.cpp(00148)] :Stop
[11/07 14:18:43:275       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:18:43:275      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:18:43:275      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:18:43:275      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[AP]
[11/07 14:18:43:275      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:18:43:275   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:18:43:275   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:18:43:275      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:18:43:275      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:18:43:275      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[11/07 14:18:43:478      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:18:43:525      DevCmn.cpp(05658)] :fnVFD_Initialize(nPortNum[9], nBaudRate[38400])
[11/07 14:18:43:525      DevCmn.cpp(05665)] :fnVFD_Initialize(...):return(0)
[11/07 14:18:43:525      DevCmn.cpp(04566)] :fnDOR_Initialize()
[11/07 14:18:56:299      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[11/07 14:18:56:299      DevCmn.cpp(04678)] :fnLGT_Initialize()
[11/07 14:18:56:331      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[11/07 14:18:56:346      DevCmn.cpp(04931)] :fnSPL_Initialize()
[11/07 14:18:56:346      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[11/07 14:18:56:346      DevCmn.cpp(05196)] :fnPIN_Initialize()
[11/07 14:18:57:799      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[11/07 14:18:57:799      DevCmn.cpp(05541)] :fnSNS_Initialize()
[11/07 14:18:57:849      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[11/07 14:18:57:849      DevCmn.cpp(04389)] :fnCMR_Initialize()
[11/07 14:18:57:849      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[11/07 14:18:57:849      DevCmn.cpp(05032)] :fnUPS_Initialize()
[11/07 14:18:57:876      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[11/07 14:18:59:187   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:18:59:187   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:18:59:187      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[11/07 14:19:00:125 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:19:00:125      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:19:00:125      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:19:00:125      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:19:00:125      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:19:00:125      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:19:00:125 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[11/07 14:19:00:125      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:19:00:359      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 14:19:00:359      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[11/07 14:19:00:375      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[11/07 14:19:00:375      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[11/07 14:19:00:406 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[189140992], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1958211584]
[11/07 14:19:00:406      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:19:00:406 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:19:00:406 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:19:00:406 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:00:515 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:00:515      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:19:00:562      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0051]
[11/07 14:19:00:562      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[11/07 14:19:00:562      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[11/07 14:19:00:562       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:19:00:562       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:19:00:562       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:19:00:562       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0051']
[11/07 14:19:00:625       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:19:00:625       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:19:00:625       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:19:00:625       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:19:00:625       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:19:00:625       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:19:00:625       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:19:00:625       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:19:00:625       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 11/07/2017 14:19:00 EJ NUMBER = 0051 ] |14:19:00 [Power On]<END_EJRNL>]
[11/07 14:19:00:625       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0051','11','07','2017','14','19','00','System Power On<START_EJRNL>[ 11/07/2017 14:19:00 EJ NUMBER = 0051 ] |14:19:00 [Power On]<END_EJRNL>')]
[11/07 14:19:00:671       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:19:00:671       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:19:00:671       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:19:00:671       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:19:00:671       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:19:00:671       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:19:00:671       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:19:00:671       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[51]
[11/07 14:19:00:671       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [51]
[11/07 14:19:00:671       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[50], m_bRecordCountFinal=[1]
[11/07 14:19:00:718       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [51]
[11/07 14:19:00:718      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 11/07/2017 14:19:00 EJ NUMBER = 0051 ] |14:19:00 [Power On]<END_EJRNL>]
[11/07 14:19:00:718      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 11/07/2017 14:19:00 EJ NUMBER = 0051 ] |14:19:00 [Power On]<END_EJRNL>]
[11/07 14:19:00:718      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:19:00:750      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:00:750 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:19:00:750      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:19:00:750      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:19:00:750      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:19:00:781      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[11/07 14:19:00:781      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[11/07 14:19:00:781      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 14:19:00:781      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[11/07 14:19:00:781      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 14:19:00:781      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:00:781      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:00:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:00:812      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:00:812      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:00:812      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:19:00:812      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:19:00:812      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:19:00:812      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:19:00:875      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:19:00:875      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 14:19:02:734      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 14:19:02:734      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:19:02:734      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 14:19:05:289      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 14:19:05:289      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:19:05:289      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 14:19:16:460      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 14:19:19:601      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[11/07 14:19:22:742      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[11/07 14:19:22:804      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[11/07 14:19:22:804      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 14:19:25:992      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[11/07 14:19:25:992      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[11/07 14:19:25:992      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(1999)
[11/07 14:19:25:992      DevCmn.cpp(03636)] :fnCDU_GetNumberOfDispense(nCSTNo[1]):return(1)
[11/07 14:19:25:992      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[11/07 14:19:25:992      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(2000)
[11/07 14:19:26:007      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 14:19:29:164      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 14:19:29:164      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:29:164      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(2000)
[11/07 14:19:29:164      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(2000)
[11/07 14:19:29:164      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[11/07 14:19:29:164      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 14:19:29:164      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[11/07 14:19:29:164      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[11/07 14:19:29:164      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][0][0][0]
[11/07 14:19:29:164      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[11/07 14:19:29:179      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:19:29:304 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[11/07 14:19:29:304 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[11/07 14:19:29:351      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:19:29:367      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:29:382     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:19:29:382     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:19:29:429      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APRUN]
[11/07 14:19:29:429      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[11/07 14:19:29:429 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD1]
[11/07 14:19:29:429      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=0, pTime=11
[11/07 14:19:29:429      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 14:19:29:460 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[11/07 14:19:29:632 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:19:29:632 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:19:29:632      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:19:29:632      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:19:29:632 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:19:29:835      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:19:30:054      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:30:054   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:19:30:054   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:19:30:054      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:19:30:054   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:30:054   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:30:070      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:19:30:070      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:19:30:070      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:19:30:070      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:30:070      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:30:070      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:30:070      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:30:070      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:30:070      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:30:085      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:30:117      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:30:117      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:19:30:148      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:19:30:164      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0052]
[11/07 14:19:30:164      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:19:30:164      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:19:30:164       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:19:30:164       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:19:30:164       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:19:30:164       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0052']
[11/07 14:19:30:210       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:19:30:210       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:19:30:210       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:19:30:210       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:19:30:210       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:19:30:210       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:19:30:210       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:19:30:210       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:19:30:210       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:19:30 EJ NUMBER = 0052 ] |14:19:30 [SERVICE MODE]<END_EJRNL>]
[11/07 14:19:30:210       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0052','11','07','2017','14','19','30','Change into service mode<START_EJRNL>[ 11/07/2017 14:19:30 EJ NUMBER = 0052 ] |14:19:30 [SERVICE MODE]<END_EJRNL>')]
[11/07 14:19:30:257       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:19:30:257       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:19:30:257       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:19:30:257       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:19:30:257       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:19:30:257       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:19:30:257       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:19:30:257       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[52]
[11/07 14:19:30:257       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [52]
[11/07 14:19:30:257       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[51], m_bRecordCountFinal=[1]
[11/07 14:19:30:304       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [52]
[11/07 14:19:30:304      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:19:30 EJ NUMBER = 0052 ] |14:19:30 [SERVICE MODE]<END_EJRNL>]
[11/07 14:19:30:304      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:19:30 EJ NUMBER = 0052 ] |14:19:30 [SERVICE MODE]<END_EJRNL>]
[11/07 14:19:30:304      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:19:30:320      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:30:476 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:19:30:476      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:19:30:476      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:19:30:476 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:19:30:476 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:19:30:476      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:19:30:476      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:19:30:710      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:19:30:960      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:30:960   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:19:30:960   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:19:30:960      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:19:30:960   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:30:960   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:30:976      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:19:30:976      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:19:30:976      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:19:30:976      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:30:976      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:30:976      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:30:976      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:30:976      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:30:976      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:30:992      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:31:023      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:31:023 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:31:023 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:31:023 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:31:023 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:31:023 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[11/07 14:19:31:023      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:19:31:023      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:31:023      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:19:31:023      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:31:023      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:19:31:023       Sound.cpp(00148)] :Stop
[11/07 14:19:31:023       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:31:023      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:31:023      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:31:023      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:31:023      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:19:31:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:31:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:31:039      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:19:31:039      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:31:054      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:19:32:648      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:19:32:648 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:19:32:726 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[11/07 14:19:32:742 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 14:19:32:804 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[11/07 14:19:32:882 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[11/07 14:19:33:054 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A6
[11/07 14:19:33:054   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:19:33:054   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:19:33:054   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:19:33:054   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:19:33:054   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:19:33:070   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:19:33:070   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[11/07 14:19:33:070   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[11/07 14:19:33:070      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:19:33:070      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:33:070      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:33:070   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:33:070   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:33:070   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:19:33:070   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:19:33:070      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:33:070      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:19:33:070       Sound.cpp(00148)] :Stop
[11/07 14:19:33:070       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:33:070      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:33:070      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:33:070      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:33:070      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:19:33:070   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:33:070   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:33:070      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:19:33:070      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:33:445      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:19:35:007      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:35:039 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[11/07 14:19:35:039 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[11/07 14:19:35:070 TranMainProc.cp(00182)] :TranStatus[11]
[11/07 14:19:35:070 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[11/07 14:19:35:070 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[11/07 14:19:35:070     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:19:35:070     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:19:35:070     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:19:35:117     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:19:35:148     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:19:35:148     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:19:35:148 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[11/07 14:19:35:148      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:19:35:367      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:19:35:382 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:19:35:382 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[11/07 14:19:35:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[11/07 14:19:35:398   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[11/07 14:19:35:398      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:19:35:398      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:19:35:398      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:19:35:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:35:398   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:35:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:19:35:398   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:19:35:398      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:35:398      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:19:35:398       Sound.cpp(00148)] :Stop
[11/07 14:19:35:398       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:35:398      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:35:398      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:35:398      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:35:398      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:19:35:398   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:35:398   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:35:398      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:35:789      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:35:789      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:19:36:570 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:19:36:570 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:19:36:570 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:19:36:570 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1011])
[11/07 14:19:36:570 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    88]:return
[11/07 14:19:36:570 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[11/07 14:19:36:570 TranHostProc.cp(01345)] :m_strProtocolType=[STANDARD1], m_KeyMode=[3]
[11/07 14:19:36:570 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:19:36:570 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[11/07 14:19:36:570 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71317420)
[11/07 14:19:36:570 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(23)
[11/07 14:19:36:570 TranHostProc.cp(00254)] :SendLength(23), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:19:36:570 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:19:36:601      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:36:601 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:19:36:617     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:19:36:617     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:19:36:617  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:19:36:617       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:19:36:617    CESocket.cpp(00116)] :Create() start

[11/07 14:19:36:617    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:19:36:617    CESocket.cpp(00220)] :Connect() start - socket:2032 address: 192.168.198.199 port: 45000
[11/07 14:19:36:617    CESocket.cpp(00441)] :Connect() OK
[11/07 14:19:36:617    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:19:36:617  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:19:36:617  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:19:36:617  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 88, protocol : STANDARD1
[11/07 14:19:36:617  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:19:36:617    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:19:38:242    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:19:38:242    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:19:38:242       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:19:38:335  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:19:38:335    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:38:335       TCPIP.cpp(00091)] :LineSendData
[11/07 14:19:38:335    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:19:38:335    CESocket.cpp(00520)] :Send() end - total sendLen: 26
[11/07 14:19:38:335  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:26]

[11/07 14:19:38:507    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:19:38:507    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:19:38:507       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:19:38:648  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:19:38:648    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:38:710    CESocket.cpp(00755)] :receive Data(thread): [len:108]
[11/07 14:19:38:710    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 108
[11/07 14:19:38:710       TCPIP.cpp(00123)] :receive Data(put_data): [len: 108]
[11/07 14:19:38:804  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:19:38:804    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:38:804  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[5]

[11/07 14:19:38:804    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:38:804       TCPIP.cpp(00091)] :LineSendData
[11/07 14:19:38:804    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:19:38:804    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:19:38:929    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:19:38:929    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:19:38:929       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:19:38:960  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:19:38:960    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:19:38:960       TCPIP.cpp(00091)] :LineSendData
[11/07 14:19:38:960    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:19:38:960    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:19:38:976       TCPIP.cpp(00082)] :line close start
[11/07 14:19:38:976    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:19:38:976    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:19:38:976    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:19:38:976     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:19:38:976    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:19:38:976    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:19:38:976      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:19:38:976   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:19:38:976   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:19:38:976      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:19:38:976 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:19:38:976 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:19:38:976 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:19:38:976  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    881106201715365300050011808CE54F7E2CCC00000355022808CE54F7E2CCC11808CE54F7E2CCC][LEN:105]

[11/07 14:19:38:976     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:19:38:976      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:19:38:976 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[105])
[11/07 14:19:38:976      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:19:38:976   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:19:38:976   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:19:38:976      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:19:38:976 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[88]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[11062017153653]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[000500]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11808CE54F7E2CCC]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[00000355]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[0]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[22808CE54F7E2CCC]
[11/07 14:19:38:976 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[11808CE54F7E2CCC]
[11/07 14:19:38:976 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[10]
[11/07 14:19:39:242 TranHostProc.cp(04029)] :OpenRespMsg.SurchargeAmount_V=[00000355]
[11/07 14:19:39:273 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:19:39:273 TranOutputProc.(02767)] :fnAPP_LoadWorkingKey(), Keymode = [3]
[11/07 14:19:39:289      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:39:289      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K3], szKeyValue[11808CE54F7E2CCC])
[11/07 14:19:39:289      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:39:335      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:19:39:351 TranOutputProc.(02839)] :fnAPP_LoadWorkingKey() K3 KeyLoad Success!
[11/07 14:19:39:351      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:39:351      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K2], szKeyValue[22808CE54F7E2CCC])
[11/07 14:19:39:351      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:39:398      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:19:39:414 TranOutputProc.(02865)] :fnAPP_LoadWorkingKey() K2 KeyLoad Success!
[11/07 14:19:39:414      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:39:414      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK], szKeyName[K1], szKeyValue[11808CE54F7E2CCC])
[11/07 14:19:39:414      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:39:648      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:19:39:664 TranOutputProc.(02893)] :fnAPP_LoadWorkingKey() K1 KeyLoad Success!
[11/07 14:19:39:664 TranHostProc.cp(03105)] :fnAPP_STD1_RecvHost(): TranResult = TRUE
[11/07 14:19:39:664 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:19:39:664 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:19:39:664      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:19:39:851      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:19:39:882 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[11/07 14:19:39:882 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:19:39:882 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:19:39:882 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:19:39:882 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:19:39:929 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:19:39:929 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:39:929 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:39:929 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:39:929 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:39:929 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:19:39:929 TranMainProc.cp(00096)] :[fnAPP_MainOpenPorc] Send ATM_REPORT_STATUS to RMS agent
[11/07 14:19:39:929 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:19:39:929 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:19:39:929 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:39:929 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:39:929 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:39:929 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:39:929      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:39:929      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:39:929      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:39:945      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:40:117 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:19:40:117 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:19:40:117 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:40:117 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:40:117 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:19:40:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:19:40:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:19:40:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:19:40:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:19:40:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:19:40:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:19:40:117      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:19:40:117      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:19:40:117      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:19:40:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:40:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:40:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:19:40:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:19:40:117      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:40:117      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:19:40:117       Sound.cpp(00148)] :Stop
[11/07 14:19:40:117       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:40:117      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:40:117      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:40:117      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:40:117      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:19:40:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:40:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:40:117      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:40:117      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:40:117      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:19:41:679 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:19:41:679 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:19:41:679 TranMainProc.cp(00134)] :fnAPP_MainOpenProc:: Return(1)
[11/07 14:19:41:757 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_ONLINE    ], HostStatusSave[HOST_WAITREADY ]
[11/07 14:19:41:835 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:19:41:835      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:19:41:835      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:19:41:835 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:19:41:835 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:19:41:835      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:19:41:835      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:19:42:023      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:19:42:242      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:42:242      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:42:242   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:19:42:242   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:19:42:242      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:19:42:242   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:42:242   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:42:257      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:19:42:257      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:19:42:257      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:19:42:257      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:42:257      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:42:257      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:42:257      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:42:257      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:42:257      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:42:273      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:42:304      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:42:304 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:42:304 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:42:304 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:42:304 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:42:304 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:19:42:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:19:42:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:19:42:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:19:42:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:19:42:304      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:19:42:304      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:42:304      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:42:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:19:42:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:19:42:304      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:42:304      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:19:42:304       Sound.cpp(00148)] :Stop
[11/07 14:19:42:304       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:42:304      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:42:304      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:42:304      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:42:304      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:19:42:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:42:320   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:42:320      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:19:42:320      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:42:320      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:19:43:882      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:19:43:882 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:19:43:992 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:19:43:992 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 6 => A0
[11/07 14:19:44:007      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:44:007 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:19:44:007 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[15], m_pDevCmn->m_DelayTime=[0]
[11/07 14:19:44:007 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:19:44:023      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:19:44:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:44:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:44:039      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:19:44:039      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:19:44:039      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:19:44:054      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:44:054 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:19:44:054 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[15], m_DelayTime=[0]
[11/07 14:19:44:070 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_READY      )
[11/07 14:19:44:070 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 14:19:44:070 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:19:44:101 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:19:44:101 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:19:44:101 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:19:44:101 TranMainProc.cp(01138)] :TranCode:[1011]
[11/07 14:19:44:101 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 14:19:44:101 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:19:44:101 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:19:44:101 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:44:210 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:44:367 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 14:19:44:367 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 14:19:44:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:44:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:44:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:44:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:44:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:44:382     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:19:44:382     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:19:44:382     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:19:44:445     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:19:44:492     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:19:44:492     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:19:44:492 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:19:44:492      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:19:44:679      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:19:44:695 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:19:44:695 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:19:44:710   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:19:44:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:19:44:710      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:19:44:710      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:19:44:710      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:19:44:710   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:44:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:44:710   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:19:44:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:19:44:710      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:44:710      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:19:44:710       Sound.cpp(00148)] :Stop
[11/07 14:19:44:710       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:44:710      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:44:710      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:44:710      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:44:710      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:19:44:710   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:44:710   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:44:710      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:45:101      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:45:101      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:19:45:882 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:19:45:882 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:19:45:882 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:19:45:882 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:19:45:882 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:19:45:882 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:19:45:882 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:19:45:882 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:19:45:882 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:19:45:882 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:19:45:882 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:19:45:914 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:19:45:914      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:19:45:914      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:19:45:914 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 14:19:45:914 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 14:19:45:914 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 14:19:45:914 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:19:45:914 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:19:45:914 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71317420)
[11/07 14:19:45:914 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:19:45:914 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:19:45:914 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:19:45:929      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:45:929 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:19:45:929     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:19:45:929     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:19:45:929  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:19:45:929       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:19:45:929    CESocket.cpp(00116)] :Create() start

[11/07 14:19:45:929    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:19:45:929    CESocket.cpp(00220)] :Connect() start - socket:772 address: 192.168.198.199 port: 45000
[11/07 14:19:45:929    CESocket.cpp(00441)] :Connect() OK
[11/07 14:19:45:929    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:19:45:929  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:19:45:929  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:19:45:929  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:19:45:929  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:19:45:929    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:19:47:585    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:19:47:585    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:19:47:585       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:19:47:664  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:19:47:664    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:47:664       TCPIP.cpp(00091)] :LineSendData
[11/07 14:19:47:664    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:19:47:664    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:19:47:664  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:19:47:843    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:19:47:843    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:19:47:843       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:19:47:976  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:19:47:976    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:48:062    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:19:48:062    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:19:48:062       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:19:48:140  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:19:48:140    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:48:140  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:19:48:140    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:19:48:140       TCPIP.cpp(00091)] :LineSendData
[11/07 14:19:48:140    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:19:48:140    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:19:48:265    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:19:48:265    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:19:48:265       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:19:48:296  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:19:48:296    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:19:48:296       TCPIP.cpp(00091)] :LineSendData
[11/07 14:19:48:296    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:19:48:296    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:19:48:312       TCPIP.cpp(00082)] :line close start
[11/07 14:19:48:312    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:19:48:312    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:19:48:312    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:19:48:312     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:19:48:312    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:19:48:312    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:19:48:312      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:19:48:312   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:19:48:312   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:19:48:312      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:19:48:312 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:19:48:312 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:19:48:312 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:19:48:312  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:19:48:328     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:19:48:328      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:19:48:328 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:19:48:328      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:19:48:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:19:48:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:19:48:328      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:19:48:328 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:19:48:328 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:19:48:328 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:19:48:328 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:19:48:328 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:19:48:328 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:19:48:328 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:19:48:328 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:19:48:328      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:19:48:625      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:19:48:640 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:19:48:640 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:19:48:640 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:19:48:640 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:19:48:640 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:19:48:687 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:19:48:687 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:48:687 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:48:687 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:48:687 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:48:687 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:19:48:687 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:48:687 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:48:687 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:48:687 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:48:687      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 14:19:48:843 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:19:48:843      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:19:48:843      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:19:48:843 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:19:48:843 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:19:48:843      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:19:48:843      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:19:49:093      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:19:49:375      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:49:375      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:49:375   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:19:49:375   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:19:49:375      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:19:49:375   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:49:375   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:49:390      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:19:49:390      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:19:49:390      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:19:49:390      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:49:390      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:49:390      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:49:390      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:49:390      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:49:390      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:49:406      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:49:421      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:49:421 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:49:421 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:49:421 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:49:421 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:49:421 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:19:49:421      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:19:49:421      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:49:421      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:19:49:421      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:49:421      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:19:49:421       Sound.cpp(00148)] :Stop
[11/07 14:19:49:421       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:49:421      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:49:421      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:49:421      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:49:421      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:19:49:421   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:49:421   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:49:421      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:19:49:421      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:49:421      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:19:50:984      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:19:50:984 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:19:51:093 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:19:51:109      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:19:51:109 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 14:19:51:109 TranNmsProc.cpp(00488)] :NmsCashStatus:(0)
[11/07 14:19:51:265 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:19:51:265 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 14:19:51:265 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:19:51:265      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:19:51:265      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:19:51:265   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:19:51:265   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:19:51:265   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:19:51:265   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:19:51:265 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:19:51:265 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:19:51:296 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:19:51:296 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:19:51:296 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:51:296 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:51:296 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:51:312 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:51:312      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:19:51:312      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:19:51:312      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:19:51:312      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:19:51:312      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:19:51:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:19:51:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:19:51:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:19:51:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:19:51:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:19:51:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:19:51:484 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:19:51:484 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:19:51:484 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:51:484 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:51:484 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:19:51:484   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:19:51:484   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:19:51:484   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:19:51:484   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:19:51:484   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:19:51:484   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:19:51:484      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:19:51:484      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:19:51:484      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:19:51:484   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:51:484   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:51:484   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:19:51:484   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:19:51:484      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:51:484      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:19:51:484       Sound.cpp(00148)] :Stop
[11/07 14:19:51:484       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:51:484      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:51:484      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:51:484      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:51:484      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:19:51:484   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:51:484   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:51:484      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:19:51:859      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:19:51:859      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:19:53:421 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:19:53:421 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:19:53:421      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:19:53:421      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:19:53:437      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:19:53:437      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:19:53:437      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:19:53:437      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:19:53:453      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:19:53:453 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:19:53:453 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:19:53:453 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:19:53:453 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:19:53:765      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:19:53:984      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:19:53:984   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:19:53:984   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:19:54:000 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0xffffffff]
[11/07 14:19:54:062     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:19:54:062     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:19:54:062     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:19:54:062     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:19:54:062     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:19:54:062     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:19:54:109     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:19:54:140     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:19:54:140     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:19:54:140 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:19:54:140 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:19:54:140      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:19:54:140   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:19:54:140   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:19:54:156   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:19:54:156   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:19:54:156 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:19:54:171      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:19:54:171      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:19:54:171   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:54:171   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:54:187      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:19:54:187      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:19:54:187      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:19:54:281      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:19:54:281 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:19:54:281   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:19:54:281   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:19:54:281   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:19:54:281   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:19:54:281   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:19:54:281   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:19:54:281 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:19:54:281      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:19:54:281      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:19:54:296      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:19:54:296   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:19:54:296   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:19:54:296   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:19:54:296   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:19:54:296      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:19:54:296      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:19:54:296       Sound.cpp(00148)] :Stop
[11/07 14:19:54:296       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:19:54:296      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:19:54:296      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:19:54:296      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:19:54:296      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:19:54:296   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:19:54:296   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:19:54:296      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:19:54:296      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:19:54:312      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:19:56:000 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:19:56:000 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:23:39:861   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:23:39:861   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:23:39:862   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:23:39:862   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:23:39:862   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:23:40:432   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:23:40:432   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:23:40:432   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:23:40:432   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:23:40:432   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:23:40:949   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:23:40:949   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:23:40:950   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:23:40:950   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:23:40:950   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:23:41:358   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 14:23:41:358   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:23:41:358   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 14:23:41:358   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 14:23:41:358   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 14:23:41:626   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 14:23:41:626   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:23:41:627   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 14:23:41:627   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 14:23:41:627   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 14:26:33:429   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:26:33:429   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:26:33:429   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:26:33:430   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:26:33:430   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:27:55:621      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:27:55:621 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 14:27:55:621      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:27:55:621      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:27:55:621 AtmModeCtrl.cpp(01560)] :strMCUErrorCode = [0000000]
[11/07 14:27:55:621 AtmModeCtrl.cpp(01577)] : Main Menu EVENT (MCR OR SCR) => ATM_TRAN
[11/07 14:27:55:777 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:27:55:777 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:27:55:777 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:27:55:777 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:27:55:886 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:27:55:886      DevApl.cpp(01874)] :[TRAN START]
[11/07 14:27:55:886      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 14:27:56:183      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 14:27:56:199      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:27:56:199 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 14:27:56:214 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 14:27:56:214 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 14:27:56:246      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:27:56:246      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:27:56:246 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 14:27:56:277      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:27:56:277 TranDevProc.cpp(00526)] :fnAPD_CheckICCardType()
[11/07 14:27:56:292      DevCmn.cpp(01055)] :fstrMCU_GetICData()
[11/07 14:27:56:292      DevCmn.cpp(01060)] :fstrMCU_GetICData():return(3B781800000073C84013009000)
[11/07 14:27:56:292 TranDevProc.cpp(00541)] :fstrMCU_GetICData()=[3B781800000073C84013009000]
[11/07 14:27:56:292      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:27:56:292      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:27:56:292      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:27:56:292      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:27:56:292 TranDevProc.cpp(00554)] :fnAPD_CheckICCardType() return T_EMVCARD_INSERT
[11/07 14:27:56:292 TranDevProc.cpp(00560)] :fnAPD_InitialICCardProcessing()
[11/07 14:27:56:292      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:27:56:292      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:27:56:292      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:27:56:292   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:27:56:292   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:27:56:292   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 14:27:56:292   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 14:27:56:292      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:27:56:292      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 14:27:56:292       Sound.cpp(00148)] :Stop
[11/07 14:27:56:292       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:27:56:292      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:27:56:292      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:27:56:292      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:27:56:292      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:27:56:292   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:27:56:292   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:27:56:292      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:27:56:683      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:27:56:683      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 14:27:56:683      DevCmn.cpp(01402)] :fnEMV_SetKernelType(5)
[11/07 14:27:56:683      DevCmn.cpp(01406)] :EMV_SetTerminalType(EMV_TERMINAL_TYPE_14)
[11/07 14:27:56:699      DevCmn.cpp(01413)] :fnEMV_SetKernelType(.);return(1)
[11/07 14:27:56:699 TranDevProc.cpp(00576)] :fnEMV_SetKernelType(5) = [1]
[11/07 14:27:56:699      DevCmn.cpp(01429)] :fnEMV_SystemInitial()
[11/07 14:27:56:699      DevCmn.cpp(01434)] :fnEMV_SystemInitial(.);return(1)
[11/07 14:27:56:699 TranDevProc.cpp(00585)] :fnEMV_SystemInitial() = [1]
[11/07 14:27:56:699      DevCmn.cpp(01440)] :fnEMV_Sel_BuildCandidateApp()
[11/07 14:27:59:683      DevCmn.cpp(01457)] :fnEMV_Sel_BuildCandidateApp():return(1)
[11/07 14:27:59:683 TranDevProc.cpp(00593)] :fnEMV_Sel_BuildCandidateApp() = [1]
[11/07 14:27:59:683 TranDevProc.cpp(01089)] :fnAPD_EMVSelectAID()
[11/07 14:27:59:683      DevCmn.cpp(01464)] :fnEMV_Sel_GetAppListEx()
[11/07 14:27:59:746      DevCmn.cpp(01471)] :m_pMwiEmv->EMV_Sel_GetAppList(..):return 1
[11/07 14:27:59:746      DevCmn.cpp(01478)] :fnEMV_Sel_GetAppList():return(0001010F4352454449544F204445205649534107A0000000031010)
[11/07 14:27:59:746 TranDevProc.cpp(01099)] :fnEMV_Sel_GetAppListEx() = [0001010F4352454449544F204445205649534107A0000000031010]
[11/07 14:27:59:746 TranDevProc.cpp(01117)] :UserConfirm=[0], Number of AID = [1]
[11/07 14:27:59:746 TranDevProc.cpp(00670)] :fnAPD_EMVUserAIDLoad(nAIDNum=[1], strAID=[010F4352454449544F204445205649534107A0000000031010])
[11/07 14:27:59:746 TranDevProc.cpp(00700)] :AID List : [010F4352454449544F204445205649534107A0000000031010]
[11/07 14:27:59:746 TranDevProc.cpp(00715)] :AID List without 9F11 tag : [0F4352454449544F204445205649534107A0000000031010]
[11/07 14:27:59:746 TranDevProc.cpp(00716)] :Issuer Code Index : [ISO8859_01]
[11/07 14:27:59:746 TranDevProc.cpp(00764)] :Data before PACK : [4300520045004400490054004F0020004400450020005600490053004100]
[11/07 14:27:59:746 TranDevProc.cpp(00768)] :Packed length : [30]
[11/07 14:27:59:746 TranDevProc.cpp(00322)] :fnAPD_WCStoMBS - WCHAR   : [004300520045004400490054004F00200044004500200056004900530041]
[11/07 14:27:59:746 TranDevProc.cpp(00331)] :fnAPD_WCStoMBS - CHAR    : [4352454449544F204445205649534100]
[11/07 14:27:59:746 TranDevProc.cpp(00340)] :fnAPD_WCStoMBS - CString : [4352454449544F2044452056495341]
[11/07 14:27:59:746 TranDevProc.cpp(00786)] :Parsed AID [1], AID=[A0000000031010], DESC=[CREDITO DE VISA], FLAG=[TRUE]
[11/07 14:27:59:746 TranDevProc.cpp(00801)] :Continue = [0], Remain AIDList =[07A0000000031010]
[11/07 14:27:59:746 TranDevProc.cpp(00805)] :Max AID = [1]
[11/07 14:27:59:746 TranDevProc.cpp(01121)] :AID Number = [1], Max AID = [1]
[11/07 14:27:59:746      DevCmn.cpp(01505)] :fnEMV_Sel_FinalAppSelection(0)
[11/07 14:28:00:199      DevCmn.cpp(01510)] :fnEMV_Sel_FinalAppSelection():return(1)
[11/07 14:28:00:199 TranDevProc.cpp(01158)] :fnEMV_Sel_FinalAppSelection(0) = [1]
[11/07 14:28:00:199      DevCmn.cpp(01516)] :fnEMV_InitAppProcess(00, 000000000000, 171107142800, 2)
[11/07 14:28:01:683      DevCmn.cpp(01520)] :fnEMV_InitAppProcess(....):return(1)
[11/07 14:28:01:683 TranDevProc.cpp(01174)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_InitAppProcess:nResult(1)
[11/07 14:28:01:683 TranDevProc.cpp(01203)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID = [A0000000031010]
[11/07 14:28:01:683 TranDevProc.cpp(01204)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID Label = [CREDITO DE VISA]
[11/07 14:28:01:683 TranDevProc.cpp(00607)] :fnAPD_EMVSelectAID() = [1]
[11/07 14:28:01:683      DevCmn.cpp(01526)] :fnEMV_ReadAppData()
[11/07 14:28:04:277      DevCmn.cpp(01531)] :fnEMV_ReadAppData():return(1)
[11/07 14:28:04:277 TranDevProc.cpp(00623)] :m_pDevCmn->fnEMV_ReadAppData():nResult(1)
[11/07 14:28:04:277 TranLibProc.cpp(00538)] :CTranCmn::fnAPL_EmvMakeCardPanProc()
[11/07 14:28:04:277      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 14:28:04:355      DevCmn.cpp(01563)] :fnEMV_GetVal(66):return(Data Length = [0] )
[11/07 14:28:04:355 TranDevProc.cpp(00655)] :fnEMV_GetVal(EMVTid_LangPrefer) = []
[11/07 14:28:04:355      DevCmn.cpp(01421)] :fnEMV_SetConfig(1)
[11/07 14:28:04:355 TranDevProc.cpp(00659)] :fnEMV_SetConfig(EMV_CONFIG_TYPE_ONLINEPIN)
[11/07 14:28:04:355 TranDevProc.cpp(00662)] :fnAPD_InitialICCardProcessing():return OK
[11/07 14:28:04:355 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 14:28:04:371 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 14:28:04:371 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 14:28:04:386 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 14:28:04:386 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:28:04:386   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:28:04:386   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:28:04:386   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:28:04:386   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:28:04:386 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:28:04:386   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 14:28:04:386   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:28:04:386      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:04:386      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:28:04:386      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:28:04:386   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:04:386   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:04:386   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 14:28:04:386   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 14:28:04:386      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:04:402      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 14:28:04:402       Sound.cpp(00148)] :Stop
[11/07 14:28:04:402       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:04:402      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:04:402      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:04:402      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:04:402      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:28:04:402   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:04:402   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:04:402      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:28:04:402      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:28:04:402      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 14:28:07:683   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 14:28:07:683   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 14:28:07:683      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 14:28:07:683      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:28:07:821      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:28:07:821 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:28:07:822 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 14:28:07:822 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:28:07:822 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:28:07:823   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:28:07:823   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:28:07:823 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 14:28:07:824 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:28:07:824 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 14:28:07:824 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 14:28:07:824 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 14:28:07:825   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:28:07:825   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:28:07:826   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 14:28:07:826   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 14:28:07:826   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:28:07:827   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:28:07:827   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:28:07:827   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:28:07:828   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:28:07:828   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:28:07:829   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:28:07:829   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:28:07:830   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:28:07:830   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:28:07:831   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:28:07:831   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:28:07:831   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:28:07:832   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:28:07:832      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:07:832      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:28:07:832      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:28:07:833   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:07:833   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:07:833   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 14:28:07:833   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 14:28:07:833      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:07:833      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 14:28:07:834       Sound.cpp(00148)] :Stop
[11/07 14:28:07:834       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:07:834      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:07:834      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:07:834      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:07:835      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 14:28:07:835   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:07:835   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:07:836      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 14:28:07:836      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:28:08:140      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 14:28:09:406   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:28:09:406   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:28:09:407   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:28:09:407   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:28:09:407   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:28:09:747   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:28:09:748   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:28:09:748   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:28:09:748   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:28:09:749   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:28:09:952   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:28:09:952   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:28:09:953   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:28:09:953   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:28:09:953   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:28:10:138   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:28:10:138   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:28:10:139   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:28:10:139   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:28:10:139   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:28:10:694   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:28:10:694   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:28:10:695   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:28:10:695   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:28:10:695   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:28:10:783   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 14:28:10:783   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 14:28:10:783      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 14:28:10:784      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:28:10:956      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:28:10:956 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:28:10:957 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 14:28:10:957 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 14:28:10:957 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:28:10:958      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 14:28:10:981 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 14:28:10:981 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 14:28:10:981 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 14:28:10:981 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 14:28:10:982 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:28:10:982   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:28:10:982   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:28:10:983   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:28:10:983   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:28:10:984   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:28:10:984   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:28:10:985   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:28:10:985   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:28:10:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:28:10:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:28:10:986 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 14:28:10:987   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 14:28:10:987   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 14:28:10:987      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:10:987      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:28:10:988      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:28:10:988      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:28:10:988   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:10:988   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:10:989      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:28:10:989      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:28:10:989      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:28:10:989      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:10:990      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 14:28:10:990       Sound.cpp(00148)] :Stop
[11/07 14:28:10:990       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:10:990      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:10:991      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:10:991      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:10:991      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:28:10:991   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:10:992   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:10:993      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:28:10:993      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:28:10:995      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 14:28:41:168 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 14:28:41:168 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 14:28:41:168 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 14:28:41:168 TranLibProc.cpp(01063)] :fnAPL_EmvRemoveICCard(nFailReason=[-1], bFallBackTr=[0])
[11/07 14:28:41:168      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(2)
[11/07 14:28:41:168 TranLibProc.cpp(01067)] :fnAPL_EmvRemoveICCard::m_pDevCmn->fnMCU_GetMaterialInfo():nSensor[2]
[11/07 14:28:41:168 TranLibProc.cpp(01111)] :Remove Card - Display Message = [CANCELLED]
[11/07 14:28:41:168 TranLibProc.cpp(01125)] :fnAPL_EmvRemoveICCard Start, Time Out= [120 seconds]
[11/07 14:28:41:168      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:28:41:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [CANCELLED])
[11/07 14:28:41:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/CANCELLED]
[11/07 14:28:41:168      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:41:168      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:28:41:168      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:28:41:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:41:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:41:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD027.swf])
[11/07 14:28:41:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD027.swf]
[11/07 14:28:41:168      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:41:168      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:28:41:168       Sound.cpp(00148)] :Stop
[11/07 14:28:41:168       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:41:168      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:41:168      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:41:168      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:41:168      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:28:41:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:41:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:41:168      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:28:41:559      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:28:41:559      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0]):return(0)
[11/07 14:28:41:559 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:28:41:575      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:28:41:575      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:28:41:575   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:41:575   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:41:590      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 14:28:41:590      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 14:28:41:590      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 14:28:41:637      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:28:41:637 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:28:43:495      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(1)
[11/07 14:28:43:977      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(0)
[11/07 14:28:43:977 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:28:43:989      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:28:43:989   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:43:990   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:44:001      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:28:44:001      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:28:44:002      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:28:44:014      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:28:44:017 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:28:44:017      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(3)
[11/07 14:28:44:017      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(3), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:28:44:018       Sound.cpp(00148)] :Stop
[11/07 14:28:44:018       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:44:018      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:28:44:021 TranLibProc.cpp(01220)] :Exit Waiting loop... Sensor Status = [0]
[11/07 14:28:44:021 TranLibProc.cpp(01224)] :fnAPL_EmvRemoveICCard return TRUE
[11/07 14:28:44:021 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:28:44:034      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:28:44:034   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:44:035   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:44:051      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:28:44:051      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:28:44:051      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:28:44:063      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:28:44:066 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:28:44:066 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 14:28:44:066 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:28:44:066      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:28:44:069      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:28:44:072      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:28:44:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:28:44:078      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:28:44:079      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:28:44:080      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:28:44:081      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:28:44:082      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:28:44:083      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:28:44:083      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:28:44:084      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:44:085      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:28:44:085      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:28:44:085   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:44:085   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:44:086   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 14:28:44:086   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 14:28:44:086      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:44:087      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 14:28:44:087       Sound.cpp(00148)] :Stop
[11/07 14:28:44:087       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:44:087      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:44:088      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:44:088      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:44:088      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:28:44:089   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:44:089   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:44:090      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:28:44:090      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:28:44:090      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 14:28:47:923 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 14:28:47:923 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 14:28:47:923 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 14:28:47:923 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:28:47:923 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:28:47:923 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:28:47:923 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 14:28:47:923 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 14:28:47:923 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:28:47:970 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:28:47:970 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 14:28:48:251   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:28:48:251   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:28:48:251      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:28:48:251 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 14:28:48:251 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 14:28:48:251 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:28:48:251 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:28:48:251 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:28:48:251 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:28:48:298      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:28:48:298 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 14:28:48:455 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:28:48:455 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 14:28:48:455 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:28:48:455      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:28:48:455      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:28:48:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:28:48:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:28:48:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:28:48:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:28:48:455 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:28:48:455 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:28:48:470      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:28:48:470      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:28:48:486      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:28:48:486      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:28:48:486      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:28:48:486      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:28:48:486      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:28:48:486 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:28:48:486 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:28:48:486 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:28:48:486 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:28:48:720      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:28:48:970      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:28:48:970      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:28:48:970   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:28:48:970   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:28:48:986 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:28:49:048     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:28:49:064     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:28:49:064     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:28:49:064     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:28:49:064     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:28:49:064     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:28:49:095     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:28:49:126     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:28:49:126     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:28:49:126 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:28:49:126 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:28:49:126      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:28:49:126   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:28:49:126   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:28:49:126   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:28:49:126   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:28:49:126 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:28:49:142      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:28:49:142      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:28:49:142   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:49:142   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:49:158      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:28:49:158      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:28:49:158      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:28:49:236      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:28:49:236 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:28:49:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:28:49:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:28:49:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:28:49:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:28:49:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:28:49:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:28:49:236 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:28:49:236      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:49:236      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:28:49:236      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:28:49:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:49:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:49:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:28:49:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:28:49:236      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:49:236      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:28:49:236       Sound.cpp(00148)] :Stop
[11/07 14:28:49:236       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:49:236      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:49:236      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:49:236      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:49:236      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:28:49:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:49:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:49:236      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:28:49:236      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:28:49:236      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:28:50:923 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 14:28:52:353      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:28:52:353 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 14:28:52:353      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:28:52:353      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:28:52:353 AtmModeCtrl.cpp(01741)] :strMCUErrorCode = [0000000]
[11/07 14:28:52:353 AtmModeCtrl.cpp(01760)] : ELSE => ATM_TRAN
[11/07 14:28:52:509 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:28:52:509 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:28:52:509 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:28:52:509 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:28:52:611 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:28:52:611      DevApl.cpp(01874)] :[TRAN START]
[11/07 14:28:52:611      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 14:28:52:931      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 14:28:52:970      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:28:52:978 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 14:28:53:033 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 14:28:53:033 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 14:28:53:041      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:28:53:048      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:28:53:048 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 14:28:53:072      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:28:53:072 TranDevProc.cpp(00526)] :fnAPD_CheckICCardType()
[11/07 14:28:53:087      DevCmn.cpp(01055)] :fstrMCU_GetICData()
[11/07 14:28:53:087      DevCmn.cpp(01060)] :fstrMCU_GetICData():return(3B781800000073C84013009000)
[11/07 14:28:53:087 TranDevProc.cpp(00541)] :fstrMCU_GetICData()=[3B781800000073C84013009000]
[11/07 14:28:53:087      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:28:53:087      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:28:53:087      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:28:53:087      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:28:53:087 TranDevProc.cpp(00554)] :fnAPD_CheckICCardType() return T_EMVCARD_INSERT
[11/07 14:28:53:087 TranDevProc.cpp(00560)] :fnAPD_InitialICCardProcessing()
[11/07 14:28:53:087      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:53:087      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:28:53:087      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:28:53:087   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:53:087   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:53:087   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 14:28:53:087   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 14:28:53:087      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:53:087      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 14:28:53:087       Sound.cpp(00148)] :Stop
[11/07 14:28:53:087       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:53:095      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:53:095      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:53:095      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:53:095      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:28:53:095   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:53:095   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:53:095      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:28:53:423      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:28:53:423      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 14:28:53:423      DevCmn.cpp(01402)] :fnEMV_SetKernelType(5)
[11/07 14:28:53:423      DevCmn.cpp(01406)] :EMV_SetTerminalType(EMV_TERMINAL_TYPE_14)
[11/07 14:28:53:423      DevCmn.cpp(01413)] :fnEMV_SetKernelType(.);return(1)
[11/07 14:28:53:423 TranDevProc.cpp(00576)] :fnEMV_SetKernelType(5) = [1]
[11/07 14:28:53:423      DevCmn.cpp(01429)] :fnEMV_SystemInitial()
[11/07 14:28:53:431      DevCmn.cpp(01434)] :fnEMV_SystemInitial(.);return(1)
[11/07 14:28:53:431 TranDevProc.cpp(00585)] :fnEMV_SystemInitial() = [1]
[11/07 14:28:53:431      DevCmn.cpp(01440)] :fnEMV_Sel_BuildCandidateApp()
[11/07 14:28:56:376      DevCmn.cpp(01457)] :fnEMV_Sel_BuildCandidateApp():return(1)
[11/07 14:28:56:376 TranDevProc.cpp(00593)] :fnEMV_Sel_BuildCandidateApp() = [1]
[11/07 14:28:56:376 TranDevProc.cpp(01089)] :fnAPD_EMVSelectAID()
[11/07 14:28:56:376      DevCmn.cpp(01464)] :fnEMV_Sel_GetAppListEx()
[11/07 14:28:56:423      DevCmn.cpp(01471)] :m_pMwiEmv->EMV_Sel_GetAppList(..):return 1
[11/07 14:28:56:423      DevCmn.cpp(01478)] :fnEMV_Sel_GetAppList():return(0001010F4352454449544F204445205649534107A0000000031010)
[11/07 14:28:56:423 TranDevProc.cpp(01099)] :fnEMV_Sel_GetAppListEx() = [0001010F4352454449544F204445205649534107A0000000031010]
[11/07 14:28:56:423 TranDevProc.cpp(01117)] :UserConfirm=[0], Number of AID = [1]
[11/07 14:28:56:423 TranDevProc.cpp(00670)] :fnAPD_EMVUserAIDLoad(nAIDNum=[1], strAID=[010F4352454449544F204445205649534107A0000000031010])
[11/07 14:28:56:423 TranDevProc.cpp(00700)] :AID List : [010F4352454449544F204445205649534107A0000000031010]
[11/07 14:28:56:423 TranDevProc.cpp(00715)] :AID List without 9F11 tag : [0F4352454449544F204445205649534107A0000000031010]
[11/07 14:28:56:423 TranDevProc.cpp(00716)] :Issuer Code Index : [ISO8859_01]
[11/07 14:28:56:423 TranDevProc.cpp(00764)] :Data before PACK : [4300520045004400490054004F0020004400450020005600490053004100]
[11/07 14:28:56:423 TranDevProc.cpp(00768)] :Packed length : [30]
[11/07 14:28:56:423 TranDevProc.cpp(00322)] :fnAPD_WCStoMBS - WCHAR   : [004300520045004400490054004F00200044004500200056004900530041]
[11/07 14:28:56:423 TranDevProc.cpp(00331)] :fnAPD_WCStoMBS - CHAR    : [4352454449544F204445205649534100]
[11/07 14:28:56:423 TranDevProc.cpp(00340)] :fnAPD_WCStoMBS - CString : [4352454449544F2044452056495341]
[11/07 14:28:56:423 TranDevProc.cpp(00786)] :Parsed AID [1], AID=[A0000000031010], DESC=[CREDITO DE VISA], FLAG=[TRUE]
[11/07 14:28:56:423 TranDevProc.cpp(00801)] :Continue = [0], Remain AIDList =[07A0000000031010]
[11/07 14:28:56:423 TranDevProc.cpp(00805)] :Max AID = [1]
[11/07 14:28:56:423 TranDevProc.cpp(01121)] :AID Number = [1], Max AID = [1]
[11/07 14:28:56:423      DevCmn.cpp(01505)] :fnEMV_Sel_FinalAppSelection(0)
[11/07 14:28:56:830      DevCmn.cpp(01510)] :fnEMV_Sel_FinalAppSelection():return(1)
[11/07 14:28:56:830 TranDevProc.cpp(01158)] :fnEMV_Sel_FinalAppSelection(0) = [1]
[11/07 14:28:56:830      DevCmn.cpp(01516)] :fnEMV_InitAppProcess(00, 000000000000, 171107142856, 2)
[11/07 14:28:57:166      DevCmn.cpp(01520)] :fnEMV_InitAppProcess(....):return(1)
[11/07 14:28:57:166 TranDevProc.cpp(01174)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_InitAppProcess:nResult(1)
[11/07 14:28:57:166 TranDevProc.cpp(01203)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID = [A0000000031010]
[11/07 14:28:57:166 TranDevProc.cpp(01204)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID Label = [CREDITO DE VISA]
[11/07 14:28:57:166 TranDevProc.cpp(00607)] :fnAPD_EMVSelectAID() = [1]
[11/07 14:28:57:166      DevCmn.cpp(01526)] :fnEMV_ReadAppData()
[11/07 14:28:59:611      DevCmn.cpp(01531)] :fnEMV_ReadAppData():return(1)
[11/07 14:28:59:611 TranDevProc.cpp(00623)] :m_pDevCmn->fnEMV_ReadAppData():nResult(1)
[11/07 14:28:59:611 TranLibProc.cpp(00538)] :CTranCmn::fnAPL_EmvMakeCardPanProc()
[11/07 14:28:59:611      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 14:28:59:626      DevCmn.cpp(01563)] :fnEMV_GetVal(66):return(Data Length = [0] )
[11/07 14:28:59:626 TranDevProc.cpp(00655)] :fnEMV_GetVal(EMVTid_LangPrefer) = []
[11/07 14:28:59:626      DevCmn.cpp(01421)] :fnEMV_SetConfig(1)
[11/07 14:28:59:626 TranDevProc.cpp(00659)] :fnEMV_SetConfig(EMV_CONFIG_TYPE_ONLINEPIN)
[11/07 14:28:59:626 TranDevProc.cpp(00662)] :fnAPD_InitialICCardProcessing():return OK
[11/07 14:28:59:626 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 14:28:59:689 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 14:28:59:689 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 14:28:59:705 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 14:28:59:705 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:28:59:705   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:28:59:705   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:28:59:705   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:28:59:705   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:28:59:705 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:28:59:705   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 14:28:59:705   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:28:59:705      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:28:59:705      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:28:59:705      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:28:59:705   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:28:59:705   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:28:59:705   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 14:28:59:705   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 14:28:59:705      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:28:59:705      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 14:28:59:705       Sound.cpp(00148)] :Stop
[11/07 14:28:59:705       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:28:59:705      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:28:59:705      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:28:59:705      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:28:59:705      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:28:59:705   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:28:59:705   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:28:59:705      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:28:59:705      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:28:59:705      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 14:29:01:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 14:29:01:064   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 14:29:01:064      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 14:29:01:064      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:29:01:255      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:29:01:255 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:29:01:256 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 14:29:01:256 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:29:01:256 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:29:01:257   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:29:01:257   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:29:01:257 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 14:29:01:257 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:29:01:258 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 14:29:01:258 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 14:29:01:258 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 14:29:01:259   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:29:01:259   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:29:01:260   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 14:29:01:260   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 14:29:01:260   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:29:01:261   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:29:01:261   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:29:01:261   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:29:01:262   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:29:01:262   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:29:01:263   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:29:01:263   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:29:01:264   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:29:01:264   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:29:01:264   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:29:01:265   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:29:01:265   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:29:01:265   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:29:01:266      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:29:01:266      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:29:01:266      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:29:01:267   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:29:01:267   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:29:01:267   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 14:29:01:268   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 14:29:01:268      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:29:01:268      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 14:29:01:269       Sound.cpp(00148)] :Stop
[11/07 14:29:01:269       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:29:01:269      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:29:01:269      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:29:01:269      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:29:01:269      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 14:29:01:270   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:01:270   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:01:271      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 14:29:01:271      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:29:01:585      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 14:29:02:384   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:29:02:384   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:29:02:385   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:29:02:385   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:29:02:385   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:29:02:786   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:29:02:786   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:29:02:787   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:29:02:787   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:29:02:787   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:29:03:140   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:29:03:140   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:29:03:141   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:29:03:141   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:29:03:141   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:29:03:509   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:29:03:509   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:29:03:510   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:29:03:510   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:29:03:510   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:29:04:312   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:29:04:312   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:29:04:313   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:29:04:313   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:29:04:313   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:29:04:370   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 14:29:04:370   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 14:29:04:370      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 14:29:04:371      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:29:04:403      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:29:04:403 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:29:04:404 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 14:29:04:404 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 14:29:04:404 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:29:04:405      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 14:29:04:547 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 14:29:04:547 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 14:29:04:547 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 14:29:04:548 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 14:29:04:548 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:29:04:548   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:29:04:549   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:29:04:549   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:29:04:549   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:29:04:550   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:29:04:550   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:29:04:551   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:29:04:551   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:29:04:552   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:29:04:552   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:29:04:552 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 14:29:04:553   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 14:29:04:553   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 14:29:04:553      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:29:04:553      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:29:04:554      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:29:04:554      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:29:04:554   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:29:04:554   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:29:04:555      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:29:04:555      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:29:04:555      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:29:04:555      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:29:04:556      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 14:29:04:556       Sound.cpp(00148)] :Stop
[11/07 14:29:04:556       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:29:04:556      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:29:04:557      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:29:04:557      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:29:04:557      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:29:04:558   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:04:558   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:04:559      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:29:04:559      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:29:04:561      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 14:29:34:882 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 14:29:34:882 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 14:29:34:882 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 14:29:34:882 TranLibProc.cpp(01063)] :fnAPL_EmvRemoveICCard(nFailReason=[-1], bFallBackTr=[0])
[11/07 14:29:34:882      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(2)
[11/07 14:29:34:882 TranLibProc.cpp(01067)] :fnAPL_EmvRemoveICCard::m_pDevCmn->fnMCU_GetMaterialInfo():nSensor[2]
[11/07 14:29:34:882 TranLibProc.cpp(01111)] :Remove Card - Display Message = [CANCELLED]
[11/07 14:29:34:882 TranLibProc.cpp(01125)] :fnAPL_EmvRemoveICCard Start, Time Out= [120 seconds]
[11/07 14:29:34:882      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:29:34:882   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [CANCELLED])
[11/07 14:29:34:882   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/CANCELLED]
[11/07 14:29:34:882      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:29:34:882      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:29:34:882      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:29:34:882   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:29:34:882   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:29:34:882   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD027.swf])
[11/07 14:29:34:882   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD027.swf]
[11/07 14:29:34:882      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:29:34:882      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:29:34:882       Sound.cpp(00148)] :Stop
[11/07 14:29:34:882       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:29:34:882      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:29:34:882      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:29:34:882      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:29:34:882      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:29:34:882   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:34:882   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:34:882      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:29:35:273      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:29:35:273      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0]):return(0)
[11/07 14:29:35:273 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:29:35:289      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:29:35:289      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:29:35:289   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:35:289   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:35:304      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 14:29:35:304      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 14:29:35:304      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 14:29:35:351      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:29:35:351 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:29:36:530      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(0)
[11/07 14:29:36:530 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:29:36:541      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:29:36:541   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:36:542   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:36:554      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:29:36:554      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:29:36:555      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:29:36:567      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:29:36:569 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:29:36:570      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(3)
[11/07 14:29:36:570      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(3), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:29:36:570       Sound.cpp(00148)] :Stop
[11/07 14:29:36:570       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:29:36:571      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:29:36:574 TranLibProc.cpp(01220)] :Exit Waiting loop... Sensor Status = [0]
[11/07 14:29:36:574 TranLibProc.cpp(01224)] :fnAPL_EmvRemoveICCard return TRUE
[11/07 14:29:36:574 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:29:36:585      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:29:36:585   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:36:586   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:36:598      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:29:36:598      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:29:36:598      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:29:36:610      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:29:36:613 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:29:36:613 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 14:29:36:613 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:29:36:613      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:29:36:616      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:29:36:619      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:29:36:624      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:29:36:625      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:29:36:625      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:29:36:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:29:36:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:29:36:627      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:29:36:628      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:29:36:630      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:29:36:631      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:29:36:631      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:29:36:631      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:29:36:632   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:29:36:632   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:29:36:632   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 14:29:36:633   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 14:29:36:633      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:29:36:633      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 14:29:36:634       Sound.cpp(00148)] :Stop
[11/07 14:29:36:634       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:29:36:634      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:29:36:634      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:29:36:634      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:29:36:634      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:29:36:635   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:36:635   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:36:636      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:29:36:636      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:29:36:636      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 14:29:40:389 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 14:29:40:389 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 14:29:40:389 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 14:29:40:389 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:29:40:389 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:29:40:389 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:29:40:389 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 14:29:40:389 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 14:29:40:389 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:29:40:436 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:29:40:436 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 14:29:40:764   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:29:40:764   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:29:40:764      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:29:40:764 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 14:29:40:764 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 14:29:40:764 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:29:40:764 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:29:40:764 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:29:40:764 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:29:40:827      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:29:40:991 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:29:40:991 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 14:29:40:991 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:29:40:991      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:29:40:991      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:29:40:991   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:29:40:991   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:29:40:991   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:29:40:991   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:29:40:991 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:29:40:991 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:29:41:014      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:29:41:014      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:29:41:030      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:29:41:030      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:29:41:030      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:29:41:030      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:29:41:038      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:29:41:038 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:29:41:038 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:29:41:038 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:29:41:038 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:29:41:397      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:29:41:772      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:29:41:780      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:29:41:780   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:29:41:780   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:29:41:780 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:29:41:842     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:29:41:842     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:29:41:842     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:29:41:842     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:29:41:842     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:29:41:842     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:29:41:905     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:29:41:928     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:29:41:928     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:29:41:928 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:29:41:936 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:29:41:936      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:29:41:936   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:29:41:936   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:29:41:936   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:29:41:936   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:29:41:936 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:29:41:952      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:29:41:952      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:29:41:952   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:41:952   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:41:967      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:29:41:967      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:29:41:967      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:29:42:045      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:29:42:045 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:29:42:045   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:29:42:045   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:29:42:045   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:29:42:045   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:29:42:045   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:29:42:045   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:29:42:045 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:29:42:045      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:29:42:045      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:29:42:045      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:29:42:045   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:29:42:045   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:29:42:045   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:29:42:053   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:29:42:053      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:29:42:053      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:29:42:053       Sound.cpp(00148)] :Stop
[11/07 14:29:42:053       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:29:42:053      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:29:42:053      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:29:42:053      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:29:42:053      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:29:42:053   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:29:42:053   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:29:42:053      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:29:42:053      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:29:42:053      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:30:52:187   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:30:52:187   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:30:52:187   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:30:52:188   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:30:52:188   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:30:52:688   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:30:52:688   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:30:52:688   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:30:52:689   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:30:52:689   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:30:53:204   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:30:53:204   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:30:53:205   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:30:53:205   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:30:53:205   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:30:53:611   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 14:30:53:611   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:53:611   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 14:30:53:611   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 14:30:53:611   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 14:30:53:928   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 14:30:53:928   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:53:928   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 14:30:53:928   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 14:30:53:928   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 14:30:54:219   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 14:30:54:219   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:54:228   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 14:30:54:228   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 14:30:54:685      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 14:30:54:722      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:30:54:728 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 14:30:55:066      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:30:55:352      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:30:55:352      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:30:55:352   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:30:55:352   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:30:55:352      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:30:55:352   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:30:55:352   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:30:55:368      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:30:55:368      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:30:55:368      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:30:55:368      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:30:55:704      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:30:55:704      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:30:55:704      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:30:55:704      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:30:55:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:30:55:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:30:55:719      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:30:55:719      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:30:55:719      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:30:55:719      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:30:55:719      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:30:55:719      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:30:56:274      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:30:56:282 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:30:56:297      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:30:56:297   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:30:56:297   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:30:56:313      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:30:56:313      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:30:56:313      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:30:56:329      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:30:56:329 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:30:56:485 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:30:56:485 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:30:56:485      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:30:56:485      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:30:56:485 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:30:56:735      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:30:56:969      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:30:56:969   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:30:56:969   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:30:56:969      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:30:56:969   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:30:56:969   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:30:56:985      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:30:56:985      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:30:56:985      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:30:56:985      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:30:56:985      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:30:56:985      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:30:56:985      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:30:56:985      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:30:56:993      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:30:57:000      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:30:57:032      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 14:30:57:032      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:30:57:032      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:30:57:032      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:30:57:032      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:30:57:032      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:30:57:032       Sound.cpp(00148)] :Stop
[11/07 14:30:57:032       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:30:57:032      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:30:57:032      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:30:57:032      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:30:57:032      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:30:57:032   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:30:57:032   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:30:57:040      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:30:57:040      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:30:57:040      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:30:57:040      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:30:57:063 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 14:30:57:063      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:30:57:079      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0053]
[11/07 14:30:57:079      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 14:30:57:079      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 14:30:57:079       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:30:57:079       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:30:57:079       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:30:57:079       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0053']
[11/07 14:30:57:125       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:30:57:125       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:30:57:125       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:30:57:125       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:30:57:125       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:30:57:125       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:30:57:125       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:30:57:125       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:30:57:125       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 14:30:57 EJ NUMBER = 0053 ] |14:30:57 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:30:57:125       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0053','11','07','2017','14','30','57','Change into operator mode<START_EJRNL>[ 11/07/2017 14:30:57 EJ NUMBER = 0053 ] |14:30:57 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 14:30:57:180       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:30:57:180       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:30:57:180       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:30:57:180       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:30:57:180       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:30:57:180       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:30:57:180       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:30:57:180       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[53]
[11/07 14:30:57:180       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [53]
[11/07 14:30:57:180       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[52], m_bRecordCountFinal=[1]
[11/07 14:30:57:227       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [53]
[11/07 14:30:57:227      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 14:30:57 EJ NUMBER = 0053 ] |14:30:57 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:30:57:227      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 14:30:57 EJ NUMBER = 0053 ] |14:30:57 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:30:57:227      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:30:57:227      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:30:57:243      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:30:57:258     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:30:57:258     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:30:57:297 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:30:57:297 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:30:57:297 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:30:57:399 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:30:58:110 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:30:58:110      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:30:58:110   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:30:58:110   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:30:58:125      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:30:58:125      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:30:59:095   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:30:59:095   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:59:096   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:30:59:096   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:30:59:096   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:30:59:278   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:30:59:278   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:59:278   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:30:59:279   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:30:59:279   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:30:59:587   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:30:59:587   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:59:587   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:30:59:588   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:30:59:588   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:30:59:807   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:30:59:807   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:30:59:807   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:30:59:808   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:30:59:808   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:31:00:098   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:31:00:098   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:31:00:098   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:31:00:098   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:31:00:098   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:31:00:588   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:31:00:588   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:31:00:588   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:31:00:588   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:31:00:588   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:31:01:079   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:31:01:079   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:31:01:079   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:31:01:079   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:31:01:079   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:31:01:595 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:31:01:596      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:31:01:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:01:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:01:597      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:31:01:598      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:31:16:217 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_ALLRESET]
[11/07 14:31:16:218      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:31:16:238      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0054]
[11/07 14:31:16:238      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SE]
[11/07 14:31:16:238      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SE]
[11/07 14:31:16:238       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:31:16:239       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:31:16:239       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:31:16:244       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0054']
[11/07 14:31:16:277       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:31:16:278       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:31:16:278       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:31:16:282       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:31:16:282       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:31:16:283       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:31:16:283       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:31:16:284       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:31:16:284       DevDB.cpp(01106)] :pEJnl->Data [Reset all devices:[23f0002f]/[3d00000]<START_EJRNL>[ 11/07/2017 14:31:16 EJ NUMBER = 0054 ] |14:31:16 [RESET ALL DEVICES]<END_EJRNL>]
[11/07 14:31:16:284       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0132','SE','0054','11','07','2017','14','31','16','Reset all devices:[23f0002f]/[3d00000]<START_EJRNL>[ 11/07/2017 14:31:16 EJ NUMBER = 0054 ] |14:31:16 [RESET ALL DEVICES]<END_EJRNL>')]
[11/07 14:31:16:317       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:31:16:317       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:31:16:318       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:31:16:318       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:31:16:322       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:31:16:322       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:31:16:323       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:31:16:323       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[54]
[11/07 14:31:16:324       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [54]
[11/07 14:31:16:324       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[53], m_bRecordCountFinal=[1]
[11/07 14:31:16:356       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [54]
[11/07 14:31:16:357      DevApl.cpp(06310)] :TempEjrMdb.Data=[Reset all devices:[23f0002f]/[3d00000]<START_EJRNL>[ 11/07/2017 14:31:16 EJ NUMBER = 0054 ] |14:31:16 [RESET ALL DEVICES]<END_EJRNL>]
[11/07 14:31:16:357      DevApl.cpp(06316)] :strTempArray0=[Reset all devices:[23f0002f]/[3d00000]] / strTempArray1=[[ 11/07/2017 14:31:16 EJ NUMBER = 0054 ] |14:31:16 [RESET ALL DEVICES]<END_EJRNL>]
[11/07 14:31:16:357      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:31:16:357      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:31:16:382      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[23f0002f]) DeviceTran[40]
[11/07 14:31:16:382      DevCmn.cpp(00672)] :fstrSPR_GetRetractCnt():return(0)
[11/07 14:31:16:383      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 14:31:16:383      DevApl.cpp(02652)] :[INITIALIZE] : d,0
[11/07 14:31:16:384      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 14:31:16:384      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:31:16:386      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:31:16:390      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:31:16:397      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:31:16:398      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:31:16:400      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:31:16:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:31:16:402      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:31:16:402      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:31:16:403      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:31:16:405      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:31:16:406      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:31:16:407      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:31:16:407      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:31:16:407      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:31:16:443      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:31:16:443      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 14:31:24:530      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 14:31:24:530      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:31:24:530      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 14:31:27:934      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 14:31:27:934      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:31:27:934      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 14:31:27:934      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 14:31:36:465      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 14:31:39:668      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 14:31:42:825      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 14:31:42:825      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:31:43:012      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:31:43:028      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:31:43:043     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:31:43:043     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:31:43:090 AtmClerkCtrl.cp(00141)] :ClerkProc:strOpResult[NORMAL||OPERATION SUCCESSFUL!]
[11/07 14:31:43:434 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:31:43:434      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:31:43:434   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:43:434   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:43:434      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:31:43:434      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:31:45:063 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||1]
[11/07 14:31:45:064      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:31:45:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:45:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:45:065      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:31:45:382      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:31:45:527 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_RUN]
[11/07 14:31:45:872      DevCmn.cpp(05394)] :fnSNS_ClearOperatorSwitch()
[11/07 14:31:45:872      DevCmn.cpp(05401)] :fnSNS_ClearOperatorSwitch():return(0)
[11/07 14:31:45:875      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:31:45:961 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:31:45:962 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:31:45:962 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:31:46:063 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:31:46:065      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 14:31:46:076      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:31:46:103 AtmClerkCtrl.cp(00514)] :EMV Enabled.. Set Kernel Version [5]
[11/07 14:31:46:640 AtmClerkCtrl.cp(00525)] :OP_RUN ClerkProc:strOpResult[NORMAL||]
[11/07 14:31:46:748 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:31:46:748 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:31:46:748      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:31:46:749      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:31:46:749 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:31:47:039      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:31:47:297      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:31:47:298   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:31:47:298   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:31:47:298      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:31:47:299   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:47:299   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:47:311      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:31:47:311      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:31:47:311      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:31:47:311      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:31:47:311      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:31:47:312      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:31:47:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:31:47:318      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:31:47:325      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:31:47:326      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:31:47:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:31:47:329      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:31:47:330      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:31:47:331      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:31:47:332      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:31:47:333      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:31:47:352      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:31:47:352      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:31:47:381      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:31:47:401      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0055]
[11/07 14:31:47:401      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:31:47:402      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:31:47:402       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:31:47:402       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:31:47:402       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:31:47:407       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0055']
[11/07 14:31:47:440       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:31:47:440       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:31:47:441       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:31:47:445       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:31:47:445       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:31:47:446       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:31:47:446       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:31:47:446       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:31:47:447       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:31:47 EJ NUMBER = 0055 ] |14:31:47 [SERVICE MODE]<END_EJRNL>]
[11/07 14:31:47:447       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0055','11','07','2017','14','31','47','Change into service mode<START_EJRNL>[ 11/07/2017 14:31:47 EJ NUMBER = 0055 ] |14:31:47 [SERVICE MODE]<END_EJRNL>')]
[11/07 14:31:47:480       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:31:47:480       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:31:47:481       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:31:47:481       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:31:47:485       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:31:47:485       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:31:47:486       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:31:47:486       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[55]
[11/07 14:31:47:486       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [55]
[11/07 14:31:47:487       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[54], m_bRecordCountFinal=[1]
[11/07 14:31:47:519       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [55]
[11/07 14:31:47:520      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:31:47 EJ NUMBER = 0055 ] |14:31:47 [SERVICE MODE]<END_EJRNL>]
[11/07 14:31:47:520      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:31:47 EJ NUMBER = 0055 ] |14:31:47 [SERVICE MODE]<END_EJRNL>]
[11/07 14:31:47:520      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:31:47:550      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:31:47:664 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:31:47:664      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:31:47:664      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:31:47:664 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:31:47:665 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:31:47:665      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:31:47:665      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:31:47:916      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:31:48:183      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:31:48:183   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:31:48:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:31:48:184      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:31:48:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:48:185   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:48:197      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:31:48:197      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:31:48:197      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:31:48:197      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:31:48:197      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:31:48:198      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:31:48:200      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:31:48:204      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:31:48:210      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:31:48:211      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:31:48:213      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:31:48:214      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:31:48:215      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:31:48:216      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:31:48:218      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:31:48:219      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:31:48:239      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:31:48:239 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:31:48:239 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:31:48:239 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:31:48:243 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:31:48:243 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:31:48:247   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:31:48:247   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:31:48:248   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:31:48:248   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:31:48:248   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:31:48:249   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:31:48:249   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:31:48:249   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:31:48:250      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:31:48:250      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:31:48:250      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:31:48:250   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:31:48:250   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:31:48:250   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:31:48:250   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:31:48:251      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:31:48:251      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:31:48:251       Sound.cpp(00148)] :Stop
[11/07 14:31:48:251       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:31:48:252      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:31:48:252      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:31:48:252      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:31:48:252      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:31:48:253   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:48:253   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:48:254      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:31:48:254      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:31:48:257      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:31:49:341      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:31:49:342 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:31:49:449 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:31:49:502      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:31:49:616 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:31:49:616 AtmModeCtrl.cpp(01282)] :GetMemorySize[14417920]
[11/07 14:31:49:616 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:31:49:616      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:31:49:617      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:31:49:617   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:31:49:617   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:31:49:618   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:31:49:618   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:31:49:619 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:31:49:620 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:31:49:664      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:31:49:665      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:31:49:675      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:31:49:675      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:31:49:675      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:31:49:676      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:31:49:689      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:31:49:689 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:31:49:689 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:31:49:689 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:31:49:690 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:31:49:927      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:31:50:162      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:31:50:163   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:31:50:163   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:31:50:164 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:31:50:220     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:31:50:221     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:31:50:221     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:31:50:222     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:31:50:222     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:31:50:222     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:31:50:262     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:31:50:291     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:31:50:292     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:31:50:292 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:31:50:293 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:31:50:293      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:31:50:296   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:31:50:296   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:31:50:297   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:31:50:297   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:31:50:298 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:31:50:310      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:31:50:310      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:31:50:311   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:50:311   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:50:323      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:31:50:323      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:31:50:325      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:31:50:361      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:31:50:635 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:31:50:636   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:31:50:636   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:31:50:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:31:50:638   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:31:50:638   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:31:50:639   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:31:50:639 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:31:50:639      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:31:50:640      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:31:50:640      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:31:50:640   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:31:50:640   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:31:50:641   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:31:50:641   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:31:50:641      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:31:50:642      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:31:50:642       Sound.cpp(00148)] :Stop
[11/07 14:31:50:642       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:31:50:642      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:31:50:643      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:31:50:643      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:31:50:643      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:31:50:644   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:31:50:644   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:31:50:645      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:31:50:645      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:31:50:953      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:32:02:081      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:32:02:081 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 14:32:02:081      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:32:02:081      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:32:02:081 AtmModeCtrl.cpp(01741)] :strMCUErrorCode = [0000000]
[11/07 14:32:02:081 AtmModeCtrl.cpp(01760)] : ELSE => ATM_TRAN
[11/07 14:32:02:237 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:32:02:237 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:32:02:237 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:32:02:237 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:32:02:346 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:32:02:346      DevApl.cpp(01874)] :[TRAN START]
[11/07 14:32:02:346      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 14:32:02:565      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 14:32:02:581      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:32:02:581 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 14:32:02:596 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 14:32:02:596 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 14:32:02:612      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:32:02:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:32:02:627 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 14:32:02:659      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:32:02:659 TranDevProc.cpp(00526)] :fnAPD_CheckICCardType()
[11/07 14:32:02:674      DevCmn.cpp(01055)] :fstrMCU_GetICData()
[11/07 14:32:02:674      DevCmn.cpp(01060)] :fstrMCU_GetICData():return(3B781800000073C84013009000)
[11/07 14:32:02:674 TranDevProc.cpp(00541)] :fstrMCU_GetICData()=[3B781800000073C84013009000]
[11/07 14:32:02:674      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:32:02:674      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:32:02:674      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:32:02:674      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:32:02:674 TranDevProc.cpp(00554)] :fnAPD_CheckICCardType() return T_EMVCARD_INSERT
[11/07 14:32:02:674 TranDevProc.cpp(00560)] :fnAPD_InitialICCardProcessing()
[11/07 14:32:02:674      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:02:674      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:32:02:674      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:32:02:674   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:02:674   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:02:674   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 14:32:02:674   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 14:32:02:674      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:02:674      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 14:32:02:674       Sound.cpp(00148)] :Stop
[11/07 14:32:02:674       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:02:674      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:02:674      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:02:674      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:02:674      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:32:02:674   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:02:674   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:02:674      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:32:03:065      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:32:03:065      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 14:32:03:065      DevCmn.cpp(01402)] :fnEMV_SetKernelType(5)
[11/07 14:32:03:065      DevCmn.cpp(01406)] :EMV_SetTerminalType(EMV_TERMINAL_TYPE_14)
[11/07 14:32:03:065      DevCmn.cpp(01413)] :fnEMV_SetKernelType(.);return(1)
[11/07 14:32:03:065 TranDevProc.cpp(00576)] :fnEMV_SetKernelType(5) = [1]
[11/07 14:32:03:065      DevCmn.cpp(01429)] :fnEMV_SystemInitial()
[11/07 14:32:03:065      DevCmn.cpp(01434)] :fnEMV_SystemInitial(.);return(1)
[11/07 14:32:03:065 TranDevProc.cpp(00585)] :fnEMV_SystemInitial() = [1]
[11/07 14:32:03:065      DevCmn.cpp(01440)] :fnEMV_Sel_BuildCandidateApp()
[11/07 14:32:06:518      DevCmn.cpp(01457)] :fnEMV_Sel_BuildCandidateApp():return(1)
[11/07 14:32:06:518 TranDevProc.cpp(00593)] :fnEMV_Sel_BuildCandidateApp() = [1]
[11/07 14:32:06:518 TranDevProc.cpp(01089)] :fnAPD_EMVSelectAID()
[11/07 14:32:06:518      DevCmn.cpp(01464)] :fnEMV_Sel_GetAppListEx()
[11/07 14:32:06:565      DevCmn.cpp(01471)] :m_pMwiEmv->EMV_Sel_GetAppList(..):return 1
[11/07 14:32:06:565      DevCmn.cpp(01478)] :fnEMV_Sel_GetAppList():return(0001010F4352454449544F204445205649534107A0000000031010)
[11/07 14:32:06:565 TranDevProc.cpp(01099)] :fnEMV_Sel_GetAppListEx() = [0001010F4352454449544F204445205649534107A0000000031010]
[11/07 14:32:06:565 TranDevProc.cpp(01117)] :UserConfirm=[0], Number of AID = [1]
[11/07 14:32:06:565 TranDevProc.cpp(00670)] :fnAPD_EMVUserAIDLoad(nAIDNum=[1], strAID=[010F4352454449544F204445205649534107A0000000031010])
[11/07 14:32:06:565 TranDevProc.cpp(00700)] :AID List : [010F4352454449544F204445205649534107A0000000031010]
[11/07 14:32:06:565 TranDevProc.cpp(00715)] :AID List without 9F11 tag : [0F4352454449544F204445205649534107A0000000031010]
[11/07 14:32:06:565 TranDevProc.cpp(00716)] :Issuer Code Index : [ISO8859_01]
[11/07 14:32:06:581 TranDevProc.cpp(00764)] :Data before PACK : [4300520045004400490054004F0020004400450020005600490053004100]
[11/07 14:32:06:581 TranDevProc.cpp(00768)] :Packed length : [30]
[11/07 14:32:06:581 TranDevProc.cpp(00322)] :fnAPD_WCStoMBS - WCHAR   : [004300520045004400490054004F00200044004500200056004900530041]
[11/07 14:32:06:581 TranDevProc.cpp(00331)] :fnAPD_WCStoMBS - CHAR    : [4352454449544F204445205649534100]
[11/07 14:32:06:581 TranDevProc.cpp(00340)] :fnAPD_WCStoMBS - CString : [4352454449544F2044452056495341]
[11/07 14:32:06:581 TranDevProc.cpp(00786)] :Parsed AID [1], AID=[A0000000031010], DESC=[CREDITO DE VISA], FLAG=[TRUE]
[11/07 14:32:06:581 TranDevProc.cpp(00801)] :Continue = [0], Remain AIDList =[07A0000000031010]
[11/07 14:32:06:581 TranDevProc.cpp(00805)] :Max AID = [1]
[11/07 14:32:06:581 TranDevProc.cpp(01121)] :AID Number = [1], Max AID = [1]
[11/07 14:32:06:581      DevCmn.cpp(01505)] :fnEMV_Sel_FinalAppSelection(0)
[11/07 14:32:07:049      DevCmn.cpp(01510)] :fnEMV_Sel_FinalAppSelection():return(1)
[11/07 14:32:07:049 TranDevProc.cpp(01158)] :fnEMV_Sel_FinalAppSelection(0) = [1]
[11/07 14:32:07:049      DevCmn.cpp(01516)] :fnEMV_InitAppProcess(00, 000000000000, 171107143207, 2)
[11/07 14:32:07:424      DevCmn.cpp(01520)] :fnEMV_InitAppProcess(....):return(1)
[11/07 14:32:07:424 TranDevProc.cpp(01174)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_InitAppProcess:nResult(1)
[11/07 14:32:07:424 TranDevProc.cpp(01203)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID = [A0000000031010]
[11/07 14:32:07:424 TranDevProc.cpp(01204)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID Label = [CREDITO DE VISA]
[11/07 14:32:07:424 TranDevProc.cpp(00607)] :fnAPD_EMVSelectAID() = [1]
[11/07 14:32:07:424      DevCmn.cpp(01526)] :fnEMV_ReadAppData()
[11/07 14:32:10:112      DevCmn.cpp(01531)] :fnEMV_ReadAppData():return(1)
[11/07 14:32:10:112 TranDevProc.cpp(00623)] :m_pDevCmn->fnEMV_ReadAppData():nResult(1)
[11/07 14:32:10:112 TranLibProc.cpp(00538)] :CTranCmn::fnAPL_EmvMakeCardPanProc()
[11/07 14:32:10:112      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 14:32:10:127      DevCmn.cpp(01563)] :fnEMV_GetVal(66):return(Data Length = [0] )
[11/07 14:32:10:127 TranDevProc.cpp(00655)] :fnEMV_GetVal(EMVTid_LangPrefer) = []
[11/07 14:32:10:127      DevCmn.cpp(01421)] :fnEMV_SetConfig(1)
[11/07 14:32:10:127 TranDevProc.cpp(00659)] :fnEMV_SetConfig(EMV_CONFIG_TYPE_ONLINEPIN)
[11/07 14:32:10:127 TranDevProc.cpp(00662)] :fnAPD_InitialICCardProcessing():return OK
[11/07 14:32:10:127 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 14:32:10:143 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 14:32:10:143 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 14:32:10:159 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 14:32:10:159 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:32:10:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:32:10:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:32:10:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:32:10:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:32:10:159 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:32:10:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 14:32:10:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:32:10:159      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:10:159      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:32:10:159      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:32:10:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:10:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:10:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 14:32:10:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 14:32:10:159      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:10:159      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 14:32:10:159       Sound.cpp(00148)] :Stop
[11/07 14:32:10:159       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:10:159      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:10:159      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:10:159      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:10:159      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:32:10:159   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:10:159   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:10:159      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:32:10:159      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:32:10:159      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 14:32:11:456   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 14:32:11:456   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 14:32:11:456      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 14:32:11:456      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:32:11:634      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:32:11:634 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:32:11:635 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 14:32:11:635 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:32:11:635 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:32:11:636   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:32:11:636   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:32:11:636 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 14:32:11:636 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:32:11:637 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 14:32:11:637 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 14:32:11:637 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 14:32:11:638   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:32:11:638   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:32:11:639   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 14:32:11:639   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 14:32:11:640   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:32:11:640   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:32:11:640   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:32:11:641   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:32:11:641   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:32:11:641   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:32:11:642   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:32:11:642   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:32:11:643   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:32:11:643   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:32:11:644   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:32:11:644   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:32:11:644   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:32:11:645   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:32:11:645      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:11:645      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:32:11:645      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:32:11:646   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:11:646   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:11:646   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 14:32:11:647   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 14:32:11:647      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:11:647      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 14:32:11:648       Sound.cpp(00148)] :Stop
[11/07 14:32:11:648       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:11:648      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:11:648      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:11:648      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:11:649      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 14:32:11:649   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:11:649   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:11:650      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 14:32:11:650      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:32:11:942      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 14:32:14:231   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:14:231   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:14:232   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:14:232   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:14:232   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:14:682   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:14:682   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:14:683   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:14:683   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:14:683   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:15:049   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:15:049   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:15:050   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:15:050   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:15:050   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:15:414   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:15:414   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:15:415   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:15:415   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:15:415   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:15:715   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:15:715   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:15:716   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:15:716   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:15:716   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:16:016   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:16:016   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:16:017   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:16:017   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:16:017   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:16:836   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:32:16:836   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:32:16:837   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:32:16:837   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:16:837   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:32:18:277   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:32:18:277   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:32:18:278   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:32:18:278   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:32:18:278   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:32:18:368   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000000]
[11/07 14:32:18:368   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000000)
[11/07 14:32:18:368      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 14:32:18:369      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:32:18:582      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:32:18:582 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:32:18:583 TranMenuProc.cp(00637)] :GetKeyStr=[0000000]
[11/07 14:32:18:583 TranMenuProc.cp(00676)] :Password Mode Input=[0000000]   return OK
[11/07 14:32:18:583 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:32:18:583      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 14:32:18:607 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 14:32:18:607 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 14:32:18:607 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 14:32:18:608 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 14:32:18:608 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:32:18:608   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:32:18:609   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:32:18:609   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:32:18:609   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:32:18:610   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:32:18:610   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:32:18:611   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:32:18:611   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:32:18:612   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:32:18:612   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:32:18:612 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 14:32:18:613   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 14:32:18:613   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 14:32:18:613      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:18:613      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:32:18:614      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:32:18:614      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:32:18:614   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:18:614   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:18:615      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:32:18:615      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:32:18:615      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:32:18:615      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:18:616      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 14:32:18:616       Sound.cpp(00148)] :Stop
[11/07 14:32:18:616       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:18:616      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:18:616      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:18:617      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:18:617      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:32:18:617   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:18:617   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:18:618      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:32:18:619      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:32:18:621      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 14:32:48:734 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 14:32:48:734 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 14:32:48:734 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 14:32:48:734 TranLibProc.cpp(01063)] :fnAPL_EmvRemoveICCard(nFailReason=[-1], bFallBackTr=[0])
[11/07 14:32:48:734      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(2)
[11/07 14:32:48:734 TranLibProc.cpp(01067)] :fnAPL_EmvRemoveICCard::m_pDevCmn->fnMCU_GetMaterialInfo():nSensor[2]
[11/07 14:32:48:734 TranLibProc.cpp(01111)] :Remove Card - Display Message = [CANCELLED]
[11/07 14:32:48:734 TranLibProc.cpp(01125)] :fnAPL_EmvRemoveICCard Start, Time Out= [120 seconds]
[11/07 14:32:48:734      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:32:48:734   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [CANCELLED])
[11/07 14:32:48:734   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/CANCELLED]
[11/07 14:32:48:734      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:48:734      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:32:48:734      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:32:48:734   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:48:734   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:48:734   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD027.swf])
[11/07 14:32:48:734   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD027.swf]
[11/07 14:32:48:734      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:48:734      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:32:48:734       Sound.cpp(00148)] :Stop
[11/07 14:32:48:734       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:48:734      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:48:734      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:48:734      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:48:734      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:32:48:734   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:48:734   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:48:734      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:32:49:125      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:32:49:125      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0]):return(0)
[11/07 14:32:49:125 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:32:49:140      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:32:49:140      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:32:49:140   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:49:140   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:49:156      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 14:32:49:156      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 14:32:49:156      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 14:32:49:203      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:32:49:203 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:32:50:133      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(1)
[11/07 14:32:50:387      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(0)
[11/07 14:32:50:387 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:32:50:399      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:32:50:399   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:50:400   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:50:412      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:32:50:412      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:32:50:413      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:32:50:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:32:50:426 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:32:50:427      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(3)
[11/07 14:32:50:427      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(3), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:32:50:427       Sound.cpp(00148)] :Stop
[11/07 14:32:50:427       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:50:428      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:32:50:431 TranLibProc.cpp(01220)] :Exit Waiting loop... Sensor Status = [0]
[11/07 14:32:50:431 TranLibProc.cpp(01224)] :fnAPL_EmvRemoveICCard return TRUE
[11/07 14:32:50:431 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:32:50:443      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:32:50:443   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:50:444   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:50:456      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:32:50:456      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:32:50:456      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:32:50:467      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:32:50:470 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:32:50:470 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 14:32:50:470 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:32:50:470      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:32:50:473      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:32:50:476      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:32:50:482      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:32:50:483      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:32:50:484      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:32:50:485      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:32:50:486      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:32:50:487      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:32:50:488      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:32:50:489      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:32:50:491      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:50:491      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:32:50:491      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:32:50:491   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:50:492   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:50:492   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 14:32:50:492   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 14:32:50:493      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:50:493      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 14:32:50:493       Sound.cpp(00148)] :Stop
[11/07 14:32:50:493       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:50:494      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:50:494      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:50:494      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:50:494      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:32:50:495   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:50:495   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:50:496      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:32:50:496      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:32:50:496      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 14:32:54:334 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 14:32:54:334 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 14:32:54:334 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 14:32:54:334 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:32:54:334 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:32:54:334 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:32:54:334 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 14:32:54:334 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 14:32:54:334 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:32:54:381 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:32:54:381 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 14:32:54:600   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:32:54:600   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:32:54:600      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:32:54:600 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 14:32:54:600 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 14:32:54:600 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:32:54:616 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:32:54:616 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:32:54:616 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:32:54:663      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:32:54:819 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:32:54:819 AtmModeCtrl.cpp(01282)] :GetMemorySize[18612224]
[11/07 14:32:54:819 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:32:54:819      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:32:54:819      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:32:54:819   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:32:54:819   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:32:54:819   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:32:54:819   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:32:54:819 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:32:54:819 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:32:54:834      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:32:54:834      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:32:54:850      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:32:54:850      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:32:54:850      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:32:54:850      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:32:54:850      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:32:54:850 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:32:54:850 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:32:54:850 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:32:54:850 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:32:55:069      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:32:55:303      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:32:55:319      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:32:55:319   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:32:55:319   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:32:55:319 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:32:55:381     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:32:55:381     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:32:55:381     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:32:55:381     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:32:55:381     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:32:55:381     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:32:55:413     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:32:55:444     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:32:55:444     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:32:55:444 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:32:55:444 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:32:55:444      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:32:55:444   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:32:55:444   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:32:55:459   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:32:55:459   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:32:55:459 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:32:55:475      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:32:55:475      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:32:55:475   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:55:475   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:55:491      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:32:55:491      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:32:55:491      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:32:55:569      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:32:55:569 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:32:55:569   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:32:55:569   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:32:55:569   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:32:55:569   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:32:55:569   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:32:55:569   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:32:55:569 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:32:55:569      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:32:55:569      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:32:55:569      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:32:55:569   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:32:55:569   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:32:55:569   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:32:55:569   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:32:55:569      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:32:55:569      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:32:55:569       Sound.cpp(00148)] :Stop
[11/07 14:32:55:569       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:32:55:569      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:32:55:569      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:32:55:569      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:32:55:569      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:32:55:569   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:32:55:569   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:32:55:569      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:32:55:569      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:32:55:569      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:51:52:108   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:108   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:108   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:108   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:108   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:51:52:166   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:166   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:166   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:166   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:166   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:51:52:222   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:222   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:223   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:223   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:223   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:51:52:287   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:287   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:288   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:288   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:288   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:51:52:347   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:347   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:348   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:348   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:348   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:51:52:448   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:448   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:448   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:448   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:448   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:51:52:508   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:51:52:508   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:51:52:508   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:51:52:508   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:51:52:508   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:52:08:642      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:52:08:642 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 14:52:08:642      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:52:08:642      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:52:08:642 AtmModeCtrl.cpp(01560)] :strMCUErrorCode = [0000000]
[11/07 14:52:08:642 AtmModeCtrl.cpp(01577)] : Main Menu EVENT (MCR OR SCR) => ATM_TRAN
[11/07 14:52:08:798 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:52:08:798 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:52:08:798 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:52:08:798 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:52:08:908 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:52:08:908      DevApl.cpp(01874)] :[TRAN START]
[11/07 14:52:08:908      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 14:52:09:142      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 14:52:09:142      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:52:09:142 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 14:52:09:158 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 14:52:09:173 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 14:52:09:173      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:52:09:189      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:52:09:189 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 14:52:09:212      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 14:52:09:212 TranDevProc.cpp(00526)] :fnAPD_CheckICCardType()
[11/07 14:52:09:228      DevCmn.cpp(01055)] :fstrMCU_GetICData()
[11/07 14:52:09:228      DevCmn.cpp(01060)] :fstrMCU_GetICData():return(3B781800000073C84013009000)
[11/07 14:52:09:228 TranDevProc.cpp(00541)] :fstrMCU_GetICData()=[3B781800000073C84013009000]
[11/07 14:52:09:228      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:52:09:228      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:52:09:228      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:52:09:228      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:52:09:228 TranDevProc.cpp(00554)] :fnAPD_CheckICCardType() return T_EMVCARD_INSERT
[11/07 14:52:09:228 TranDevProc.cpp(00560)] :fnAPD_InitialICCardProcessing()
[11/07 14:52:09:228      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:09:228      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:52:09:228      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 14:52:09:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:09:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:09:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 14:52:09:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 14:52:09:228      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:09:228      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 14:52:09:228       Sound.cpp(00148)] :Stop
[11/07 14:52:09:228       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:09:228      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:09:236      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:09:236      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:09:236      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:52:09:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:09:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:09:236      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:52:09:580      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:52:09:580      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 14:52:09:580      DevCmn.cpp(01402)] :fnEMV_SetKernelType(5)
[11/07 14:52:09:580      DevCmn.cpp(01406)] :EMV_SetTerminalType(EMV_TERMINAL_TYPE_14)
[11/07 14:52:09:580      DevCmn.cpp(01413)] :fnEMV_SetKernelType(.);return(1)
[11/07 14:52:09:580 TranDevProc.cpp(00576)] :fnEMV_SetKernelType(5) = [1]
[11/07 14:52:09:580      DevCmn.cpp(01429)] :fnEMV_SystemInitial()
[11/07 14:52:09:580      DevCmn.cpp(01434)] :fnEMV_SystemInitial(.);return(1)
[11/07 14:52:09:587 TranDevProc.cpp(00585)] :fnEMV_SystemInitial() = [1]
[11/07 14:52:09:587      DevCmn.cpp(01440)] :fnEMV_Sel_BuildCandidateApp()
[11/07 14:52:12:283      DevCmn.cpp(01457)] :fnEMV_Sel_BuildCandidateApp():return(1)
[11/07 14:52:12:283 TranDevProc.cpp(00593)] :fnEMV_Sel_BuildCandidateApp() = [1]
[11/07 14:52:12:283 TranDevProc.cpp(01089)] :fnAPD_EMVSelectAID()
[11/07 14:52:12:283      DevCmn.cpp(01464)] :fnEMV_Sel_GetAppListEx()
[11/07 14:52:12:345      DevCmn.cpp(01471)] :m_pMwiEmv->EMV_Sel_GetAppList(..):return 1
[11/07 14:52:12:345      DevCmn.cpp(01478)] :fnEMV_Sel_GetAppList():return(0001010F4352454449544F204445205649534107A0000000031010)
[11/07 14:52:12:345 TranDevProc.cpp(01099)] :fnEMV_Sel_GetAppListEx() = [0001010F4352454449544F204445205649534107A0000000031010]
[11/07 14:52:12:345 TranDevProc.cpp(01117)] :UserConfirm=[0], Number of AID = [1]
[11/07 14:52:12:345 TranDevProc.cpp(00670)] :fnAPD_EMVUserAIDLoad(nAIDNum=[1], strAID=[010F4352454449544F204445205649534107A0000000031010])
[11/07 14:52:12:345 TranDevProc.cpp(00700)] :AID List : [010F4352454449544F204445205649534107A0000000031010]
[11/07 14:52:12:345 TranDevProc.cpp(00715)] :AID List without 9F11 tag : [0F4352454449544F204445205649534107A0000000031010]
[11/07 14:52:12:345 TranDevProc.cpp(00716)] :Issuer Code Index : [ISO8859_01]
[11/07 14:52:12:345 TranDevProc.cpp(00764)] :Data before PACK : [4300520045004400490054004F0020004400450020005600490053004100]
[11/07 14:52:12:345 TranDevProc.cpp(00768)] :Packed length : [30]
[11/07 14:52:12:345 TranDevProc.cpp(00322)] :fnAPD_WCStoMBS - WCHAR   : [004300520045004400490054004F00200044004500200056004900530041]
[11/07 14:52:12:345 TranDevProc.cpp(00331)] :fnAPD_WCStoMBS - CHAR    : [4352454449544F204445205649534100]
[11/07 14:52:12:345 TranDevProc.cpp(00340)] :fnAPD_WCStoMBS - CString : [4352454449544F2044452056495341]
[11/07 14:52:12:345 TranDevProc.cpp(00786)] :Parsed AID [1], AID=[A0000000031010], DESC=[CREDITO DE VISA], FLAG=[TRUE]
[11/07 14:52:12:345 TranDevProc.cpp(00801)] :Continue = [0], Remain AIDList =[07A0000000031010]
[11/07 14:52:12:345 TranDevProc.cpp(00805)] :Max AID = [1]
[11/07 14:52:12:345 TranDevProc.cpp(01121)] :AID Number = [1], Max AID = [1]
[11/07 14:52:12:345      DevCmn.cpp(01505)] :fnEMV_Sel_FinalAppSelection(0)
[11/07 14:52:12:736      DevCmn.cpp(01510)] :fnEMV_Sel_FinalAppSelection():return(1)
[11/07 14:52:12:736 TranDevProc.cpp(01158)] :fnEMV_Sel_FinalAppSelection(0) = [1]
[11/07 14:52:12:736      DevCmn.cpp(01516)] :fnEMV_InitAppProcess(00, 000000000000, 171107145212, 2)
[11/07 14:52:13:025      DevCmn.cpp(01520)] :fnEMV_InitAppProcess(....):return(1)
[11/07 14:52:13:025 TranDevProc.cpp(01174)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_InitAppProcess:nResult(1)
[11/07 14:52:13:025 TranDevProc.cpp(01203)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID = [A0000000031010]
[11/07 14:52:13:025 TranDevProc.cpp(01204)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID Label = [CREDITO DE VISA]
[11/07 14:52:13:025 TranDevProc.cpp(00607)] :fnAPD_EMVSelectAID() = [1]
[11/07 14:52:13:025      DevCmn.cpp(01526)] :fnEMV_ReadAppData()
[11/07 14:52:15:533      DevCmn.cpp(01531)] :fnEMV_ReadAppData():return(1)
[11/07 14:52:15:533 TranDevProc.cpp(00623)] :m_pDevCmn->fnEMV_ReadAppData():nResult(1)
[11/07 14:52:15:533 TranLibProc.cpp(00538)] :CTranCmn::fnAPL_EmvMakeCardPanProc()
[11/07 14:52:15:533      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 14:52:15:548      DevCmn.cpp(01563)] :fnEMV_GetVal(66):return(Data Length = [0] )
[11/07 14:52:15:548 TranDevProc.cpp(00655)] :fnEMV_GetVal(EMVTid_LangPrefer) = []
[11/07 14:52:15:548      DevCmn.cpp(01421)] :fnEMV_SetConfig(1)
[11/07 14:52:15:564 TranDevProc.cpp(00659)] :fnEMV_SetConfig(EMV_CONFIG_TYPE_ONLINEPIN)
[11/07 14:52:15:564 TranDevProc.cpp(00662)] :fnAPD_InitialICCardProcessing():return OK
[11/07 14:52:15:564 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 14:52:15:580 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 14:52:15:580 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 14:52:15:595 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 14:52:15:595 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:52:15:595   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:52:15:595   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:52:15:595   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:52:15:595   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:52:15:595 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:52:15:595   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 14:52:15:595   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 14:52:15:611      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:15:611      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:52:15:611      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 14:52:15:611   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:15:611   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:15:611   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 14:52:15:611   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 14:52:15:611      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:15:611      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 14:52:15:611       Sound.cpp(00148)] :Stop
[11/07 14:52:15:611       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:15:611      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:15:611      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:15:611      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:15:611      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:52:15:611   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:15:611   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:15:611      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:52:15:611      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:52:15:611      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 14:52:16:908   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 14:52:16:908   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 14:52:16:908      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 14:52:16:908      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:52:17:019      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:52:17:019 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:52:17:020 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 14:52:17:020 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 14:52:17:020 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:52:17:021   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:52:17:021   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:52:17:021 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 14:52:17:021 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:52:17:022 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 14:52:17:022 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 14:52:17:022 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 14:52:17:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:52:17:023   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:52:17:023   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 14:52:17:024   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 14:52:17:024   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:52:17:024   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:52:17:025   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 14:52:17:025   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 14:52:17:026   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:52:17:026   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:52:17:027   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 14:52:17:027   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 14:52:17:027   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:52:17:027   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:52:17:028   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:52:17:028   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:52:17:029   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:52:17:029   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:52:17:029      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:17:030      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:52:17:030      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 14:52:17:030   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:17:030   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:17:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 14:52:17:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 14:52:17:031      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:17:032      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 14:52:17:032       Sound.cpp(00148)] :Stop
[11/07 14:52:17:032       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:17:032      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:17:033      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:17:033      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:17:033      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 14:52:17:033   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:17:034   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:17:034      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 14:52:17:035      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:52:17:337      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 14:52:18:224   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:52:18:224   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:52:18:224   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:52:18:225   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:18:225   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:52:18:587   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:52:18:587   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:52:18:588   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:52:18:588   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:18:588   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:52:18:957   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:52:18:957   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:52:18:958   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:52:18:958   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:18:958   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:52:19:289   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 14:52:19:289   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:52:19:290   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 14:52:19:290   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:19:290   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 14:52:20:500   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:52:20:500   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:52:20:501   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:52:20:501   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:20:501   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:52:20:537   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 14:52:20:537   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 14:52:20:537      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 14:52:20:538      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 14:52:20:602      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 14:52:20:602 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 14:52:20:603 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 14:52:20:603 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 14:52:20:603 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 14:52:20:603      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 14:52:20:737 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 14:52:20:737 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 14:52:20:737 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 14:52:20:737 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 14:52:20:738 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 14:52:20:739   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 14:52:20:739   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 14:52:20:739   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 14:52:20:740   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 14:52:20:740   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 14:52:20:740   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 14:52:20:741   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 14:52:20:741   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 14:52:20:742   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 14:52:20:742   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 14:52:20:742 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 14:52:20:743   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 14:52:20:743   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 14:52:20:743      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:20:744      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:52:20:744      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:52:20:744      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:52:20:744   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:20:744   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:20:745      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:52:20:745      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 14:52:20:745      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 14:52:20:745      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:20:746      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 14:52:20:746       Sound.cpp(00148)] :Stop
[11/07 14:52:20:746       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:20:746      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:20:747      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:20:747      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:20:747      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:52:20:747   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:20:748   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:20:749      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:52:20:749      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:52:20:750      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 14:52:22:344   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:52:22:344   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:52:22:345   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:52:22:345   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:22:345   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:52:23:918   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:52:23:918   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:52:23:919   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:52:23:919   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:23:919   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:52:50:962 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 14:52:50:962 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 14:52:50:962 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 14:52:50:962 TranLibProc.cpp(01063)] :fnAPL_EmvRemoveICCard(nFailReason=[-1], bFallBackTr=[0])
[11/07 14:52:50:962      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(2)
[11/07 14:52:50:962 TranLibProc.cpp(01067)] :fnAPL_EmvRemoveICCard::m_pDevCmn->fnMCU_GetMaterialInfo():nSensor[2]
[11/07 14:52:50:962 TranLibProc.cpp(01111)] :Remove Card - Display Message = [CANCELLED]
[11/07 14:52:50:962 TranLibProc.cpp(01125)] :fnAPL_EmvRemoveICCard Start, Time Out= [120 seconds]
[11/07 14:52:50:962      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:52:50:962   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [CANCELLED])
[11/07 14:52:50:962   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/CANCELLED]
[11/07 14:52:50:962      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:50:962      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:52:50:962      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD027.swf)
[11/07 14:52:50:962   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:50:962   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:50:962   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD027.swf])
[11/07 14:52:50:962   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD027.swf]
[11/07 14:52:50:962      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:50:962      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:52:50:962       Sound.cpp(00148)] :Stop
[11/07 14:52:50:962       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:50:962      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:50:962      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:50:962      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:50:962      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:52:50:962   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:50:962   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:50:962      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:52:51:369      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:52:51:369      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0]):return(0)
[11/07 14:52:51:369 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:52:51:384      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:52:51:384      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:52:51:384   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:51:384   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:51:400      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 14:52:51:400      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 14:52:51:416      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 14:52:51:462      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:52:51:462 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:52:53:328      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(0)
[11/07 14:52:53:328 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:52:53:339      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:52:53:339   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:53:340   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:53:352      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:52:53:352      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:52:53:353      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:52:53:365      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:52:53:368 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:52:53:368      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(3)
[11/07 14:52:53:368      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(3), nPlayIndex=(0), nScreenNo=(27)
[11/07 14:52:53:369       Sound.cpp(00148)] :Stop
[11/07 14:52:53:369       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:53:369      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:52:53:372 TranLibProc.cpp(01220)] :Exit Waiting loop... Sensor Status = [0]
[11/07 14:52:53:372 TranLibProc.cpp(01224)] :fnAPL_EmvRemoveICCard return TRUE
[11/07 14:52:53:372 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:52:53:383      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:52:53:383   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:53:384   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:53:396      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:52:53:396      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:52:53:396      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:52:53:408      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:52:53:411 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:52:53:411 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 14:52:53:411 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 14:52:53:411      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:52:53:414      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:52:53:416      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:52:53:421      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:52:53:422      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:52:53:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:52:53:424      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:52:53:425      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:52:53:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:52:53:427      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:52:53:428      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:52:53:430      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:53:430      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:52:53:430      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 14:52:53:430   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:53:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:53:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 14:52:53:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 14:52:53:432      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:53:432      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 14:52:53:432       Sound.cpp(00148)] :Stop
[11/07 14:52:53:432       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:53:433      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:53:433      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:53:433      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:53:433      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:52:53:434   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:53:434   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:53:435      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:52:53:435      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:52:53:435      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 14:52:57:388 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 14:52:57:388 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 14:52:57:388 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 14:52:57:388 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:52:57:388 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:52:57:388 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:52:57:388 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 14:52:57:388 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 14:52:57:388 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:52:57:435 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:52:57:435 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 14:52:57:669   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:52:57:669   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:52:57:669      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:52:57:669 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 14:52:57:669 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 14:52:57:669 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:52:57:669 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:52:57:669 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:52:57:669 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:52:57:732      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:52:57:888 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:52:57:888 AtmModeCtrl.cpp(01282)] :GetMemorySize[17563648]
[11/07 14:52:57:888 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:52:57:888      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:52:57:888      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:52:57:888   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:52:57:888   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:52:57:888   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:52:57:888   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:52:57:888 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:52:57:888 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:52:57:919      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:52:57:919      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:52:57:935      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:52:57:935      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:52:57:935      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:52:57:935      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:52:57:935      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:52:57:935 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:52:57:935 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:52:57:935 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:52:57:935 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:52:58:185      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:52:58:435      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:52:58:435      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:52:58:451   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:52:58:451   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:52:58:451 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 14:52:58:529     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:52:58:529     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:52:58:529     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:52:58:529     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:52:58:529     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:52:58:529     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:52:58:576     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:52:58:607     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:52:58:607     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:52:58:607 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:52:58:623 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:52:58:623      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:52:58:623   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:52:58:623   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:52:58:623   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:52:58:623   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:52:58:623 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:52:58:638      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:52:58:638      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:52:58:638   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:58:638   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:58:654      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:52:58:654      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:52:58:654      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:52:58:732      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:52:58:732 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:52:58:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:52:58:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:52:58:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:52:58:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:52:58:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:52:58:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:52:58:732 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:52:58:732      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:52:58:732      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:52:58:732      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:52:58:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:52:58:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:52:58:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:52:58:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:52:58:732      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:52:58:732      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:52:58:732       Sound.cpp(00148)] :Stop
[11/07 14:52:58:732       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:52:58:732      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:52:58:732      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:52:58:732      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:52:58:732      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:52:58:732   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:52:58:732   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:52:58:732      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:52:58:732      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:52:58:732      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:52:59:625   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:52:59:625   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:52:59:625   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:52:59:625   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:59:625   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:52:59:888   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:52:59:888   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:52:59:889   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:52:59:889   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:52:59:889   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:53:00:138   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:00:138   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:00:138   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:00:139   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:00:139   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:00:382   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 14:53:00:382   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:00:383   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 14:53:00:383   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 14:53:00:383   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 14:53:00:608   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 14:53:00:608   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:00:608   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 14:53:00:608   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 14:53:00:608   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 14:53:00:758   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 14:53:00:758   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:00:758   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 14:53:00:758   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 14:53:01:061      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 14:53:01:079      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:53:01:084 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 14:53:01:668      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:53:01:976      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:53:01:976      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:53:01:976   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:53:01:976   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:53:01:976      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:53:01:976   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:01:976   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:01:992      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:53:01:992      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:53:01:992      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:53:01:992      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:53:02:367      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:53:02:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:53:02:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:53:02:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:53:02:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:53:02:367      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:53:02:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:53:02:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:53:02:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:53:02:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:53:02:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:53:02:382      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:53:03:085      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:53:03:085 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:53:03:101      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:53:03:101   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:03:101   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:03:117      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:53:03:117      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:53:03:117      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:53:03:132      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:53:03:132 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:53:03:289 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:53:03:289 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:53:03:289      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:53:03:289      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:53:03:289 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:53:03:507      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:53:03:742      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:53:03:742   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:53:03:742   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:53:03:742      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:53:03:742   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:03:742   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:03:757      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:53:03:757      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:53:03:757      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:53:03:757      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:53:03:757      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:53:03:757      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:53:03:757      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:53:03:757      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:53:03:757      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:53:03:757      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:53:03:773      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:53:03:773      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:53:03:773      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:53:03:773      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:53:03:773      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:53:03:773      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:53:03:804      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 14:53:03:804      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:53:03:804      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:53:03:804      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:53:03:804      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:53:03:804      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:53:03:804       Sound.cpp(00148)] :Stop
[11/07 14:53:03:804       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:53:03:804      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:53:03:804      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:53:03:804      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:53:03:804      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:53:03:804   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:03:804   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:03:804      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:53:03:804      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:53:03:804      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:53:03:804      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:53:03:835 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 14:53:03:835      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:53:03:867      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0056]
[11/07 14:53:03:867      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 14:53:03:867      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 14:53:03:867       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:53:03:867       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:53:03:867       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:53:03:882       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0056']
[11/07 14:53:03:945       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:53:03:945       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:53:03:945       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:53:03:945       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:53:03:945       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:53:03:945       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:53:03:945       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:53:03:945       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:53:03:945       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 14:53:03 EJ NUMBER = 0056 ] |14:53:03 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:53:03:945       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0056','11','07','2017','14','53','03','Change into operator mode<START_EJRNL>[ 11/07/2017 14:53:03 EJ NUMBER = 0056 ] |14:53:03 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 14:53:03:992       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:53:03:992       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:53:03:992       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:53:03:992       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:53:03:992       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:53:03:992       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:53:03:992       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:53:03:992       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[56]
[11/07 14:53:03:992       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [56]
[11/07 14:53:03:992       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[55], m_bRecordCountFinal=[1]
[11/07 14:53:04:039       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [56]
[11/07 14:53:04:039      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 14:53:03 EJ NUMBER = 0056 ] |14:53:03 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:53:04:039      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 14:53:03 EJ NUMBER = 0056 ] |14:53:03 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:53:04:039      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:53:04:039      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:53:04:054      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:53:04:070     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:53:04:070     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:53:04:117 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:53:04:117 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:53:04:117 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:53:04:226 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:53:05:101 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:05:101      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:05:101   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:05:101   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:05:101      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:05:101      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:05:477   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:05:477   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:05:477   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:05:478   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:05:478   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:05:617   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:05:617   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:05:618   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:05:618   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:05:618   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:05:778   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:05:778   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:05:778   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:05:778   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:05:778   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:05:918   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:05:918   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:05:918   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:05:919   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:05:919   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:06:058   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:06:058   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:06:058   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:06:058   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:06:058   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:06:218   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:06:218   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:06:218   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:06:218   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:06:218   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:06:848   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:53:06:848   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:53:06:849   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:53:06:849   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:06:849   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:53:06:860   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:53:06:860   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:53:06:861   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:53:06:861   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:06:861   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:53:08:505   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:08:505   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:08:505   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:08:506   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:08:506   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:08:726   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:08:726   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:08:726   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:08:726   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:08:726   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:08:808   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:08:808   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:08:808   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:08:808   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:08:808   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:08:999   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:08:999   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:08:999   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:08:999   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:08:999   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:09:151   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:09:151   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:09:152   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:09:152   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:09:152   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:09:294   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:09:295   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:09:295   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:09:295   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:09:295   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:09:388   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:09:388   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:09:388   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:09:388   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:09:388   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:09:668   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:53:09:668   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:53:09:668   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:53:09:668   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:09:668   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:53:10:123 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:53:10:124      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:53:10:124   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:10:124   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:10:125      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:10:125      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:13:107   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:53:13:107   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:13:107   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:53:13:108   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:53:13:108   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:53:13:365   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:53:13:365   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:53:13:366   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:53:13:366   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:13:366   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:53:13:690 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:13:691      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:13:691   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:13:691   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:13:692      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:13:693      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:15:027 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:15:027      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:15:028   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:15:028   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:15:029      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:15:029      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:16:224   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:16:224   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:16:224   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:16:224   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:16:225   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:16:674 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:16:674      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:16:675   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:16:675   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:16:676      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:16:676      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:18:577 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:18:577      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:18:578   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:18:578   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:18:579      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:18:579      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:20:578 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:20:578      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:20:579   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:20:579   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:20:580      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:20:580      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:21:692 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:21:692      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:21:693   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:21:693   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:21:694      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:21:694      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:23:038   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:23:038   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:23:039   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:23:039   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:23:039   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:23:506 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:23:506      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:23:507   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:23:507   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:23:508      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:23:508      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:25:125   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:25:125   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:25:126   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:25:126   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:25:126   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:25:529 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:25:529      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:25:530   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:25:530   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:25:531      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:25:532      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:29:241   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:29:242   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:29:242   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:29:242   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:29:242   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:29:639 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:29:639      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:29:640   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:29:640   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:29:641      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:29:641      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:30:641 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:30:641      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:30:642   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:30:642   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:30:643      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:30:643      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:32:744 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 14:53:32:744      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 14:53:32:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:32:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:32:746      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:32:746      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:34:545   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:34:545   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:34:546   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:34:546   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:34:546   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:34:946 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:34:946      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:34:947   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:34:947   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:34:948      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:34:949      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:36:303 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:36:304      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:36:304   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:36:304   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:36:305      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:36:305      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:36:912   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:36:912   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:36:913   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:36:913   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:36:913   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:37:255 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:37:256      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:37:256   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:37:256   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:37:257      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:37:258      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:37:993 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 14:53:37:993      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 14:53:37:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:37:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:37:995      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:37:995      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:42:721   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:42:721   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:42:721   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:42:722   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:42:722   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:43:118 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 14:53:43:118      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 14:53:43:119   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:43:119   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:43:121      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:43:121      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:43:125   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:43:125   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:43:125   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:43:125   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:43:125   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:45:720   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:45:720   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:45:721   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:45:721   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:45:721   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:46:089 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:53:46:089      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:53:46:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:46:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:46:091      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:46:091      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:46:941   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:53:46:941   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:53:46:942   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:53:46:942   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:46:942   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:53:47:356 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:53:47:356      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:53:47:357   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:53:47:357   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:53:47:358      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:53:47:359      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:53:48:324   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:53:48:325   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:53:48:325   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:53:48:325   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:53:48:325   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:53:49:750   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:53:49:750   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:53:49:750   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:53:49:750   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:53:49:750   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:53:49:881 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_VDM||FRONT]
[11/07 14:53:50:114   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [DIAGNOSTICS MODE]])
[11/07 14:53:50:115   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [DIAGNOSTICS MODE]]
[11/07 14:53:50:115   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  Please wait...])
[11/07 14:53:50:116   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  Please wait...]
[11/07 14:53:50:116      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:53:50:116      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:53:50:116      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:53:50:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:53:50:117   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:53:50:117   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:53:50:118   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:53:50:118      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:53:50:118      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:53:50:118       Sound.cpp(00148)] :Stop
[11/07 14:53:50:119       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:53:50:119      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:53:50:119      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:53:50:119      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[OPDO]
[11/07 14:53:50:119      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:53:50:120      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:53:50:137      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0057]
[11/07 14:53:50:137      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SV]
[11/07 14:53:50:137      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SV]
[11/07 14:53:50:137       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:53:50:137       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:53:50:138       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:53:50:143       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0057']
[11/07 14:53:50:176       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:53:50:177       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:53:50:177       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:53:50:181       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:53:50:182       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:53:50:182       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:53:50:183       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:53:50:183       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:53:50:183       DevDB.cpp(01106)] :pEJnl->Data [Change into diagnostics mode<START_EJRNL>[ 11/07/2017 14:53:50 EJ NUMBER = 0057 ] |14:53:50 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>]
[11/07 14:53:50:183       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0129','SV','0057','11','07','2017','14','53','50','Change into diagnostics mode<START_EJRNL>[ 11/07/2017 14:53:50 EJ NUMBER = 0057 ] |14:53:50 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>')]
[11/07 14:53:50:216       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:53:50:216       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:53:50:217       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:53:50:217       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:53:50:221       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:53:50:222       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:53:50:222       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:53:50:223       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[57]
[11/07 14:53:50:223       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [57]
[11/07 14:53:50:223       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[56], m_bRecordCountFinal=[1]
[11/07 14:53:50:255       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [57]
[11/07 14:53:50:256      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into diagnostics mode<START_EJRNL>[ 11/07/2017 14:53:50 EJ NUMBER = 0057 ] |14:53:50 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>]
[11/07 14:53:50:256      DevApl.cpp(06316)] :strTempArray0=[Change into diagnostics mode] / strTempArray1=[[ 11/07/2017 14:53:50 EJ NUMBER = 0057 ] |14:53:50 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>]
[11/07 14:53:50:256      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:53:50:256      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[CLERK||OFF||OFF||OFF||ON||111111||222222||555555||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:53:50:256      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:53:50:257      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APSTART]
[11/07 14:53:50:257      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:53:50:257      DevApl.cpp(01123)] :fnAPL_UnLoadDevice()
[11/07 14:53:50:257       Sound.cpp(00082)] :CloseDevice()
[11/07 14:53:50:257       Sound.cpp(00148)] :Stop
[11/07 14:53:50:258       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:53:50:258       Sound.cpp(00090)] :CloseDevice()=[0]
[11/07 14:53:50:258      DevCmn.cpp(04162)] :fnPBM_Deinitialize()
[11/07 14:53:50:258      DevCmn.cpp(04171)] :fnPBM_Deinitialize():return(0)
[11/07 14:53:50:258      DevCmn.cpp(03797)] :fnCDU_Deinitialize()
[11/07 14:53:51:223      DevCmn.cpp(03806)] :fnCDU_Deinitialize():return(0)
[11/07 14:53:51:223      DevCmn.cpp(01089)] :fnMCU_Deinitialize()
[11/07 14:53:52:159      DevCmn.cpp(01096)] :fnMCU_Deinitialize():return(0)
[11/07 14:53:52:159      DevCmn.cpp(00699)] :fnSPR_Deinitialize()
[11/07 14:53:55:729      DevCmn.cpp(00708)] :fnSPR_Deinitialize():return(0)
[11/07 14:53:55:729      DevCmn.cpp(00431)] :fnJPR_Deinitialize()
[11/07 14:53:55:729      DevCmn.cpp(00440)] :fnJPR_Deinitialize():return(0)
[11/07 14:53:55:729      DevCmn.cpp(02762)] :fnDEP_Deinitialize()
[11/07 14:53:55:729      DevCmn.cpp(02771)] :fnDEP_Deinitialize(...):return(0)
[11/07 14:53:55:776      DevCmn.cpp(05672)] :fnVFD_Deinitialize()
[11/07 14:53:55:776      DevCmn.cpp(05679)] :fnVFD_Deinitialize():return(0)
[11/07 14:53:55:791      DevCmn.cpp(05046)] :fnUPS_Deinitialize()
[11/07 14:53:55:791      DevCmn.cpp(05053)] :fnUPS_Deinitialize():return(0)
[11/07 14:53:55:791      DevCmn.cpp(04403)] :fnCMR_Deinitialize()
[11/07 14:53:55:791      DevCmn.cpp(04410)] :fnCMR_Deinitialize():return(0)
[11/07 14:53:55:791      DevCmn.cpp(05557)] :fnSNS_Deinitialize()
[11/07 14:53:55:807      DevCmn.cpp(05564)] :fnSNS_Deinitialize():return(0)
[11/07 14:53:55:807      DevCmn.cpp(05210)] :fnPIN_Deinitialize()
[11/07 14:53:57:323      DevCmn.cpp(05217)] :fnPIN_Deinitialize():return(0)
[11/07 14:53:57:323      DevCmn.cpp(04945)] :fnSPL_Deinitialize()
[11/07 14:53:57:323      DevCmn.cpp(04952)] :fnSPL_Deinitialize():return(0)
[11/07 14:53:57:323      DevCmn.cpp(04692)] :fnLGT_Deinitialize()
[11/07 14:53:57:354      DevCmn.cpp(04699)] :fnLGT_Deinitialize():return(0)
[11/07 14:53:57:354      DevCmn.cpp(04580)] :fnDOR_Deinitialize()
[11/07 14:53:57:448      DevCmn.cpp(04587)] :fnDOR_Deinitialize():return(0)
[11/07 14:54:05:291      DevApl.cpp(01189)] :fnAPL_UnLoadDevice():return
[11/07 14:54:05:323 AtmClerkCtrl.cp(00717)] :VDM PROCESS STARTED/[FRONT]: strOpCommandArray.GetSize()=[2]
[11/07 14:54:05:323 AtmClerkCtrl.cp(00720)] :m_pDevCmn->AtmDefine.OpDevice=[0]
[11/07 14:54:05:323 AtmClerkCtrl.cp(00721)] :m_pDevCmn->AtmDefine.MachineKind=[9]
[11/07 14:55:23:403 AtmClerkCtrl.cp(00742)] :VDM PROCESS ENDED
[11/07 14:55:23:403      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[2], nPinInputMode=[1]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:55:23:403      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:55:23:403      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:55:23:403 AtmModeCtrl.cpp(02076)] :TerminateProcess(): nRebootFlag=[1]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:55:23:403      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:55:23:403      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:55:23:403      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:55:23:403      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:55:23:403      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:55:23:403       Sound.cpp(00148)] :Stop
[11/07 14:55:23:403       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:55:23:403      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:55:23:403      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:55:23:403      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:55:23:403      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:55:23:403   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:55:23:403   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:55:23:418      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:55:23:418      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:55:23:418      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:55:50:687   LoaderDlg.cpp(00137)] :









Loading Loader.exe
[11/07 14:55:50:758   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[11/07 14:55:51:199    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:55:51:209    CESocket.cpp(00101)] :~CCESocket()

[11/07 14:55:51:350    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:55:51:375    CESocket.cpp(00101)] :~CCESocket()

[11/07 14:55:52:396    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 14:55:52:401   WinAtmCtl.cpp(01638)] :CSuppressOleBusyMsg()
[11/07 14:55:52:401   WinAtmCtl.cpp(01649)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[014BA9D8]
[11/07 14:55:52:401   WinAtmCtl.cpp(00202)] :===============================================================
[11/07 14:55:52:402   WinAtmCtl.cpp(00203)] :===============================================================
[11/07 14:55:52:402   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[11/07 14:55:52:402   WinAtmCtl.cpp(00363)] :OnCreate()
[11/07 14:55:52:443   WinAtmCtl.cpp(00377)] :OnCreate():return
[11/07 14:55:52:443   WinAtmCtl.cpp(01168)] :handle1=[10240]
[11/07 14:55:52:444   WinAtmCtl.cpp(01171)] :handle2=[1023e]
[11/07 14:55:52:476   WinAtmCtl.cpp(00977)] :AtmStart()
[11/07 14:55:52:477      DevCmn.cpp(00045)] :CDevCmn()
[11/07 14:55:52:477      DevCmn.cpp(00053)] :CDevCmn():return
[11/07 14:55:52:477     TranCmn.cpp(00032)] :CTranCmn()
[11/07 14:55:52:477     TranCmn.cpp(00033)] :CTranCmn():return
[11/07 14:55:52:478      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[11/07 14:55:52:571      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : TOUCH
[11/07 14:55:52:571      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 1
[11/07 14:55:52:571  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[11/07 14:55:52:571  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[11/07 14:55:52:572  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[11/07 14:55:52:572  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[11/07 14:55:52:573  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1877583844, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 14:55:52:573  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1877583844, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 14:55:52:573     NetWork.cpp(00095)] :[SetInformation] CtrlType : 1, LineType : 2
[11/07 14:55:52:622 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[11/07 14:56:00:484      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[11/07 14:56:00:500      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1107]
[11/07 14:56:00:500      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[],nStep[1]
[11/07 14:56:00:500      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:500      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1107\Log1107.zip]
[11/07 14:56:00:500      DevCmn.cpp(06424)] :BSTrace Log
[11/07 14:56:00:500      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1107\BSTrace1711071456.nwlog]
[11/07 14:56:00:593      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 14:56:00:593      DevCmn.cpp(06444)] :BSTrace Log Trace End
[11/07 14:56:00:593      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log1107\BSTrace1711071456.nwlog],nStep[2]
[11/07 14:56:00:875      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:875      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1107\BSTrace1711071456.nwlog]
[11/07 14:56:00:875      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[11/07 14:56:00:906      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:906      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[11/07 14:56:00:906      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[11/07 14:56:00:906      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:906      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[11/07 14:56:00:906      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[11/07 14:56:00:906      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:906      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[11/07 14:56:00:906      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[11/07 14:56:00:921      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:921      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[11/07 14:56:00:921      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[11/07 14:56:00:921      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:921      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[11/07 14:56:00:921      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[11/07 14:56:00:921      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:921      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[11/07 14:56:00:921      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log07.txt],nStep[2]
[11/07 14:56:00:984      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:00:984      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log07.txt]
[11/07 14:56:00:984      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi07.txt],nStep[2]
[11/07 14:56:01:000      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:01:000      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi07.txt]
[11/07 14:56:01:000      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear07.txt],nStep[2]
[11/07 14:56:01:000      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:01:000      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear07.txt]
[11/07 14:56:01:000      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog07.txt],nStep[2]
[11/07 14:56:01:000      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:01:000      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog07.txt]
[11/07 14:56:01:000      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace07_#1.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:01:015      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace07_#1.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp07.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 14:56:01:015      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp07.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log06.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:56:01:015      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log06.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi06.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:56:01:015      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi06.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear06.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:56:01:015      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear06.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog06.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:56:01:015      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog06.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace06_#1.txt],nStep[2]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:56:01:015      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace06_#1.txt]
[11/07 14:56:01:015      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp06.txt],nStep[3]
[11/07 14:56:01:015      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 14:56:01:015      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp06.txt]
[11/07 14:56:01:015      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[11/07 14:56:01:015      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:56:01:015      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:56:01:031      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:56:01:031      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:56:01:031      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 14:56:01:031      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 14:56:01:031      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[11/07 14:56:01:031      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[11/07 14:56:01:031      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[11/07 14:56:01:031      DevApl.cpp(00722)] :    BATTERY LOW SHUTDOWN OPTION IS ENABLED
[11/07 14:56:01:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[11/07 14:56:01:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[11/07 14:56:01:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[11/07 14:56:01:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[11/07 14:56:01:031   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[11/07 14:56:01:031   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[11/07 14:56:01:031       Sound.cpp(00059)] :OpenDevice()
[11/07 14:56:01:031       Sound.cpp(00076)] :OpenDevice()=[0]
[11/07 14:56:01:031      DevApl.cpp(10595)] :BINLIST Count of BinList =[2], Command=[UPDATE]
[11/07 14:56:01:062      DevApl.cpp(10621)] :BINLIST Count of BININFO1=[2]
[11/07 14:56:01:062      DevApl.cpp(10626)] :BINLIST nCntMain=[2]
[11/07 14:56:01:078      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[2||1234567890||1234567891]
[11/07 14:56:01:078      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=100c4e4d)
[11/07 14:56:01:078      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 14:56:01:078      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[11/07 14:56:01:078      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[11/07 14:56:01:078     TranCmn.cpp(00065)] :SetOwner()
[11/07 14:56:01:093     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[V01.05.00.00]
[11/07 14:56:01:312     TranCmn.cpp(00108)] :AP VERSION = [V01.05.00.00D CD                        ]
[11/07 14:56:01:312     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[11/07 14:56:01:312     TranCmn.cpp(00381)] :Successfully read AID Total Count = [9] => Term_data Exist : Return without creating
[11/07 14:56:01:312     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[11/07 14:56:01:343     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[11/07 14:56:01:359     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[11/07 14:56:01:390     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[11/07 14:56:01:406     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[11/07 14:56:01:406     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[1], nCnt=[2]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[11/07 14:56:01:406     TranCmn.cpp(00287)] :nCount[2]
[11/07 14:56:01:437 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[11/07 14:56:01:531 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[11/07 14:56:01:531     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[11/07 14:56:01:531     TranCmn.cpp(00364)] :SetOwner():return
[11/07 14:56:01:531   WinAtmCtl.cpp(01660)] :Suppress(): pOMF=[014BA9D8]
[11/07 14:56:01:531   WinAtmCtl.cpp(01667)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[11/07 14:56:01:531   WinAtmCtl.cpp(01272)] :strDate=[07], strYYMM=[1711]
[11/07 14:56:01:531      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[11/07 14:56:01:531      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:56:01:531      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[11/07 14:56:01:531      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[11/07 14:56:01:531   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:56:01:531   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:56:01:531   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[11/07 14:56:01:531   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[11/07 14:56:01:531      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:56:01:531      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[11/07 14:56:01:531       Sound.cpp(00148)] :Stop
[11/07 14:56:01:531       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:56:01:531      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:56:01:531      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:56:01:531      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[AP]
[11/07 14:56:01:531      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:56:01:546   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:01:546   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:01:546      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:56:01:546      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:56:01:546      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[11/07 14:56:01:734      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:56:01:781      DevCmn.cpp(05658)] :fnVFD_Initialize(nPortNum[9], nBaudRate[38400])
[11/07 14:56:01:781      DevCmn.cpp(05665)] :fnVFD_Initialize(...):return(0)
[11/07 14:56:01:781      DevCmn.cpp(04566)] :fnDOR_Initialize()
[11/07 14:56:14:681      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[11/07 14:56:14:681      DevCmn.cpp(04678)] :fnLGT_Initialize()
[11/07 14:56:14:712      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[11/07 14:56:14:712      DevCmn.cpp(04931)] :fnSPL_Initialize()
[11/07 14:56:14:712      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[11/07 14:56:14:728      DevCmn.cpp(05196)] :fnPIN_Initialize()
[11/07 14:56:16:181      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[11/07 14:56:16:181      DevCmn.cpp(05541)] :fnSNS_Initialize()
[11/07 14:56:16:220      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[11/07 14:56:16:220      DevCmn.cpp(04389)] :fnCMR_Initialize()
[11/07 14:56:16:221      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[11/07 14:56:16:221      DevCmn.cpp(05032)] :fnUPS_Initialize()
[11/07 14:56:16:252      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[11/07 14:56:17:559   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:56:17:559   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:56:17:559      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[11/07 14:56:18:504 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:56:18:504      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:56:18:504      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:56:18:504      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:56:18:504      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:56:18:504      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:56:18:504 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[11/07 14:56:18:504      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:56:18:754      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 14:56:18:770      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[11/07 14:56:18:770      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[11/07 14:56:18:770      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[11/07 14:56:18:801 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[189140992], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1958211584]
[11/07 14:56:18:801      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:56:18:801 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:56:18:801 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:56:18:801 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:56:18:911 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:56:18:911      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:56:18:926      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0058]
[11/07 14:56:18:926      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[11/07 14:56:18:926      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[11/07 14:56:18:926       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:56:18:926       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:56:18:926       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:56:18:942       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0058']
[11/07 14:56:18:989       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:56:18:989       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:56:18:989       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:56:18:989       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:56:18:989       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:56:18:989       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:56:18:989       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:56:18:989       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:56:18:989       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 11/07/2017 14:56:18 EJ NUMBER = 0058 ] |14:56:18 [Power On]<END_EJRNL>]
[11/07 14:56:18:989       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0058','11','07','2017','14','56','18','System Power On<START_EJRNL>[ 11/07/2017 14:56:18 EJ NUMBER = 0058 ] |14:56:18 [Power On]<END_EJRNL>')]
[11/07 14:56:19:036       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:56:19:036       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:56:19:036       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:56:19:036       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:56:19:036       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:56:19:036       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:56:19:036       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:56:19:036       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[58]
[11/07 14:56:19:036       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [58]
[11/07 14:56:19:036       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[57], m_bRecordCountFinal=[1]
[11/07 14:56:19:083       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [58]
[11/07 14:56:19:083      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 11/07/2017 14:56:18 EJ NUMBER = 0058 ] |14:56:18 [Power On]<END_EJRNL>]
[11/07 14:56:19:083      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 11/07/2017 14:56:18 EJ NUMBER = 0058 ] |14:56:18 [Power On]<END_EJRNL>]
[11/07 14:56:19:083      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:56:19:145      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:19:145 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:56:19:145      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:56:19:145      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:56:19:145      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:56:19:176      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[11/07 14:56:19:176      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[11/07 14:56:19:176      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 14:56:19:176      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[11/07 14:56:19:176      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 14:56:19:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:56:19:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:56:19:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:56:19:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:56:19:192      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:56:19:192      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:56:19:192      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:56:19:192      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 14:56:19:223      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 14:56:19:223      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 14:56:21:333      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 14:56:21:333      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:56:21:333      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 14:56:23:926      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 14:56:23:926      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 14:56:23:926      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 14:56:35:645      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 14:56:38:786      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[11/07 14:56:41:926      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[11/07 14:56:41:989      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[11/07 14:56:41:989      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 14:56:45:176      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[11/07 14:56:45:176      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[11/07 14:56:45:176      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(1999)
[11/07 14:56:45:176      DevCmn.cpp(03636)] :fnCDU_GetNumberOfDispense(nCSTNo[1]):return(1)
[11/07 14:56:45:176      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[11/07 14:56:45:176      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(2000)
[11/07 14:56:45:192      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 14:56:48:348      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 14:56:48:348      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:56:48:348      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(2000)
[11/07 14:56:48:348      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(2000)
[11/07 14:56:48:348      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[11/07 14:56:48:348      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 14:56:48:348      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[11/07 14:56:48:348      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[11/07 14:56:48:348      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][0][0][0]
[11/07 14:56:48:348      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[11/07 14:56:48:364      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 14:56:48:489 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[11/07 14:56:48:489 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[11/07 14:56:48:536      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:56:48:551      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:56:48:567     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:56:48:567     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:56:48:614      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APRUN]
[11/07 14:56:48:614      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[11/07 14:56:48:614 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD1]
[11/07 14:56:48:614      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=0, pTime=11
[11/07 14:56:48:614      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 14:56:48:645 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[11/07 14:56:48:817 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:56:48:817 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:56:48:817      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:56:48:817      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:56:48:817 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:56:49:051      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:56:49:348      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:56:49:348   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:56:49:348   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:56:49:348      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:56:49:348   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:49:348   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:49:364      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:56:49:364      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:56:49:364      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:56:49:364      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:56:49:364      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:56:49:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:56:49:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:56:49:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:56:49:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:56:49:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:56:49:379      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:56:49:379      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:56:49:379      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:56:49:379      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:56:49:379      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:56:49:379      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:56:49:411      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:56:49:411      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:56:49:442      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:56:49:536      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0059]
[11/07 14:56:49:536      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 14:56:49:536      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 14:56:49:536       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:56:49:536       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:56:49:536       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:56:49:536       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0059']
[11/07 14:56:49:583       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:56:49:583       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:56:49:583       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:56:49:583       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:56:49:583       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:56:49:583       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:56:49:583       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:56:49:583       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:56:49:583       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 14:56:49 EJ NUMBER = 0059 ] |14:56:49 [SERVICE MODE]<END_EJRNL>]
[11/07 14:56:49:583       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0059','11','07','2017','14','56','49','Change into service mode<START_EJRNL>[ 11/07/2017 14:56:49 EJ NUMBER = 0059 ] |14:56:49 [SERVICE MODE]<END_EJRNL>')]
[11/07 14:56:49:629       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:56:49:629       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:56:49:629       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:56:49:629       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:56:49:629       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:56:49:629       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:56:49:629       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:56:49:629       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[59]
[11/07 14:56:49:629       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [59]
[11/07 14:56:49:629       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[58], m_bRecordCountFinal=[1]
[11/07 14:56:49:676       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [59]
[11/07 14:56:49:676      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 14:56:49 EJ NUMBER = 0059 ] |14:56:49 [SERVICE MODE]<END_EJRNL>]
[11/07 14:56:49:676      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 14:56:49 EJ NUMBER = 0059 ] |14:56:49 [SERVICE MODE]<END_EJRNL>]
[11/07 14:56:49:676      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:56:49:692      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:56:49:864 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:56:49:864      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:56:49:864      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:56:49:864 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:56:49:864 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:56:49:864      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:56:49:864      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:56:50:137      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:56:50:411      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:56:50:411   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:56:50:411   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:56:50:418      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:56:50:418   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:50:418   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:50:434      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:56:50:434      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:56:50:434      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:56:50:434      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:56:50:434      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:56:50:434      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:56:50:434      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:56:50:434      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:56:50:442      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:56:50:450      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:56:50:481      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:56:50:481 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:56:50:481 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:56:50:481 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:56:50:481 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:56:50:481 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[11/07 14:56:50:489      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:56:50:489      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:56:50:489      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:56:50:489      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:56:50:489      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:56:50:489       Sound.cpp(00148)] :Stop
[11/07 14:56:50:489       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:56:50:489      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:56:50:489      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:56:50:489      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:56:50:489      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:56:50:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:50:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:50:497      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:56:50:497      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:50:512      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:56:52:129      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:56:52:129 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:56:52:208 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[11/07 14:56:52:239 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 14:56:52:301 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[11/07 14:56:52:395 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[11/07 14:56:52:551 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A6
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[11/07 14:56:52:567      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:56:52:567      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:56:52:567      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:56:52:567      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:56:52:567      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:56:52:567       Sound.cpp(00148)] :Stop
[11/07 14:56:52:567       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:56:52:567      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:56:52:567      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:56:52:567      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:56:52:567      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:56:52:567   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:52:567   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:52:567      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:56:52:567      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:52:942      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:56:54:520      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:56:54:551 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[11/07 14:56:54:551 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[11/07 14:56:54:567 TranMainProc.cp(00182)] :TranStatus[11]
[11/07 14:56:54:567 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[11/07 14:56:54:567 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[11/07 14:56:54:567     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:56:54:567     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:56:54:567     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:56:54:645     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:56:54:676     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:56:54:676     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:56:54:676 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[11/07 14:56:54:676      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:56:54:895      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:56:54:911 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:56:54:911 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[11/07 14:56:54:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[11/07 14:56:54:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[11/07 14:56:54:926      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:56:54:926      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:56:54:926      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:56:54:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:56:54:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:56:54:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:56:54:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:56:54:926      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:56:54:926      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:56:54:926       Sound.cpp(00148)] :Stop
[11/07 14:56:54:926       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:56:54:926      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:56:54:926      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:56:54:926      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:56:54:926      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:56:54:926   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:54:926   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:54:926      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:56:55:317      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:56:55:317      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:56:56:098 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:56:56:098 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:56:56:098 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:56:56:098 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1011])
[11/07 14:56:56:098 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    88]:return
[11/07 14:56:56:098 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[11/07 14:56:56:098 TranHostProc.cp(01345)] :m_strProtocolType=[STANDARD1], m_KeyMode=[3]
[11/07 14:56:56:098 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:56:56:098 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[11/07 14:56:56:098 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70727596)
[11/07 14:56:56:098 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(23)
[11/07 14:56:56:098 TranHostProc.cp(00254)] :SendLength(23), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:56:56:098 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:56:56:129      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:56:56:129 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:56:56:145     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:56:56:145     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:56:56:145  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:56:56:145       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:56:56:145    CESocket.cpp(00116)] :Create() start

[11/07 14:56:56:145    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:56:56:145    CESocket.cpp(00220)] :Connect() start - socket:2028 address: 192.168.198.199 port: 45000
[11/07 14:56:56:145    CESocket.cpp(00441)] :Connect() OK
[11/07 14:56:56:145    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:56:56:145  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:56:56:145  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:56:56:145  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 88, protocol : STANDARD1
[11/07 14:56:56:145  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:56:56:145    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:56:57:786    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:56:57:786    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:56:57:786       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:56:57:864  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:56:57:864    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:56:57:864       TCPIP.cpp(00091)] :LineSendData
[11/07 14:56:57:864    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:56:57:864    CESocket.cpp(00520)] :Send() end - total sendLen: 26
[11/07 14:56:57:864  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:26]

[11/07 14:56:58:036    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:56:58:036    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:56:58:036       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:56:58:176  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:56:58:176    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:56:58:254    CESocket.cpp(00755)] :receive Data(thread): [len:108]
[11/07 14:56:58:254    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 108
[11/07 14:56:58:254       TCPIP.cpp(00123)] :receive Data(put_data): [len: 108]
[11/07 14:56:58:333  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:56:58:333    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:56:58:333  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[3]

[11/07 14:56:58:333    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:56:58:333       TCPIP.cpp(00091)] :LineSendData
[11/07 14:56:58:333    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:56:58:333    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:56:58:473    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:56:58:473    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:56:58:473       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:56:58:489  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:56:58:489    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:56:58:489       TCPIP.cpp(00091)] :LineSendData
[11/07 14:56:58:489    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:56:58:489    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:56:58:504       TCPIP.cpp(00082)] :line close start
[11/07 14:56:58:504    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:56:58:504    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:56:58:504    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:56:58:504     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:56:58:504    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:56:58:504    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:56:58:504      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:56:58:504   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:56:58:504   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:56:58:504      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:56:58:504 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:56:58:504 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:56:58:504 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:56:58:504  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    881106201716141200050011808CE54F7E2CCC00000355022808CE54F7E2CCC11808CE54F7E2CCC][LEN:105]

[11/07 14:56:58:504     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:56:58:504      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:56:58:504 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[105])
[11/07 14:56:58:504      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:56:58:504   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:56:58:504   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:56:58:504      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:56:58:504 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[88]
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[11062017161412]
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[000500]
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11808CE54F7E2CCC]
[11/07 14:56:58:504 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[00000355]
[11/07 14:56:58:520 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[0]
[11/07 14:56:58:520 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[22808CE54F7E2CCC]
[11/07 14:56:58:520 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[11808CE54F7E2CCC]
[11/07 14:56:58:520 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[10]
[11/07 14:56:58:708 TranHostProc.cp(04029)] :OpenRespMsg.SurchargeAmount_V=[00000355]
[11/07 14:56:58:754 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:56:58:770 TranOutputProc.(02767)] :fnAPP_LoadWorkingKey(), Keymode = [3]
[11/07 14:56:58:770      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:58:770      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K3], szKeyValue[11808CE54F7E2CCC])
[11/07 14:56:58:770      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:58:833      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:56:58:848 TranOutputProc.(02839)] :fnAPP_LoadWorkingKey() K3 KeyLoad Success!
[11/07 14:56:58:848      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:58:848      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K2], szKeyValue[22808CE54F7E2CCC])
[11/07 14:56:58:848      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:58:895      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:56:58:911 TranOutputProc.(02865)] :fnAPP_LoadWorkingKey() K2 KeyLoad Success!
[11/07 14:56:58:911      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:58:911      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK], szKeyName[K1], szKeyValue[11808CE54F7E2CCC])
[11/07 14:56:58:911      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:56:59:145      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 14:56:59:161 TranOutputProc.(02893)] :fnAPP_LoadWorkingKey() K1 KeyLoad Success!
[11/07 14:56:59:161 TranHostProc.cp(03105)] :fnAPP_STD1_RecvHost(): TranResult = TRUE
[11/07 14:56:59:161 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:56:59:161 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:56:59:161      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:56:59:348      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:56:59:364 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[11/07 14:56:59:364 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:56:59:364 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:56:59:364 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:56:59:364 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:56:59:411 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:56:59:411 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:56:59:411 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:56:59:411 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:56:59:411 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:56:59:411 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:56:59:411 TranMainProc.cp(00096)] :[fnAPP_MainOpenPorc] Send ATM_REPORT_STATUS to RMS agent
[11/07 14:56:59:411 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:56:59:411 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:56:59:411 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:56:59:411 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:56:59:411 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:56:59:411 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:56:59:411      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:56:59:411      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:56:59:418      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:56:59:426      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:56:59:434      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:56:59:598 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:56:59:598 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:56:59:598 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:56:59:598 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:56:59:598 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:56:59:598   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:56:59:598   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:56:59:598   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:56:59:598   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:56:59:598   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:56:59:598   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:56:59:598      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:56:59:598      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:56:59:598      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:56:59:598   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:56:59:598   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:56:59:598   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:56:59:598   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:56:59:598      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:56:59:598      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:56:59:598       Sound.cpp(00148)] :Stop
[11/07 14:56:59:598       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:56:59:598      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:56:59:598      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:56:59:598      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:56:59:598      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:56:59:606   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:56:59:606   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:56:59:606      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:56:59:606      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:56:59:606      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:57:01:168 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:57:01:168 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:57:01:168 TranMainProc.cp(00134)] :fnAPP_MainOpenProc:: Return(1)
[11/07 14:57:01:247 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_ONLINE    ], HostStatusSave[HOST_WAITREADY ]
[11/07 14:57:01:325 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:57:01:325      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:57:01:325      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:57:01:325 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:57:01:325 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:57:01:325      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:57:01:325      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:57:01:676      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:57:01:958      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:01:965      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:01:965   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:57:01:965   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:57:01:965      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:57:01:965   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:01:965   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:01:989      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:57:01:989      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:57:01:989      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:57:01:989      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:01:989      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:01:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:57:01:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:01:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:57:01:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:57:01:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:57:02:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:57:02:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:57:02:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:57:02:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:57:02:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:57:02:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:57:02:020      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:02:020 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:57:02:020 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:57:02:020 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:02:020 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:02:020 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:57:02:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:57:02:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:57:02:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:57:02:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:57:02:020      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:57:02:020      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:02:020      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:02:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:57:02:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:57:02:020      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:02:020      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:57:02:020       Sound.cpp(00148)] :Stop
[11/07 14:57:02:020       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:02:020      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:02:020      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:02:020      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:57:02:020      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:57:02:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:02:036   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:02:036      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:57:02:036      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:57:02:036      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:57:03:598      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:57:03:598 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:57:03:708 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:57:03:708 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 6 => A0
[11/07 14:57:03:739      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:03:739 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:57:03:739 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[15], m_pDevCmn->m_DelayTime=[0]
[11/07 14:57:03:739 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:57:03:754      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:57:03:754   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:03:754   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:03:770      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:57:03:770      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:57:03:770      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:57:03:786      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:03:786 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:57:03:786 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[15], m_DelayTime=[0]
[11/07 14:57:03:817 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_READY      )
[11/07 14:57:03:817 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 14:57:03:817 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 14:57:03:848 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 14:57:03:848 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 14:57:03:848 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 14:57:03:848 TranMainProc.cp(01138)] :TranCode:[1011]
[11/07 14:57:03:848 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 14:57:03:848 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:57:03:848 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:57:03:848 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:03:958 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:04:114 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 14:57:04:114 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 14:57:04:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:57:04:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:04:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:57:04:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:57:04:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:57:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:57:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:57:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:57:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:57:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:57:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:57:04:137     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:57:04:137     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:57:04:137     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:57:04:215     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:57:04:247     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:57:04:247     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:57:04:247 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 14:57:04:247      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 14:57:04:465      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 14:57:04:489 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 14:57:04:489 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 14:57:04:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 14:57:04:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 14:57:04:489      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:57:04:489      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:57:04:489      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 14:57:04:489   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:04:489   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:04:497   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 14:57:04:497   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 14:57:04:497      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:04:497      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 14:57:04:497       Sound.cpp(00148)] :Stop
[11/07 14:57:04:497       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:04:497      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:04:497      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:04:497      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:57:04:497      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:57:04:497   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:04:497   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:04:497      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:04:840      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:04:840      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 14:57:05:622 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 14:57:05:622 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 14:57:05:622 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 14:57:05:622 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 14:57:05:622 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 14:57:05:622 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 14:57:05:622 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 14:57:05:622 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 14:57:05:622 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 14:57:05:622 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 14:57:05:622 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 14:57:05:676 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 14:57:05:676      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:57:05:676      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:57:05:676 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 14:57:05:676 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 14:57:05:676 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 14:57:05:676 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 14:57:05:676 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 14:57:05:676 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(70727596)
[11/07 14:57:05:676 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 14:57:05:676 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 14:57:05:676 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 14:57:05:692      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:05:700 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 14:57:05:700     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 14:57:05:700     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 14:57:05:700  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 14:57:05:700       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 14:57:05:700    CESocket.cpp(00116)] :Create() start

[11/07 14:57:05:700    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 14:57:05:700    CESocket.cpp(00220)] :Connect() start - socket:2012 address: 192.168.198.199 port: 45000
[11/07 14:57:05:700    CESocket.cpp(00441)] :Connect() OK
[11/07 14:57:05:700    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 14:57:05:700  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 14:57:05:700  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 14:57:05:700  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 14:57:05:700  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 14:57:05:700    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 14:57:07:356    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:57:07:356    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:57:07:356       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:57:07:426  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 14:57:07:426    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:57:07:426       TCPIP.cpp(00091)] :LineSendData
[11/07 14:57:07:426    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:57:07:426    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 14:57:07:426  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 14:57:07:614    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:57:07:614    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:57:07:614       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:57:07:739  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 14:57:07:739    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:57:07:825    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 14:57:07:825    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 14:57:07:825       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 14:57:07:903  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 14:57:07:903    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:57:07:903  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 14:57:07:903    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 14:57:07:903       TCPIP.cpp(00091)] :LineSendData
[11/07 14:57:07:903    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:57:07:903    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:57:08:043    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 14:57:08:043    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 14:57:08:043       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 14:57:08:059  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 14:57:08:059    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 14:57:08:059       TCPIP.cpp(00091)] :LineSendData
[11/07 14:57:08:059    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 14:57:08:059    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 14:57:08:075       TCPIP.cpp(00082)] :line close start
[11/07 14:57:08:075    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 14:57:08:075    CESocket.cpp(00463)] :Disconnect() End

[11/07 14:57:08:075    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 14:57:08:075     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 14:57:08:075    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 14:57:08:075    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 14:57:08:075      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 14:57:08:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 14:57:08:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 14:57:08:075      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:57:08:075 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 14:57:08:075 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 14:57:08:075 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 14:57:08:075  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 14:57:08:075     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 14:57:08:075      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 14:57:08:075 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 14:57:08:075      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 14:57:08:075   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 14:57:08:075   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 14:57:08:075      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 14:57:08:075 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 14:57:08:075 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 14:57:08:075 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 14:57:08:075 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 14:57:08:075 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 14:57:08:075 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 14:57:08:075 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 14:57:08:075 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 14:57:08:075      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 14:57:08:278      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 14:57:08:309 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 14:57:08:309 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 14:57:08:309 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 14:57:08:309 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 14:57:08:309 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 14:57:08:356 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 14:57:08:356 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:57:08:356 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:57:08:356 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:08:356 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:08:356 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 14:57:08:356 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:57:08:356 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:57:08:356 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:08:356 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:08:356      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 14:57:08:512 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:57:08:512      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 14:57:08:512      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 14:57:08:512 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 14:57:08:512 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:57:08:512      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:57:08:512      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:57:08:715      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:57:08:934      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:08:934      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:08:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:57:08:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:57:08:934      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:57:08:950   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:08:950   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:08:965      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:57:08:965      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:57:08:965      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:57:08:965      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:08:965      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:08:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:57:08:973      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:08:973      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:57:08:981      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:57:08:981      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:57:08:981      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:57:08:981      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:57:08:981      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:57:08:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:57:08:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:57:08:989      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:57:09:012      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:09:012 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:57:09:012 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:57:09:012 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:09:012 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:09:012 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 14:57:09:012   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:57:09:012   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:57:09:012   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:57:09:012   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:57:09:012   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:57:09:012   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:57:09:012   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 14:57:09:012   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 14:57:09:020      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 14:57:09:020      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:09:020      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:09:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:09:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:09:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:57:09:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:57:09:020      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:09:020      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:57:09:020       Sound.cpp(00148)] :Stop
[11/07 14:57:09:020       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:09:020      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:09:020      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:09:020      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:57:09:020      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:57:09:020   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:09:020   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:09:020      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:57:09:020      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:57:09:020      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:57:10:590      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:57:10:590 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:57:10:715 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 14:57:10:731      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:10:739 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 14:57:10:739 TranNmsProc.cpp(00488)] :NmsCashStatus:(0)
[11/07 14:57:10:895 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:57:10:895 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 14:57:10:895 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:57:10:895      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:57:10:895      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:57:10:895   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 14:57:10:895   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 14:57:10:895   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 14:57:10:895   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 14:57:10:895 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 14:57:10:895 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 14:57:10:942 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 14:57:10:942 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 14:57:10:942 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:57:10:942 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:57:10:942 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:10:950 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:10:950      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:57:10:950      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:10:950      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:57:10:958      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:57:10:958      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:57:10:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:57:10:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:57:10:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:57:10:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:57:10:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:57:10:965      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:57:11:137 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 14:57:11:137 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 14:57:11:137 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:11:137 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:11:137 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 14:57:11:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 14:57:11:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 14:57:11:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 14:57:11:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 14:57:11:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 14:57:11:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 14:57:11:137      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:57:11:137      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:57:11:137      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 14:57:11:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:11:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:11:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 14:57:11:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 14:57:11:137      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:11:137      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 14:57:11:137       Sound.cpp(00148)] :Stop
[11/07 14:57:11:137       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:11:137      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:11:137      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:11:137      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:57:11:137      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:57:11:137   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:11:137   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:11:137      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:11:512      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:11:512      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 14:57:13:075 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 14:57:13:075 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 14:57:13:075      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:57:13:075      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 14:57:13:090      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 14:57:13:090      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 14:57:13:090      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 14:57:13:090      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 14:57:13:090      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 14:57:13:090 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 14:57:13:090 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 14:57:13:090 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:13:090 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:13:309      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 14:57:13:637      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:13:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:57:13:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:57:13:637 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0xffffffff]
[11/07 14:57:13:700     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 14:57:13:700     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 14:57:13:700     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 14:57:13:700     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 14:57:13:700     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 14:57:13:700     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:57:13:731     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 14:57:13:762     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 14:57:13:762     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 14:57:13:762 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 14:57:13:762 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 14:57:13:762      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:57:13:762   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 14:57:13:762   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 14:57:13:762   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 14:57:13:762   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 14:57:13:762 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 14:57:13:793      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 14:57:13:793      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 14:57:13:793   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:13:793   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:13:809      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 14:57:13:809      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 14:57:13:809      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 14:57:13:903      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 14:57:13:903 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:57:13:903   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 14:57:13:903   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 14:57:13:903   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 14:57:13:903   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 14:57:13:903   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 14:57:13:903   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 14:57:13:903 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 14:57:13:903      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:57:13:903      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:57:13:918      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 14:57:13:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:13:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:13:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 14:57:13:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 14:57:13:918      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:13:918      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 14:57:13:918       Sound.cpp(00148)] :Stop
[11/07 14:57:13:918       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:13:918      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:13:918      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:13:918      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:57:13:918      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 14:57:13:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:13:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:13:934      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:57:13:934      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:57:13:934      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 14:57:15:668 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 14:57:15:668 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 14:57:27:873   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:57:27:873   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:57:27:874   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:57:27:874   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:57:27:874   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:57:28:135   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 14:57:28:135   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 14:57:28:136   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 14:57:28:136   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:57:28:136   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 14:57:28:283   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 14:57:28:283   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 14:57:28:284   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 14:57:28:284   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:57:28:284   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 14:57:28:518   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 14:57:28:518   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:28:518   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 14:57:28:518   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 14:57:28:518   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 14:57:28:877   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 14:57:28:877   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:28:878   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 14:57:28:878   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 14:57:28:878   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 14:57:28:932   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 14:57:28:932   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:28:933   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 14:57:28:933   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 14:57:29:351      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 14:57:29:376      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:29:382 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 14:57:29:637      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:57:29:921      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:29:921      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:29:921   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:57:29:921   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:57:29:921      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:57:29:921   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:29:921   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:29:953      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:57:29:953      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:57:29:953      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:57:29:953      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:30:328      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:30:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:57:30:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:30:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:57:30:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:57:30:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:57:30:328      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:57:30:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:57:30:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:57:30:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:57:30:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:57:30:343      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:57:31:062      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:31:062 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 14:57:31:078      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 14:57:31:078   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:31:078   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:31:093      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:57:31:093      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:57:31:093      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:57:31:109      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:31:109 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 14:57:31:265 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 14:57:31:265 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 14:57:31:265      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 14:57:31:265      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 14:57:31:265 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 14:57:31:593      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 14:57:31:812      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:31:812   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 14:57:31:812   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 14:57:31:812      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 14:57:31:812   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:31:812   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:31:828      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 14:57:31:828      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 14:57:31:828      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 14:57:31:828      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:31:828      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:31:828      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 14:57:31:828      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 14:57:31:828      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 14:57:31:828      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 14:57:31:828      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 14:57:31:843      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 14:57:31:843      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 14:57:31:843      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 14:57:31:843      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 14:57:31:843      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 14:57:31:843      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 14:57:31:859      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 14:57:31:859      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:57:31:859      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:31:859      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:57:31:859      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:31:859      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:57:31:859       Sound.cpp(00148)] :Stop
[11/07 14:57:31:859       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:31:859      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:31:859      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:31:859      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 14:57:31:859      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 14:57:31:859   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:31:859   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:31:859      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 14:57:31:859      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 14:57:31:859      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:57:31:859      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 14:57:31:890 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 14:57:31:890      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:57:31:906      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0060]
[11/07 14:57:31:906      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 14:57:31:906      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 14:57:31:906       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:57:31:906       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:57:31:906       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:57:31:921       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0060']
[11/07 14:57:31:968       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:57:31:968       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:57:31:968       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:57:31:968       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:57:31:968       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:57:31:968       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:57:31:968       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:57:31:968       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:57:31:968       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 14:57:31 EJ NUMBER = 0060 ] |14:57:31 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:57:31:968       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0060','11','07','2017','14','57','31','Change into operator mode<START_EJRNL>[ 11/07/2017 14:57:31 EJ NUMBER = 0060 ] |14:57:31 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 14:57:32:015       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:57:32:015       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:57:32:015       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:57:32:015       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:57:32:015       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:57:32:015       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:57:32:015       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:57:32:015       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[60]
[11/07 14:57:32:015       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [60]
[11/07 14:57:32:015       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[59], m_bRecordCountFinal=[1]
[11/07 14:57:32:062       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [60]
[11/07 14:57:32:062      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 14:57:31 EJ NUMBER = 0060 ] |14:57:31 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:57:32:062      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 14:57:31 EJ NUMBER = 0060 ] |14:57:31 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 14:57:32:062      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:57:32:062      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 14:57:32:078      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:32:093     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 14:57:32:093     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 14:57:32:140 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 14:57:32:140 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 14:57:32:140 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 14:57:32:250 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 14:57:32:796 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 14:57:32:796      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 14:57:32:796   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:32:796   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:32:796      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:57:32:796      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:57:33:643   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:57:33:643   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:33:644   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:57:33:644   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:57:33:644   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:57:33:888   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:57:33:888   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:33:888   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:57:33:888   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:57:33:888   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:57:34:008   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:57:34:008   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:34:008   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:57:34:008   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:57:34:008   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:57:34:153   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:57:34:153   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:34:154   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:57:34:154   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:57:34:154   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:57:34:274   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:57:34:274   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:34:275   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:57:34:275   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:57:34:275   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:57:34:489   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 14:57:34:489   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:34:490   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 14:57:34:490   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 14:57:34:490   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 14:57:34:947   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:57:34:947   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:57:34:948   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:57:34:948   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:57:34:948   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:57:35:339 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 14:57:35:339      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 14:57:35:340   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 14:57:35:341   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 14:57:35:342      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 14:57:35:342      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 14:57:50:833   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[7])
[11/07 14:57:50:834   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 14:57:50:834   WinAtmCtl.cpp(00891)] :strDataValue[7])
[11/07 14:57:50:834   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[7])
[11/07 14:57:50:834   WinAtmCtl.cpp(00935)] :VirtualKeyCode[37])
[11/07 14:57:51:178   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 14:57:51:178   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 14:57:51:178   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 14:57:51:179   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 14:57:51:179   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 14:57:51:379 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_VDM||FRONT]
[11/07 14:57:51:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [DIAGNOSTICS MODE]])
[11/07 14:57:51:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [DIAGNOSTICS MODE]]
[11/07 14:57:51:691   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  Please wait...])
[11/07 14:57:51:691   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  Please wait...]
[11/07 14:57:51:691      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 14:57:51:692      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:51:692      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 14:57:51:692   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 14:57:51:692   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 14:57:51:693   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 14:57:51:693   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 14:57:51:693      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 14:57:51:694      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 14:57:51:694       Sound.cpp(00148)] :Stop
[11/07 14:57:51:694       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:51:694      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 14:57:51:695      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 14:57:51:695      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[OPDO]
[11/07 14:57:51:695      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 14:57:51:695      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 14:57:51:720      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0061]
[11/07 14:57:51:721      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SV]
[11/07 14:57:51:721      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SV]
[11/07 14:57:51:721       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 14:57:51:721       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 14:57:51:721       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 14:57:51:726       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0061']
[11/07 14:57:51:760       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 14:57:51:760       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 14:57:51:761       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:57:51:766       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:57:51:766       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:57:51:767       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:57:51:767       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 14:57:51:767       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 14:57:51:768       DevDB.cpp(01106)] :pEJnl->Data [Change into diagnostics mode<START_EJRNL>[ 11/07/2017 14:57:51 EJ NUMBER = 0061 ] |14:57:51 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>]
[11/07 14:57:51:768       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0129','SV','0061','11','07','2017','14','57','51','Change into diagnostics mode<START_EJRNL>[ 11/07/2017 14:57:51 EJ NUMBER = 0061 ] |14:57:51 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>')]
[11/07 14:57:51:802       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 14:57:51:803       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 14:57:51:803       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 14:57:51:803       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 14:57:51:808       DevDB.cpp(00079)] :OpenDataBase End
[11/07 14:57:51:808       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 14:57:51:809       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 14:57:51:810       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[61]
[11/07 14:57:51:810       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [61]
[11/07 14:57:51:810       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[60], m_bRecordCountFinal=[1]
[11/07 14:57:51:843       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [61]
[11/07 14:57:51:844      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into diagnostics mode<START_EJRNL>[ 11/07/2017 14:57:51 EJ NUMBER = 0061 ] |14:57:51 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>]
[11/07 14:57:51:844      DevApl.cpp(06316)] :strTempArray0=[Change into diagnostics mode] / strTempArray1=[[ 11/07/2017 14:57:51 EJ NUMBER = 0061 ] |14:57:51 [SERVICE DIAGNOSTICS MODE]<END_EJRNL>]
[11/07 14:57:51:844      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 14:57:51:844      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[CLERK||OFF||OFF||OFF||ON||111111||222222||555555||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:51:845      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 14:57:51:845      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APSTART]
[11/07 14:57:51:845      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 14:57:51:845      DevApl.cpp(01123)] :fnAPL_UnLoadDevice()
[11/07 14:57:51:845       Sound.cpp(00082)] :CloseDevice()
[11/07 14:57:51:846       Sound.cpp(00148)] :Stop
[11/07 14:57:51:846       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 14:57:51:846       Sound.cpp(00090)] :CloseDevice()=[0]
[11/07 14:57:51:846      DevCmn.cpp(04162)] :fnPBM_Deinitialize()
[11/07 14:57:51:846      DevCmn.cpp(04171)] :fnPBM_Deinitialize():return(0)
[11/07 14:57:51:846      DevCmn.cpp(03797)] :fnCDU_Deinitialize()
[11/07 14:57:52:764      DevCmn.cpp(03806)] :fnCDU_Deinitialize():return(0)
[11/07 14:57:52:764      DevCmn.cpp(01089)] :fnMCU_Deinitialize()
[11/07 14:57:53:639      DevCmn.cpp(01096)] :fnMCU_Deinitialize():return(0)
[11/07 14:57:53:639      DevCmn.cpp(00699)] :fnSPR_Deinitialize()
[11/07 14:57:57:155      DevCmn.cpp(00708)] :fnSPR_Deinitialize():return(0)
[11/07 14:57:57:155      DevCmn.cpp(00431)] :fnJPR_Deinitialize()
[11/07 14:57:57:155      DevCmn.cpp(00440)] :fnJPR_Deinitialize():return(0)
[11/07 14:57:57:155      DevCmn.cpp(02762)] :fnDEP_Deinitialize()
[11/07 14:57:57:155      DevCmn.cpp(02771)] :fnDEP_Deinitialize(...):return(0)
[11/07 14:57:57:202      DevCmn.cpp(05672)] :fnVFD_Deinitialize()
[11/07 14:57:57:202      DevCmn.cpp(05679)] :fnVFD_Deinitialize():return(0)
[11/07 14:57:57:217      DevCmn.cpp(05046)] :fnUPS_Deinitialize()
[11/07 14:57:57:389      DevCmn.cpp(05053)] :fnUPS_Deinitialize():return(0)
[11/07 14:57:57:389      DevCmn.cpp(04403)] :fnCMR_Deinitialize()
[11/07 14:57:57:389      DevCmn.cpp(04410)] :fnCMR_Deinitialize():return(0)
[11/07 14:57:57:389      DevCmn.cpp(05557)] :fnSNS_Deinitialize()
[11/07 14:57:57:389      DevCmn.cpp(05564)] :fnSNS_Deinitialize():return(0)
[11/07 14:57:57:389      DevCmn.cpp(05210)] :fnPIN_Deinitialize()
[11/07 14:57:58:889      DevCmn.cpp(05217)] :fnPIN_Deinitialize():return(0)
[11/07 14:57:58:889      DevCmn.cpp(04945)] :fnSPL_Deinitialize()
[11/07 14:57:58:889      DevCmn.cpp(04952)] :fnSPL_Deinitialize():return(0)
[11/07 14:57:58:889      DevCmn.cpp(04692)] :fnLGT_Deinitialize()
[11/07 14:57:58:936      DevCmn.cpp(04699)] :fnLGT_Deinitialize():return(0)
[11/07 14:57:58:936      DevCmn.cpp(04580)] :fnDOR_Deinitialize()
[11/07 14:57:59:061      DevCmn.cpp(04587)] :fnDOR_Deinitialize():return(0)
[11/07 14:58:06:920      DevApl.cpp(01189)] :fnAPL_UnLoadDevice():return
[11/07 14:58:06:952 AtmClerkCtrl.cp(00717)] :VDM PROCESS STARTED/[FRONT]: strOpCommandArray.GetSize()=[2]
[11/07 14:58:06:952 AtmClerkCtrl.cp(00720)] :m_pDevCmn->AtmDefine.OpDevice=[0]
[11/07 14:58:06:952 AtmClerkCtrl.cp(00721)] :m_pDevCmn->AtmDefine.MachineKind=[9]
[11/07 15:02:36:010 AtmClerkCtrl.cp(00742)] :VDM PROCESS ENDED
[11/07 15:02:36:010      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[2], nPinInputMode=[1]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:02:36:010      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:02:36:010      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:02:36:010 AtmModeCtrl.cpp(02076)] :TerminateProcess(): nRebootFlag=[1]
[11/07 15:02:36:010 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[2]
[11/07 15:02:36:010 TranNmsProc.cpp(00656)] :Over 1,800,000K :GetMemorySize(GET_OCCUPIED_VM_SIZE)=[4293521408]
[11/07 15:02:36:010 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 15:02:36:010      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:02:36:010      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:02:36:010      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 15:02:36:010      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:02:36:010      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 15:02:36:010       Sound.cpp(00148)] :Stop
[11/07 15:02:36:010       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:02:36:010      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:02:36:010      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:02:36:010      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:02:36:010      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:02:36:010   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:02:36:010   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:02:36:010      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:02:36:026      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:02:36:026      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 15:03:00:343   LoaderDlg.cpp(00137)] :









Loading Loader.exe
[11/07 15:03:00:390   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[11/07 15:03:01:005    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 15:03:01:015    CESocket.cpp(00101)] :~CCESocket()

[11/07 15:03:01:156    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 15:03:01:179    CESocket.cpp(00101)] :~CCESocket()

[11/07 15:03:02:215    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 15:03:02:220   WinAtmCtl.cpp(01638)] :CSuppressOleBusyMsg()
[11/07 15:03:02:220   WinAtmCtl.cpp(01649)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[011BA9D8]
[11/07 15:03:02:220   WinAtmCtl.cpp(00202)] :===============================================================
[11/07 15:03:02:221   WinAtmCtl.cpp(00203)] :===============================================================
[11/07 15:03:02:221   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[11/07 15:03:02:221   WinAtmCtl.cpp(00363)] :OnCreate()
[11/07 15:03:02:264   WinAtmCtl.cpp(00377)] :OnCreate():return
[11/07 15:03:02:264   WinAtmCtl.cpp(01168)] :handle1=[10242]
[11/07 15:03:02:265   WinAtmCtl.cpp(01171)] :handle2=[10240]
[11/07 15:03:02:298   WinAtmCtl.cpp(00977)] :AtmStart()
[11/07 15:03:02:299      DevCmn.cpp(00045)] :CDevCmn()
[11/07 15:03:02:299      DevCmn.cpp(00053)] :CDevCmn():return
[11/07 15:03:02:299     TranCmn.cpp(00032)] :CTranCmn()
[11/07 15:03:02:299     TranCmn.cpp(00033)] :CTranCmn():return
[11/07 15:03:02:299      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[11/07 15:03:02:400      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : TOUCH
[11/07 15:03:02:400      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 1
[11/07 15:03:02:401  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[11/07 15:03:02:401  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[11/07 15:03:02:401  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[11/07 15:03:02:401  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[11/07 15:03:02:402  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1890953188, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 15:03:02:403  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1890953188, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 15:03:02:403     NetWork.cpp(00095)] :[SetInformation] CtrlType : 1, LineType : 2
[11/07 15:03:02:451 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[11/07 15:03:10:334      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[11/07 15:03:10:334      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1107]
[11/07 15:03:10:334      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[],nStep[1]
[11/07 15:03:10:334      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:334      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1107\Log1107.zip]
[11/07 15:03:10:334      DevCmn.cpp(06424)] :BSTrace Log
[11/07 15:03:10:334      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1107\BSTrace1711071503.nwlog]
[11/07 15:03:10:413      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 15:03:10:413      DevCmn.cpp(06444)] :BSTrace Log Trace End
[11/07 15:03:10:413      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log1107\BSTrace1711071503.nwlog],nStep[2]
[11/07 15:03:10:709      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:709      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1107\BSTrace1711071503.nwlog]
[11/07 15:03:10:709      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[11/07 15:03:10:725      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:725      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[11/07 15:03:10:725      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[11/07 15:03:10:725      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:725      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[11/07 15:03:10:725      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[11/07 15:03:10:741      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:741      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[11/07 15:03:10:741      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[11/07 15:03:10:741      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:741      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[11/07 15:03:10:741      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[11/07 15:03:10:741      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:741      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[11/07 15:03:10:741      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[11/07 15:03:10:741      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:741      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[11/07 15:03:10:741      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log07.txt],nStep[2]
[11/07 15:03:10:803      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:803      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log07.txt]
[11/07 15:03:10:803      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi07.txt],nStep[2]
[11/07 15:03:10:819      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:834      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi07.txt]
[11/07 15:03:10:834      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear07.txt],nStep[2]
[11/07 15:03:10:834      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:834      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear07.txt]
[11/07 15:03:10:834      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog07.txt],nStep[2]
[11/07 15:03:10:850      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:850      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog07.txt]
[11/07 15:03:10:850      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace07_#1.txt],nStep[2]
[11/07 15:03:10:850      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:850      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace07_#1.txt]
[11/07 15:03:10:850      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp07.txt],nStep[2]
[11/07 15:03:10:850      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:03:10:850      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp07.txt]
[11/07 15:03:10:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log06.txt],nStep[2]
[11/07 15:03:10:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:03:10:866      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log06.txt]
[11/07 15:03:10:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi06.txt],nStep[2]
[11/07 15:03:10:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:03:10:866      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi06.txt]
[11/07 15:03:10:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear06.txt],nStep[2]
[11/07 15:03:10:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:03:10:866      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear06.txt]
[11/07 15:03:10:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog06.txt],nStep[2]
[11/07 15:03:10:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:03:10:866      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog06.txt]
[11/07 15:03:10:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace06_#1.txt],nStep[2]
[11/07 15:03:10:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:03:10:866      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace06_#1.txt]
[11/07 15:03:10:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp06.txt],nStep[3]
[11/07 15:03:10:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:03:10:866      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp06.txt]
[11/07 15:03:10:866      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[11/07 15:03:10:866      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:03:10:866      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:03:10:866      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 15:03:10:866      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 15:03:10:866      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 15:03:10:866      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 15:03:10:866      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[11/07 15:03:10:866      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[11/07 15:03:10:866      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[11/07 15:03:10:866      DevApl.cpp(00722)] :    BATTERY LOW SHUTDOWN OPTION IS ENABLED
[11/07 15:03:10:866   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[11/07 15:03:10:866   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[11/07 15:03:10:866   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[11/07 15:03:10:866   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[11/07 15:03:10:866   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[11/07 15:03:10:866   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[11/07 15:03:10:866       Sound.cpp(00059)] :OpenDevice()
[11/07 15:03:10:866       Sound.cpp(00076)] :OpenDevice()=[0]
[11/07 15:03:10:866      DevApl.cpp(10595)] :BINLIST Count of BinList =[2], Command=[UPDATE]
[11/07 15:03:10:897      DevApl.cpp(10621)] :BINLIST Count of BININFO1=[2]
[11/07 15:03:10:897      DevApl.cpp(10626)] :BINLIST nCntMain=[2]
[11/07 15:03:10:928      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[2||1234567890||1234567891]
[11/07 15:03:10:928      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=100c4e4d)
[11/07 15:03:10:928      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 15:03:10:928      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[11/07 15:03:10:928      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[11/07 15:03:10:928     TranCmn.cpp(00065)] :SetOwner()
[11/07 15:03:10:928     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[V01.05.00.00]
[11/07 15:03:11:163     TranCmn.cpp(00108)] :AP VERSION = [V01.05.00.00D CD                        ]
[11/07 15:03:11:163     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[11/07 15:03:11:163     TranCmn.cpp(00381)] :Successfully read AID Total Count = [9] => Term_data Exist : Return without creating
[11/07 15:03:11:163     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[11/07 15:03:11:178     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[11/07 15:03:11:209     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[11/07 15:03:11:225     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[11/07 15:03:11:256     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[11/07 15:03:11:256     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[1], nCnt=[2]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[11/07 15:03:11:256     TranCmn.cpp(00287)] :nCount[2]
[11/07 15:03:11:288 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[11/07 15:03:11:319 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[11/07 15:03:11:319     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[11/07 15:03:11:319     TranCmn.cpp(00364)] :SetOwner():return
[11/07 15:03:11:319   WinAtmCtl.cpp(01660)] :Suppress(): pOMF=[011BA9D8]
[11/07 15:03:11:319   WinAtmCtl.cpp(01667)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[11/07 15:03:11:319   WinAtmCtl.cpp(01272)] :strDate=[07], strYYMM=[1711]
[11/07 15:03:11:319      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[11/07 15:03:11:319      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:03:11:319      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[11/07 15:03:11:319      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[11/07 15:03:11:319   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:03:11:319   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:03:11:319   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[11/07 15:03:11:319   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[11/07 15:03:11:319      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:03:11:319      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[11/07 15:03:11:334       Sound.cpp(00148)] :Stop
[11/07 15:03:11:334       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:03:11:334      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:03:11:334      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:03:11:334      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[AP]
[11/07 15:03:11:334      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:03:11:334   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:03:11:334   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:03:11:334      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:03:11:334      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:03:11:334      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[11/07 15:03:11:522      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:03:11:569      DevCmn.cpp(05658)] :fnVFD_Initialize(nPortNum[9], nBaudRate[38400])
[11/07 15:03:11:569      DevCmn.cpp(05665)] :fnVFD_Initialize(...):return(0)
[11/07 15:03:11:569      DevCmn.cpp(04566)] :fnDOR_Initialize()
[11/07 15:03:24:379      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[11/07 15:03:24:379      DevCmn.cpp(04678)] :fnLGT_Initialize()
[11/07 15:03:24:411      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[11/07 15:03:24:426      DevCmn.cpp(04931)] :fnSPL_Initialize()
[11/07 15:03:24:426      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[11/07 15:03:24:426      DevCmn.cpp(05196)] :fnPIN_Initialize()
[11/07 15:03:25:879      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[11/07 15:03:25:879      DevCmn.cpp(05541)] :fnSNS_Initialize()
[11/07 15:03:25:918      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[11/07 15:03:25:918      DevCmn.cpp(04389)] :fnCMR_Initialize()
[11/07 15:03:25:918      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[11/07 15:03:25:918      DevCmn.cpp(05032)] :fnUPS_Initialize()
[11/07 15:03:26:048      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[11/07 15:03:27:252   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:03:27:252   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:03:27:252      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[11/07 15:03:28:190 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:03:28:190      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:03:28:190      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:03:28:190      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:03:28:190      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:03:28:206      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:03:28:206 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[11/07 15:03:28:221      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:03:28:456      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 15:03:28:456      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[11/07 15:03:28:456      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[11/07 15:03:28:456      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[11/07 15:03:28:487 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[189140992], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1958211584]
[11/07 15:03:28:487      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:03:28:487 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:03:28:487 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:03:28:487 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:03:28:596 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:03:28:596      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:03:28:612      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0062]
[11/07 15:03:28:612      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[11/07 15:03:28:612      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[11/07 15:03:28:612       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:03:28:612       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:03:28:612       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:03:28:627       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0062']
[11/07 15:03:28:674       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:03:28:674       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:03:28:674       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:03:28:674       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:03:28:674       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:03:28:674       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:03:28:674       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:03:28:674       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:03:28:674       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 11/07/2017 15:03:28 EJ NUMBER = 0062 ] |15:03:28 [Power On]<END_EJRNL>]
[11/07 15:03:28:674       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0062','11','07','2017','15','03','28','System Power On<START_EJRNL>[ 11/07/2017 15:03:28 EJ NUMBER = 0062 ] |15:03:28 [Power On]<END_EJRNL>')]
[11/07 15:03:28:721       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:03:28:721       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:03:28:721       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:03:28:721       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:03:28:721       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:03:28:721       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:03:28:721       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:03:28:721       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[62]
[11/07 15:03:28:721       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [62]
[11/07 15:03:28:721       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[61], m_bRecordCountFinal=[1]
[11/07 15:03:28:768       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [62]
[11/07 15:03:28:768      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 11/07/2017 15:03:28 EJ NUMBER = 0062 ] |15:03:28 [Power On]<END_EJRNL>]
[11/07 15:03:28:768      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 11/07/2017 15:03:28 EJ NUMBER = 0062 ] |15:03:28 [Power On]<END_EJRNL>]
[11/07 15:03:28:768      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:03:28:815      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:03:28:815 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:03:28:815      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:03:28:815      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:03:28:815      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 15:03:28:846      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[11/07 15:03:28:846      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[11/07 15:03:28:846      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 15:03:28:846      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[11/07 15:03:28:846      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 15:03:28:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:03:28:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:03:28:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:03:28:862      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 15:03:28:862      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:03:28:862      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 15:03:28:862      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 15:03:28:893      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 15:03:28:893      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 15:03:31:002      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 15:03:31:002      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:03:31:002      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 15:03:33:581      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 15:03:33:581      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 15:03:33:581      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 15:03:44:612      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 15:03:47:752      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[11/07 15:03:50:893      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[11/07 15:03:50:956      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[11/07 15:03:50:956      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 15:03:54:143      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[11/07 15:03:54:143      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[11/07 15:03:54:143      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(1999)
[11/07 15:03:54:143      DevCmn.cpp(03636)] :fnCDU_GetNumberOfDispense(nCSTNo[1]):return(1)
[11/07 15:03:54:143      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[11/07 15:03:54:143      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(2000)
[11/07 15:03:54:159      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 15:03:57:315      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 15:03:57:315      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:03:57:315      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(2000)
[11/07 15:03:57:315      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(2000)
[11/07 15:03:57:315      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[11/07 15:03:57:315      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 15:03:57:315      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[11/07 15:03:57:315      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[11/07 15:03:57:315      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][0][0][0]
[11/07 15:03:57:315      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[11/07 15:03:57:331      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 15:03:57:440 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[11/07 15:03:57:440 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[11/07 15:03:57:471      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:03:57:612      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:03:57:627     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:03:57:627     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:03:57:674      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APRUN]
[11/07 15:03:57:674      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[11/07 15:03:57:674 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD1]
[11/07 15:03:57:674      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=0, pTime=11
[11/07 15:03:57:674      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 15:03:57:706 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[11/07 15:03:57:877 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:03:57:877 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:03:57:877      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:03:57:877      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:03:57:877 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:03:58:112      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:03:58:331      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:03:58:331   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:03:58:331   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:03:58:331      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:03:58:331   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:03:58:331   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:03:58:346      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:03:58:346      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:03:58:346      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:03:58:346      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:03:58:346      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:03:58:346      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:03:58:346      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:03:58:346      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:03:58:346      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:03:58:346      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:03:58:362      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:03:58:362      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:03:58:362      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:03:58:362      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:03:58:362      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:03:58:362      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:03:58:393      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:03:58:393      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:03:58:424      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:03:58:440      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0063]
[11/07 15:03:58:440      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 15:03:58:440      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 15:03:58:440       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:03:58:440       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:03:58:440       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:03:58:440       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0063']
[11/07 15:03:58:487       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:03:58:487       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:03:58:487       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:03:58:487       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:03:58:487       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:03:58:487       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:03:58:487       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:03:58:487       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:03:58:487       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 15:03:58 EJ NUMBER = 0063 ] |15:03:58 [SERVICE MODE]<END_EJRNL>]
[11/07 15:03:58:487       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0063','11','07','2017','15','03','58','Change into service mode<START_EJRNL>[ 11/07/2017 15:03:58 EJ NUMBER = 0063 ] |15:03:58 [SERVICE MODE]<END_EJRNL>')]
[11/07 15:03:58:534       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:03:58:534       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:03:58:534       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:03:58:534       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:03:58:534       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:03:58:534       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:03:58:534       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:03:58:534       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[63]
[11/07 15:03:58:534       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [63]
[11/07 15:03:58:534       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[62], m_bRecordCountFinal=[1]
[11/07 15:03:58:581       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [63]
[11/07 15:03:58:581      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 15:03:58 EJ NUMBER = 0063 ] |15:03:58 [SERVICE MODE]<END_EJRNL>]
[11/07 15:03:58:581      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 15:03:58 EJ NUMBER = 0063 ] |15:03:58 [SERVICE MODE]<END_EJRNL>]
[11/07 15:03:58:581      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:03:58:596      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:03:58:752 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:03:58:752      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:03:58:752      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:03:58:752 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:03:58:752 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:03:58:752      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:03:58:752      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:03:58:971      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:03:59:213      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:03:59:213   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:03:59:213   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:03:59:221      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:03:59:221   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:03:59:221   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:03:59:237      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:03:59:237      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:03:59:237      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:03:59:237      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:03:59:237      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:03:59:237      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:03:59:237      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:03:59:237      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:03:59:245      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:03:59:245      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:03:59:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:03:59:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:03:59:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:03:59:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:03:59:252      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:03:59:260      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:03:59:284      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:03:59:284 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:03:59:284 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:03:59:284 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:03:59:284 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:03:59:284 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[11/07 15:03:59:291      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:03:59:291      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:03:59:291      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:03:59:291      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:03:59:291      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:03:59:291       Sound.cpp(00148)] :Stop
[11/07 15:03:59:291       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:03:59:291      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:03:59:291      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:03:59:291      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:03:59:291      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:03:59:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:03:59:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:03:59:299      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:03:59:299      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:03:59:315      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:04:00:932      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:04:00:932 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:04:01:026 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[11/07 15:04:01:057 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 15:04:01:120 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[11/07 15:04:01:213 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[11/07 15:04:01:370 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A6
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (H/C)])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (H/C)]
[11/07 15:04:01:385      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:04:01:385      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:04:01:385      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:04:01:385      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:01:385      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:04:01:385       Sound.cpp(00148)] :Stop
[11/07 15:04:01:385       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:01:385      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:01:385      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:01:385      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:01:385      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:04:01:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:01:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:01:385      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:04:01:385      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:01:776      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:04:03:338      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:03:385 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[11/07 15:04:03:385 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[11/07 15:04:03:401 TranMainProc.cp(00182)] :TranStatus[11]
[11/07 15:04:03:401 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[11/07 15:04:03:401 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[11/07 15:04:03:401     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:04:03:401     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:04:03:401     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:04:03:463     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:04:03:495     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:04:03:495     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:04:03:495 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[11/07 15:04:03:495      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 15:04:03:760      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 15:04:03:791 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 15:04:03:791 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[11/07 15:04:03:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[11/07 15:04:03:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[11/07 15:04:03:807      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:03:807      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:04:03:807      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:04:03:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:03:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:03:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 15:04:03:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 15:04:03:807      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:03:807      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 15:04:03:807       Sound.cpp(00148)] :Stop
[11/07 15:04:03:807       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:03:807      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:03:807      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:03:807      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:03:807      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:04:03:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:03:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:03:807      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:04:182      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:04:182      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 15:04:04:963 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 15:04:04:963 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 15:04:04:963 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 15:04:04:963 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1011])
[11/07 15:04:04:963 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    88]:return
[11/07 15:04:04:963 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[11/07 15:04:04:963 TranHostProc.cp(01345)] :m_strProtocolType=[STANDARD1], m_KeyMode=[3]
[11/07 15:04:04:979 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 15:04:04:979 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[11/07 15:04:04:979 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 15:04:04:979 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(23)
[11/07 15:04:04:979 TranHostProc.cp(00254)] :SendLength(23), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 15:04:04:979 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 15:04:04:995      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:05:010 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 15:04:05:010     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 15:04:05:010     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 15:04:05:010  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 15:04:05:010       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 15:04:05:010    CESocket.cpp(00116)] :Create() start

[11/07 15:04:05:010    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 15:04:05:010    CESocket.cpp(00220)] :Connect() start - socket:1968 address: 192.168.198.199 port: 45000
[11/07 15:04:05:010    CESocket.cpp(00441)] :Connect() OK
[11/07 15:04:05:010    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 15:04:05:010  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 15:04:05:010  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 15:04:05:010  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 88, protocol : STANDARD1
[11/07 15:04:05:010  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 15:04:05:010    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 15:04:06:666    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:04:06:666    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:04:06:666       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:04:06:729  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 15:04:06:729    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:06:729       TCPIP.cpp(00091)] :LineSendData
[11/07 15:04:06:729    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:04:06:729    CESocket.cpp(00520)] :Send() end - total sendLen: 26
[11/07 15:04:06:729  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:26]

[11/07 15:04:06:916    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:04:06:916    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:04:06:916       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:04:07:041  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 15:04:07:041    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:07:120    CESocket.cpp(00755)] :receive Data(thread): [len:108]
[11/07 15:04:07:120    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 108
[11/07 15:04:07:120       TCPIP.cpp(00123)] :receive Data(put_data): [len: 108]
[11/07 15:04:07:198  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 15:04:07:198    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:07:198  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[5]

[11/07 15:04:07:198    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:07:198       TCPIP.cpp(00091)] :LineSendData
[11/07 15:04:07:198    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:04:07:198    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:04:07:338    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:04:07:338    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:04:07:338       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:04:07:354  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 15:04:07:354    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 15:04:07:354       TCPIP.cpp(00091)] :LineSendData
[11/07 15:04:07:354    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:04:07:354    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:04:07:385       TCPIP.cpp(00082)] :line close start
[11/07 15:04:07:385    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 15:04:07:385    CESocket.cpp(00463)] :Disconnect() End

[11/07 15:04:07:385    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 15:04:07:385     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 15:04:07:385    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 15:04:07:385    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 15:04:07:385      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 15:04:07:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 15:04:07:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 15:04:07:385      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:04:07:385 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 15:04:07:385 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 15:04:07:385 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 15:04:07:385  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    881106201716212100050011808CE54F7E2CCC00000355022808CE54F7E2CCC11808CE54F7E2CCC][LEN:105]

[11/07 15:04:07:385     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 15:04:07:385      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 15:04:07:385 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[105])
[11/07 15:04:07:385      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 15:04:07:385   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 15:04:07:385   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 15:04:07:385      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:04:07:385 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[88]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[11062017162121]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[000500]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11808CE54F7E2CCC]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[00000355]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[0]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[22808CE54F7E2CCC]
[11/07 15:04:07:385 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[11808CE54F7E2CCC]
[11/07 15:04:07:385 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[10]
[11/07 15:04:07:666 TranHostProc.cp(04029)] :OpenRespMsg.SurchargeAmount_V=[00000355]
[11/07 15:04:07:698 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 15:04:07:713 TranOutputProc.(02767)] :fnAPP_LoadWorkingKey(), Keymode = [3]
[11/07 15:04:07:713      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:07:713      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K3], szKeyValue[11808CE54F7E2CCC])
[11/07 15:04:07:713      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:07:776      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 15:04:07:791 TranOutputProc.(02839)] :fnAPP_LoadWorkingKey() K3 KeyLoad Success!
[11/07 15:04:07:791      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:07:791      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K2], szKeyValue[22808CE54F7E2CCC])
[11/07 15:04:07:791      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:07:838      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 15:04:07:854 TranOutputProc.(02865)] :fnAPP_LoadWorkingKey() K2 KeyLoad Success!
[11/07 15:04:07:854      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:07:854      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK], szKeyName[K1], szKeyValue[11808CE54F7E2CCC])
[11/07 15:04:07:854      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:08:088      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 15:04:08:104 TranOutputProc.(02893)] :fnAPP_LoadWorkingKey() K1 KeyLoad Success!
[11/07 15:04:08:104 TranHostProc.cp(03105)] :fnAPP_STD1_RecvHost(): TranResult = TRUE
[11/07 15:04:08:104 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 15:04:08:104 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 15:04:08:104      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 15:04:08:323      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 15:04:08:338 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[11/07 15:04:08:338 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:04:08:338 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:04:08:338 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:04:08:338 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:04:08:385 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:04:08:385 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:08:385 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:08:385 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:08:385 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:08:385 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 15:04:08:385 TranMainProc.cp(00096)] :[fnAPP_MainOpenPorc] Send ATM_REPORT_STATUS to RMS agent
[11/07 15:04:08:385 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 15:04:08:385 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 15:04:08:385 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:08:385 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:08:385 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:08:385 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:08:385      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:04:08:385      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:08:385      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:04:08:401      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:04:08:573 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 15:04:08:573 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 15:04:08:573 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:08:573 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:08:573 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 15:04:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 15:04:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 15:04:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 15:04:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 15:04:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 15:04:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 15:04:08:573      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:08:573      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:04:08:573      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:04:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 15:04:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 15:04:08:573      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:08:573      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 15:04:08:573       Sound.cpp(00148)] :Stop
[11/07 15:04:08:573       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:08:573      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:08:573      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:08:573      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:08:573      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:04:08:573   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:08:573   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:08:573      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:08:573      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:08:573      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 15:04:10:135 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 15:04:10:135 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 15:04:10:135 TranMainProc.cp(00134)] :fnAPP_MainOpenProc:: Return(1)
[11/07 15:04:10:213 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_ONLINE    ], HostStatusSave[HOST_WAITREADY ]
[11/07 15:04:10:291 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:04:10:291      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:04:10:291      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:04:10:291 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:04:10:291 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:04:10:291      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:04:10:291      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:04:10:526      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:04:10:745      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:10:745      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:04:10:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:04:10:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:04:10:745      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:04:10:745   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:10:745   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:10:760      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:04:10:760      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:04:10:760      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:04:10:760      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:10:760      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:10:760      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:04:10:760      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:10:760      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:04:10:760      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:04:10:760      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:04:10:776      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:04:10:776      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:04:10:776      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:04:10:776      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:04:10:776      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:04:10:776      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:04:10:807      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:04:10:807 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:10:807 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:10:807 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:10:807 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:10:807 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:04:10:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:04:10:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:04:10:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 15:04:10:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 15:04:10:807      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:04:10:807      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:04:10:807      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:10:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:04:10:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:04:10:807      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:10:807      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:04:10:807       Sound.cpp(00148)] :Stop
[11/07 15:04:10:807       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:10:807      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:10:807      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:10:807      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:10:807      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:04:10:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:10:823   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:10:823      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:04:10:823      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:10:823      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:04:12:385      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:04:12:385 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:04:12:495 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 15:04:12:495 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 6 => A0
[11/07 15:04:12:510      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:12:510 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 15:04:12:510 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[15], m_pDevCmn->m_DelayTime=[0]
[11/07 15:04:12:510 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:04:12:526      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:04:12:526   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:12:526   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:12:541      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:04:12:541      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:04:12:541      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:04:12:557      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:12:557 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:04:12:557 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[15], m_DelayTime=[0]
[11/07 15:04:12:588 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_READY      )
[11/07 15:04:12:588 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 15:04:12:588 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 15:04:12:620 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 15:04:12:620 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 15:04:12:620 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 15:04:12:620 TranMainProc.cp(01138)] :TranCode:[1011]
[11/07 15:04:12:620 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 15:04:12:620 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:04:12:620 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:04:12:620 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:12:729 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:12:885 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 15:04:12:885 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 15:04:12:885      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:04:12:885      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:12:885      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:04:12:885      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:04:12:885      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:04:12:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:04:12:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:04:12:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:04:12:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:04:12:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:04:12:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:04:12:901     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:04:12:901     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:04:12:901     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:04:12:979     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:04:12:995     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:04:12:995     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:04:12:995 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 15:04:12:995      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 15:04:13:260      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 15:04:13:276 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 15:04:13:276 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 15:04:13:276   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 15:04:13:276   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 15:04:13:276      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:13:276      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:04:13:276      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:04:13:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:13:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:13:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 15:04:13:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 15:04:13:291      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:13:291      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 15:04:13:291       Sound.cpp(00148)] :Stop
[11/07 15:04:13:291       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:13:291      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:13:291      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:13:291      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:13:291      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:04:13:291   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:13:291   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:13:291      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:13:682      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:13:682      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 15:04:14:463 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 15:04:14:463 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 15:04:14:463 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 15:04:14:463 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 15:04:14:463 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 15:04:14:463 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 15:04:14:463 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 15:04:14:463 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 15:04:14:463 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 15:04:14:463 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 15:04:14:463 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 15:04:14:495 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 15:04:14:495      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:04:14:495      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:04:14:495 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 15:04:14:495 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 15:04:14:495 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 15:04:14:495 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 15:04:14:495 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 15:04:14:495 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 15:04:14:495 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 15:04:14:495 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 15:04:14:495 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 15:04:14:510      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:14:526 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 15:04:14:526     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 15:04:14:526     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 15:04:14:526  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 15:04:14:526       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 15:04:14:526    CESocket.cpp(00116)] :Create() start

[11/07 15:04:14:526    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 15:04:14:526    CESocket.cpp(00220)] :Connect() start - socket:776 address: 192.168.198.199 port: 45000
[11/07 15:04:14:526    CESocket.cpp(00441)] :Connect() OK
[11/07 15:04:14:526    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 15:04:14:526  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 15:04:14:526  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 15:04:14:526  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 15:04:14:526  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 15:04:14:526    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 15:04:16:190    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:04:16:198    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:04:16:198       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:04:16:245  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 15:04:16:245    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:16:245       TCPIP.cpp(00091)] :LineSendData
[11/07 15:04:16:245    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:04:16:245    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 15:04:16:245  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 15:04:16:440    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:04:16:440    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:04:16:440       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:04:16:557  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 15:04:16:557    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:16:659    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 15:04:16:659    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 15:04:16:659       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 15:04:16:721  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 15:04:16:721    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:16:721  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 15:04:16:721    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:04:16:721       TCPIP.cpp(00091)] :LineSendData
[11/07 15:04:16:721    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:04:16:721    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:04:16:862    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:04:16:862    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:04:16:862       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:04:16:877  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 15:04:16:877    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 15:04:16:877       TCPIP.cpp(00091)] :LineSendData
[11/07 15:04:16:877    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:04:16:877    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:04:16:893       TCPIP.cpp(00082)] :line close start
[11/07 15:04:16:893    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 15:04:16:893    CESocket.cpp(00463)] :Disconnect() End

[11/07 15:04:16:893    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 15:04:16:893     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 15:04:16:893    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 15:04:16:893    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 15:04:16:893      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 15:04:16:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 15:04:16:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 15:04:16:893      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:04:16:893 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 15:04:16:893 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 15:04:16:893 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 15:04:16:893  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 15:04:16:893     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 15:04:16:893      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 15:04:16:893 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 15:04:16:893      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 15:04:16:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 15:04:16:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 15:04:16:893      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:04:16:909 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 15:04:16:909 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 15:04:16:909 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 15:04:16:909 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 15:04:16:909 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 15:04:16:909 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 15:04:16:909 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 15:04:16:909 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 15:04:16:909      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 15:04:17:112      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 15:04:17:127 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 15:04:17:127 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:04:17:127 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:04:17:127 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:04:17:127 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:04:17:174 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:04:17:174 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:17:174 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:17:174 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:17:174 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:17:174 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 15:04:17:174 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:17:174 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:17:174 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:17:174 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:17:174      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 15:04:17:331 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:04:17:331      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:04:17:331      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:04:17:331 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:04:17:331 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:04:17:331      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:04:17:331      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:04:17:596      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:04:17:815      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:17:831      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:04:17:831   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:04:17:831   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:04:17:831      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:04:17:831   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:17:831   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:17:846      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:04:17:846      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:04:17:846      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:04:17:846      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:17:846      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:17:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:04:17:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:17:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:04:17:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:04:17:846      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:04:17:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:04:17:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:04:17:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:04:17:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:04:17:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:04:17:862      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:04:17:893      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:04:17:893 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:17:893 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:17:893 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:17:893 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:17:893 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 15:04:17:893      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:04:17:893      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:04:17:893      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:04:17:893      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:17:893      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:04:17:893       Sound.cpp(00148)] :Stop
[11/07 15:04:17:893       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:17:893      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:17:893      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:17:893      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:17:893      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:04:17:893   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:17:893   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:17:893      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:04:17:893      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:17:893      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:04:19:471      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:04:19:471 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:04:19:674 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 15:04:19:690      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:19:690 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 15:04:19:690 TranNmsProc.cpp(00488)] :NmsCashStatus:(0)
[11/07 15:04:19:846 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:04:19:846 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 15:04:19:846 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:04:19:846      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:04:19:846      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:04:19:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:04:19:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:04:19:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:04:19:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:04:19:846 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:04:19:846 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:04:19:901 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 15:04:19:901 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 15:04:19:901 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:19:901 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:19:901 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:19:901 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:19:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:04:19:901      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:19:909      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:04:19:909      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:04:19:916      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:04:19:916      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:04:19:916      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:04:19:916      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:04:19:916      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:04:19:916      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:04:19:924      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:04:20:088 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 15:04:20:088 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 15:04:20:088 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:20:088 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:20:088 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 15:04:20:088   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 15:04:20:088   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 15:04:20:088   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 15:04:20:088   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 15:04:20:088   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 15:04:20:088   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 15:04:20:088      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:20:088      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:04:20:088      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:04:20:088   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:20:088   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:20:088   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 15:04:20:088   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 15:04:20:088      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:20:088      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 15:04:20:088       Sound.cpp(00148)] :Stop
[11/07 15:04:20:088       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:20:088      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:20:088      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:20:088      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:20:088      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:04:20:096   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:20:096   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:20:096      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:20:440      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:20:440      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 15:04:22:010 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 15:04:22:010 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 15:04:22:010      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:04:22:010      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:04:22:026      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:04:22:026      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:04:22:026      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:04:22:026      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:04:22:026      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:04:22:026 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:04:22:026 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:04:22:026 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:22:026 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:22:291      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:04:22:526      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:04:22:526   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:04:22:526   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:04:22:526 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0xffffffff]
[11/07 15:04:22:588     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:04:22:604     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:04:22:604     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:04:22:604     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:04:22:604     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:04:22:604     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:04:22:635     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:04:22:666     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:04:22:666     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:04:22:666 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:04:22:666 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:04:22:666      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:04:22:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:04:22:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:04:22:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 15:04:22:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 15:04:22:666 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:04:22:698      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:04:22:698      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:04:22:698   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:22:698   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:22:713      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 15:04:22:713      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 15:04:22:713      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 15:04:22:807      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:04:22:807 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:04:22:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:04:22:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:04:22:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:04:22:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:04:22:807   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:04:22:807   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:04:22:807 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:04:22:807      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:22:807      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:04:22:838      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:04:22:838   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:22:838   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:22:838   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:04:22:838   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:04:22:838      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:22:838      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:04:22:838       Sound.cpp(00148)] :Stop
[11/07 15:04:22:838       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:22:838      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:22:838      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:22:838      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:22:838      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:04:22:838   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:22:838   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:22:838      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:04:22:838      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:22:846      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:04:24:104 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 15:04:24:104 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 15:04:30:948      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:04:30:948 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 15:04:30:948      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:04:30:948      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:04:30:948 AtmModeCtrl.cpp(01560)] :strMCUErrorCode = [0000000]
[11/07 15:04:30:948 AtmModeCtrl.cpp(01577)] : Main Menu EVENT (MCR OR SCR) => ATM_TRAN
[11/07 15:04:31:104 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:04:31:104 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:04:31:104 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:04:31:104 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:04:31:213 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:04:31:213      DevApl.cpp(01874)] :[TRAN START]
[11/07 15:04:31:213      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 15:04:31:432      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 15:04:31:432      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:31:448 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 15:04:31:463 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 15:04:31:463 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 15:04:31:557      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:04:31:557      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:31:557 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 15:04:31:588      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:04:31:588 TranDevProc.cpp(00526)] :fnAPD_CheckICCardType()
[11/07 15:04:31:604      DevCmn.cpp(01055)] :fstrMCU_GetICData()
[11/07 15:04:31:604      DevCmn.cpp(01060)] :fstrMCU_GetICData():return(3B781800000073C84013009000)
[11/07 15:04:31:604 TranDevProc.cpp(00541)] :fstrMCU_GetICData()=[3B781800000073C84013009000]
[11/07 15:04:31:604      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:04:31:604      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:04:31:604      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:04:31:604      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:04:31:604 TranDevProc.cpp(00554)] :fnAPD_CheckICCardType() return T_EMVCARD_INSERT
[11/07 15:04:31:604 TranDevProc.cpp(00560)] :fnAPD_InitialICCardProcessing()
[11/07 15:04:31:604      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:31:604      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD030.swf)
[11/07 15:04:31:604      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD030.swf)
[11/07 15:04:31:604   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:31:604   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:31:604   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD030.swf])
[11/07 15:04:31:620   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD030.swf]
[11/07 15:04:31:620      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:31:620      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(30)
[11/07 15:04:31:620       Sound.cpp(00148)] :Stop
[11/07 15:04:31:620       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:31:620      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:31:620      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:31:620      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:31:620      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:04:31:620   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:31:620   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:31:620      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:04:32:010      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:04:32:010      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[30], nInputSec[0]):return(0)
[11/07 15:04:32:010      DevCmn.cpp(01402)] :fnEMV_SetKernelType(5)
[11/07 15:04:32:010      DevCmn.cpp(01406)] :EMV_SetTerminalType(EMV_TERMINAL_TYPE_14)
[11/07 15:04:32:026      DevCmn.cpp(01413)] :fnEMV_SetKernelType(.);return(1)
[11/07 15:04:32:026 TranDevProc.cpp(00576)] :fnEMV_SetKernelType(5) = [1]
[11/07 15:04:32:026      DevCmn.cpp(01429)] :fnEMV_SystemInitial()
[11/07 15:04:32:026      DevCmn.cpp(01434)] :fnEMV_SystemInitial(.);return(1)
[11/07 15:04:32:026 TranDevProc.cpp(00585)] :fnEMV_SystemInitial() = [1]
[11/07 15:04:32:026      DevCmn.cpp(01440)] :fnEMV_Sel_BuildCandidateApp()
[11/07 15:04:35:151      DevCmn.cpp(01457)] :fnEMV_Sel_BuildCandidateApp():return(1)
[11/07 15:04:35:151 TranDevProc.cpp(00593)] :fnEMV_Sel_BuildCandidateApp() = [1]
[11/07 15:04:35:151 TranDevProc.cpp(01089)] :fnAPD_EMVSelectAID()
[11/07 15:04:35:151      DevCmn.cpp(01464)] :fnEMV_Sel_GetAppListEx()
[11/07 15:04:35:198      DevCmn.cpp(01471)] :m_pMwiEmv->EMV_Sel_GetAppList(..):return 1
[11/07 15:04:35:198      DevCmn.cpp(01478)] :fnEMV_Sel_GetAppList():return(0001010F4352454449544F204445205649534107A0000000031010)
[11/07 15:04:35:198 TranDevProc.cpp(01099)] :fnEMV_Sel_GetAppListEx() = [0001010F4352454449544F204445205649534107A0000000031010]
[11/07 15:04:35:198 TranDevProc.cpp(01117)] :UserConfirm=[0], Number of AID = [1]
[11/07 15:04:35:198 TranDevProc.cpp(00670)] :fnAPD_EMVUserAIDLoad(nAIDNum=[1], strAID=[010F4352454449544F204445205649534107A0000000031010])
[11/07 15:04:35:198 TranDevProc.cpp(00700)] :AID List : [010F4352454449544F204445205649534107A0000000031010]
[11/07 15:04:35:198 TranDevProc.cpp(00715)] :AID List without 9F11 tag : [0F4352454449544F204445205649534107A0000000031010]
[11/07 15:04:35:198 TranDevProc.cpp(00716)] :Issuer Code Index : [ISO8859_01]
[11/07 15:04:35:198 TranDevProc.cpp(00764)] :Data before PACK : [4300520045004400490054004F0020004400450020005600490053004100]
[11/07 15:04:35:198 TranDevProc.cpp(00768)] :Packed length : [30]
[11/07 15:04:35:198 TranDevProc.cpp(00322)] :fnAPD_WCStoMBS - WCHAR   : [004300520045004400490054004F00200044004500200056004900530041]
[11/07 15:04:35:198 TranDevProc.cpp(00331)] :fnAPD_WCStoMBS - CHAR    : [4352454449544F204445205649534100]
[11/07 15:04:35:198 TranDevProc.cpp(00340)] :fnAPD_WCStoMBS - CString : [4352454449544F2044452056495341]
[11/07 15:04:35:198 TranDevProc.cpp(00786)] :Parsed AID [1], AID=[A0000000031010], DESC=[CREDITO DE VISA], FLAG=[TRUE]
[11/07 15:04:35:198 TranDevProc.cpp(00801)] :Continue = [0], Remain AIDList =[07A0000000031010]
[11/07 15:04:35:198 TranDevProc.cpp(00805)] :Max AID = [1]
[11/07 15:04:35:198 TranDevProc.cpp(01121)] :AID Number = [1], Max AID = [1]
[11/07 15:04:35:198      DevCmn.cpp(01505)] :fnEMV_Sel_FinalAppSelection(0)
[11/07 15:04:35:557      DevCmn.cpp(01510)] :fnEMV_Sel_FinalAppSelection():return(1)
[11/07 15:04:35:557 TranDevProc.cpp(01158)] :fnEMV_Sel_FinalAppSelection(0) = [1]
[11/07 15:04:35:557      DevCmn.cpp(01516)] :fnEMV_InitAppProcess(00, 000000000000, 171107150435, 2)
[11/07 15:04:37:604      DevCmn.cpp(01520)] :fnEMV_InitAppProcess(....):return(1)
[11/07 15:04:37:604 TranDevProc.cpp(01174)] :fnAPL_EmvTranDataMake():m_pDevCmn->fnEMV_InitAppProcess:nResult(1)
[11/07 15:04:37:604 TranDevProc.cpp(01203)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID = [A0000000031010]
[11/07 15:04:37:604 TranDevProc.cpp(01204)] :fnEMV_Sel_FinalAppSelection() SUCCESS [EMV_RSLT_OK], Selected AID Label = [CREDITO DE VISA]
[11/07 15:04:37:604 TranDevProc.cpp(00607)] :fnAPD_EMVSelectAID() = [1]
[11/07 15:04:37:604      DevCmn.cpp(01526)] :fnEMV_ReadAppData()
[11/07 15:04:40:291      DevCmn.cpp(01531)] :fnEMV_ReadAppData():return(1)
[11/07 15:04:40:291 TranDevProc.cpp(00623)] :m_pDevCmn->fnEMV_ReadAppData():nResult(1)
[11/07 15:04:40:291 TranLibProc.cpp(00538)] :CTranCmn::fnAPL_EmvMakeCardPanProc()
[11/07 15:04:40:291      DevCmn.cpp(01563)] :fnEMV_GetVal(91):return(Data Length = [36] )
[11/07 15:04:40:307      DevCmn.cpp(01563)] :fnEMV_GetVal(66):return(Data Length = [0] )
[11/07 15:04:40:307 TranDevProc.cpp(00655)] :fnEMV_GetVal(EMVTid_LangPrefer) = []
[11/07 15:04:40:307      DevCmn.cpp(01421)] :fnEMV_SetConfig(1)
[11/07 15:04:40:307 TranDevProc.cpp(00659)] :fnEMV_SetConfig(EMV_CONFIG_TYPE_ONLINEPIN)
[11/07 15:04:40:307 TranDevProc.cpp(00662)] :fnAPD_InitialICCardProcessing():return OK
[11/07 15:04:40:307 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 15:04:40:338 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 15:04:40:338 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 15:04:40:354 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 15:04:40:354 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:04:40:354   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:04:40:354   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:04:40:354   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:04:40:354   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:04:40:354 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:04:40:354   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 15:04:40:354   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:04:40:354      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:40:354      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:04:40:354      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:04:40:354   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:40:354   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:40:354   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 15:04:40:354   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 15:04:40:354      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:40:354      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 15:04:40:354       Sound.cpp(00148)] :Stop
[11/07 15:04:40:354       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:40:354      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:40:354      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:40:354      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:40:354      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:04:40:354   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:40:370   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:40:370      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:04:40:370      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:40:370      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 15:04:41:604   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/SPANISH]
[11/07 15:04:41:604   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(SPANISH)
[11/07 15:04:41:604      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[SPANISH])
[11/07 15:04:41:604      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:04:41:836      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:04:41:836 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:04:41:837 TranMenuProc.cp(00637)] :GetKeyStr=[SPANISH]
[11/07 15:04:41:837 TranMenuProc.cp(00699)] :Pressed Button ID=[1]
[11/07 15:04:41:837 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:04:41:838   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [SPANISH])
[11/07 15:04:41:838   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/SPANISH]
[11/07 15:04:41:838 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 15:04:41:839 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:04:41:839 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 15:04:41:839 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 15:04:41:839 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 15:04:41:840   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:04:41:840   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:04:41:841   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 15:04:41:841   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 15:04:41:842   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:04:41:842   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:04:41:842   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 15:04:41:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 15:04:41:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:04:41:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:04:41:844   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 15:04:41:844   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 15:04:41:845   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:04:41:845   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:04:41:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:04:41:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:04:41:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:04:41:847   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:04:41:847      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:41:847      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:04:41:848      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:04:41:848   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:41:848   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:41:849   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 15:04:41:849   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 15:04:41:849      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:41:849      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 15:04:41:850       Sound.cpp(00148)] :Stop
[11/07 15:04:41:850       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:41:850      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:41:850      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:41:850      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:41:851      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 15:04:41:851   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:41:851   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:41:852      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 15:04:41:852      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:42:156      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 15:04:43:580   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:04:43:580   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:04:43:581   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:04:43:581   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:43:581   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:04:43:828   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:04:43:829   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:04:43:829   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:04:43:829   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:43:830   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:04:44:065   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:04:44:065   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:04:44:066   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:04:44:066   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:44:066   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:04:44:342   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:04:44:342   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:04:44:343   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:04:44:343   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:44:343   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:04:45:502   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:04:45:502   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:04:45:503   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:04:45:503   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:45:503   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:04:45:536   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 15:04:45:536   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 15:04:45:536      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 15:04:45:537      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:04:45:667      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:04:45:667 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:04:45:668 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 15:04:45:669 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 15:04:45:669 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:04:45:669      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 15:04:45:748 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 15:04:45:748 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 15:04:45:748 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 15:04:45:748 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 15:04:45:749 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:04:45:749   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:04:45:750   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:04:45:750   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:04:45:750   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:04:45:750   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:04:45:750   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:04:45:751   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:04:45:751   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:04:45:752   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:04:45:752   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:04:45:752 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 15:04:45:753   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 15:04:45:753   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 15:04:45:753      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:04:45:754      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:04:45:767      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:04:45:767      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:04:45:768   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:04:45:768   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:04:45:768      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:04:45:768      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:04:45:769      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:04:45:769      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:04:45:769      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 15:04:45:769       Sound.cpp(00148)] :Stop
[11/07 15:04:45:770       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:04:45:770      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:04:45:770      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:04:45:770      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:04:45:770      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:04:45:771   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:04:45:771   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:04:45:772      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:04:45:772      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:04:45:775      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 15:04:59:584   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:04:59:584   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:04:59:584   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:04:59:585   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:59:585   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:04:59:663   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:04:59:663   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:04:59:664   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:04:59:664   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:59:664   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:04:59:849   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:04:59:849   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:04:59:850   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:04:59:850   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:04:59:850   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:00:099   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:00:099   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:00:099   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:00:099   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:00:099   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:00:280   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:00:280   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:00:280   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:00:280   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:00:280   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:01:702   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:01:702   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:01:702   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:01:703   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:01:703   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:01:749   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:01:750   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:01:750   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:01:750   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:01:750   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:01:854   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:01:854   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:01:855   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:01:855   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:01:855   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:02:020   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:02:020   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:02:021   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:02:021   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:02:021   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:02:280   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:02:280   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:02:280   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:02:280   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:02:280   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:02:541   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:02:541   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:02:542   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:02:542   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:02:542   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:02:727   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:02:727   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:02:728   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:02:728   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:02:728   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:02:979   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:02:979   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:02:979   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:02:979   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:02:979   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:03:160   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:03:160   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:03:160   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:03:160   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:03:160   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:03:311   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:03:311   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:03:312   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:03:312   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:03:312   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:03:641   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:03:641   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:03:642   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:03:642   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:03:642   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:03:929   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:03:929   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:03:929   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:03:929   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:03:929   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:059   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:059   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:059   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:059   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:059   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:208   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:208   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:209   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:209   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:209   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:330   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:330   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:331   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:331   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:331   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:459   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:459   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:459   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:459   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:459   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:606   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:606   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:607   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:607   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:607   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:740   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:740   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:740   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:740   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:740   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:849   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:849   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:850   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:850   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:850   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:04:978   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:04:978   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:04:979   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:04:979   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:04:979   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:05:101   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:05:101   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:05:102   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:05:102   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:05:102   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:05:227   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:05:227   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:05:228   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:05:228   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:05:228   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:05:349   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:05:349   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:05:350   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:05:350   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:05:350   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:05:490   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:05:490   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:05:490   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:05:490   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:05:490   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:05:571   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:05:571   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:05:580   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:05:580   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:05:580   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:07:591   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:07:591   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:07:592   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:07:592   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:07:592   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:07:769   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:07:769   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:07:769   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:07:769   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:07:769   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:07:972   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:07:972   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:07:973   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:07:973   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:07:973   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:08:197   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:08:197   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:08:198   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:08:198   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:08:198   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:08:442   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:08:442   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:08:442   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:08:442   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:08:442   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:08:653   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:08:653   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:08:653   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:08:654   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:08:654   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:08:960   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:08:960   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:08:961   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:08:961   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:08:961   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:09:538   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:09:538   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:09:539   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:09:539   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:09:539   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:09:759   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:09:759   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:09:759   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:09:759   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:09:759   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:09:969   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:09:969   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:09:969   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:09:977   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:09:977   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:10:179   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:10:179   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:10:180   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:10:180   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:10:180   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:10:784   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:10:784   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:10:785   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:10:785   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:10:785   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:10:997   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:10:997   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:10:998   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:10:998   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:10:998   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:16:196 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 15:05:16:196 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 15:05:16:196 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 15:05:16:196 TranLibProc.cpp(01063)] :fnAPL_EmvRemoveICCard(nFailReason=[-1], bFallBackTr=[0])
[11/07 15:05:16:196      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(2)
[11/07 15:05:16:196 TranLibProc.cpp(01067)] :fnAPL_EmvRemoveICCard::m_pDevCmn->fnMCU_GetMaterialInfo():nSensor[2]
[11/07 15:05:16:196 TranLibProc.cpp(01111)] :Remove Card - Display Message = [CANCELLED]
[11/07 15:05:16:196 TranLibProc.cpp(01125)] :fnAPL_EmvRemoveICCard Start, Time Out= [120 seconds]
[11/07 15:05:16:196      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:05:16:196   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [CANCELLED])
[11/07 15:05:16:196   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/CANCELLED]
[11/07 15:05:16:196      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:05:16:196      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD027.swf)
[11/07 15:05:16:196      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD027.swf)
[11/07 15:05:16:196   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:05:16:196   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:05:16:196   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD027.swf])
[11/07 15:05:16:196   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD027.swf]
[11/07 15:05:16:196      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:05:16:196      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(27)
[11/07 15:05:16:196       Sound.cpp(00148)] :Stop
[11/07 15:05:16:196       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:05:16:196      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:05:16:196      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:05:16:196      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:05:16:196      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:05:16:196   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:16:196   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:16:196      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:05:16:586      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:05:16:586      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[27], nInputSec[0]):return(0)
[11/07 15:05:16:586 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:05:16:602      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:05:16:602      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:05:16:602   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:16:602   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:16:618      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 15:05:16:618      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 15:05:16:618      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 15:05:16:665      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:05:16:665 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:05:19:446      DevCmn.cpp(00991)] :fnMCU_GetMaterialInfo():return(0)
[11/07 15:05:19:446 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:05:19:458      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:05:19:458   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:19:458   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:19:470      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:05:19:470      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:05:19:472      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:05:19:484      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:19:487 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:05:19:488      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(3)
[11/07 15:05:19:488      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(3), nPlayIndex=(0), nScreenNo=(27)
[11/07 15:05:19:488       Sound.cpp(00148)] :Stop
[11/07 15:05:19:488       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:05:19:489      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:19:492 TranLibProc.cpp(01220)] :Exit Waiting loop... Sensor Status = [0]
[11/07 15:05:19:492 TranLibProc.cpp(01224)] :fnAPL_EmvRemoveICCard return TRUE
[11/07 15:05:19:492 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:05:19:503      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:05:19:503   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:19:504   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:19:516      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:05:19:516      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:05:19:516      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:05:19:528      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:19:531 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:05:19:531 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 15:05:19:531 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:05:19:531      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:05:19:534      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:19:537      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:05:19:541      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:05:19:542      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:05:19:543      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:05:19:544      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:05:19:545      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:05:19:546      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:05:19:547      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:05:19:548      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:05:19:550      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:05:19:550      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:05:19:550      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:05:19:550   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:05:19:551   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:05:19:551   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 15:05:19:551   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 15:05:19:552      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:05:19:552      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 15:05:19:552       Sound.cpp(00148)] :Stop
[11/07 15:05:19:552       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:05:19:553      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:05:19:553      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:05:19:553      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:05:19:553      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:05:19:554   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:19:554   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:19:555      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:05:19:555      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:05:19:555      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 15:05:23:377 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 15:05:23:377 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 15:05:23:377 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 15:05:23:377 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:05:23:377 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:05:23:377 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:05:23:377 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 15:05:23:377 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 15:05:23:377 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:05:23:424 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:05:23:424 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 15:05:23:627   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:05:23:627   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:05:23:627      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:05:23:627 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 15:05:23:627 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 15:05:23:627 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:05:23:627 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:05:23:627 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:05:23:627 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:05:23:674      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:05:23:690 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 15:05:23:846 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:05:23:846 AtmModeCtrl.cpp(01282)] :GetMemorySize[17563648]
[11/07 15:05:23:846 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:05:23:846      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:05:23:846      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:05:23:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:05:23:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:05:23:846   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:05:23:846   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:05:23:846 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:05:23:846 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:05:23:862      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:05:23:862      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:05:23:877      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:05:23:877      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:05:23:877      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:05:23:877      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:05:23:877      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:05:23:877 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:05:23:877 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:05:23:877 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:05:23:877 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:05:24:127      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:05:24:377      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:05:24:377      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:05:24:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:05:24:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:05:24:377 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 15:05:24:440     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:05:24:440     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:05:24:440     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:05:24:440     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:05:24:440     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:05:24:440     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:05:24:549     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:05:24:565     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:05:24:565     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:05:24:565 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:05:24:565 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:05:24:565      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:05:24:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:05:24:565   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:05:24:565   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 15:05:24:581   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 15:05:24:581 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:05:24:596      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:05:24:596      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:05:24:596   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:24:596   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:24:612      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 15:05:24:612      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 15:05:24:612      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 15:05:24:690      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:05:24:690 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:05:24:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:05:24:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:05:24:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:05:24:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:05:24:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:05:24:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:05:24:690 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:05:24:690      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:05:24:690      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:05:24:690      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:05:24:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:05:24:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:05:24:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:05:24:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:05:24:690      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:05:24:690      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:05:24:690       Sound.cpp(00148)] :Stop
[11/07 15:05:24:690       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:05:24:690      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:05:24:690      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:05:24:690      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:05:24:690      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:05:24:690   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:24:690   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:24:690      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:24:690      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:24:690      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:05:25:160   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:05:25:160   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:05:25:160   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:05:25:161   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:25:161   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:05:25:339   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:05:25:339   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:05:25:339   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:05:25:339   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:25:339   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:05:25:481   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:05:25:481   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:05:25:490   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:05:25:490   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:25:490   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:05:25:788 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 15:05:25:919   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 15:05:25:919   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 15:05:25:919   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 15:05:25:919   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:25:919   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 15:05:26:208   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:26:208   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:26:209   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:26:209   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:26:209   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:26:390   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 15:05:26:390   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:26:390   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 15:05:26:391   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 15:05:26:391   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 15:05:26:701   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 15:05:26:701   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:26:702   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 15:05:26:702   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 15:05:26:702   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 15:05:26:799   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 15:05:26:799   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:26:799   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 15:05:26:799   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 15:05:27:560      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 15:05:27:582      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:05:27:587 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 15:05:27:814      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:05:28:033      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:05:28:033      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:05:28:048   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:05:28:048   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:05:28:048      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:05:28:048   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:28:048   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:28:064      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:05:28:064      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:05:28:064      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:05:28:064      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:05:28:439      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:05:28:439      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:05:28:439      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:28:439      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:05:28:439      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:05:28:439      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:05:28:439      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:05:28:455      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:05:28:455      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:05:28:455      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:05:28:455      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:05:28:455      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:05:29:173      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:05:29:173 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:05:29:189      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:05:29:189   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:29:189   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:29:205      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:05:29:205      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:05:29:205      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:05:29:220      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:29:220 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:05:29:376 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:05:29:376 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:05:29:376      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:05:29:376      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:05:29:376 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:05:29:611      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:05:29:923      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:05:29:923   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:05:29:923   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:05:29:923      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:05:29:923   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:29:923   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:29:939      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:05:29:939      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:05:29:939      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:05:29:939      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:05:29:939      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:05:29:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:05:29:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:05:29:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:05:29:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:05:29:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:05:29:955      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:05:29:955      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:05:29:955      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:05:29:955      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:05:29:955      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:05:29:955      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:05:29:986      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 15:05:29:986      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:05:29:986      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:05:29:986      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:05:29:986      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:05:29:986      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:05:29:986       Sound.cpp(00148)] :Stop
[11/07 15:05:29:986       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:05:29:986      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:05:29:986      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:05:29:986      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:05:29:986      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:05:29:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:29:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:29:986      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:05:29:986      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:05:29:986      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:05:29:986      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:05:30:017 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 15:05:30:017      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:05:30:048      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0064]
[11/07 15:05:30:048      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 15:05:30:048      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 15:05:30:048       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:05:30:048       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:05:30:048       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:05:30:048       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0064']
[11/07 15:05:30:095       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:05:30:095       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:05:30:095       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:05:30:095       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:05:30:095       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:05:30:095       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:05:30:095       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:05:30:095       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:05:30:095       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 15:05:30 EJ NUMBER = 0064 ] |15:05:30 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:05:30:095       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0064','11','07','2017','15','05','30','Change into operator mode<START_EJRNL>[ 11/07/2017 15:05:30 EJ NUMBER = 0064 ] |15:05:30 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 15:05:30:142       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:05:30:142       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:05:30:142       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:05:30:142       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:05:30:142       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:05:30:142       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:05:30:142       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:05:30:142       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[64]
[11/07 15:05:30:142       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [64]
[11/07 15:05:30:142       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[63], m_bRecordCountFinal=[1]
[11/07 15:05:30:189       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [64]
[11/07 15:05:30:189      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 15:05:30 EJ NUMBER = 0064 ] |15:05:30 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:05:30:189      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 15:05:30 EJ NUMBER = 0064 ] |15:05:30 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:05:30:189      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:05:30:189      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:05:30:205      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:05:30:220     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:05:30:220     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:05:30:267 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:05:30:267 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:05:30:267 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:05:30:376 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:05:31:283 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:31:283      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:31:283   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:31:283   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:31:283      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:31:283      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:31:737   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:31:737   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:31:737   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:31:738   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:31:738   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:31:848   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:31:848   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:31:849   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:31:849   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:31:849   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:31:984   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:31:984   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:31:985   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:31:985   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:31:985   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:32:131   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:32:132   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:32:132   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:32:132   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:32:132   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:32:225   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:32:225   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:32:226   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:32:226   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:32:226   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:32:360   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:32:360   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:32:360   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:32:360   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:32:360   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:32:478   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:32:478   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:32:479   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:32:479   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:32:479   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:32:595   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:32:595   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:32:596   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:32:596   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:32:596   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:32:911   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:05:32:911   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:05:32:911   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:05:32:911   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:32:911   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:05:33:433 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:05:33:433      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:05:33:433   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:33:434   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:33:435      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:33:435      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:39:939   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:05:39:939   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:05:39:939   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:05:39:939   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:05:39:940   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:05:40:339   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:05:40:339   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:05:40:339   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:05:40:339   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:40:339   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:05:40:777 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:40:778      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:40:778   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:40:778   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:40:780      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:40:780      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:42:103 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:05:42:103      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:05:42:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:42:104   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:42:105      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:42:105      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:45:008 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:45:009      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:45:009   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:45:009   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:45:010      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:45:011      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:47:144 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:47:144      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:47:145   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:47:145   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:47:146      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:47:146      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:48:133   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:48:133   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:48:134   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:48:134   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:48:134   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:48:519 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:48:519      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:48:520   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:48:520   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:48:521      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:48:521      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:49:372 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:49:372      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:49:372   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:49:373   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:49:374      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:49:374      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:50:123   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:50:123   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:50:124   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:50:124   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:50:124   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:50:560 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:50:560      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:50:561   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:50:561   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:50:562      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:50:562      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:51:309 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:51:309      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:51:310   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:51:310   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:51:311      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:51:311      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:52:125   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:52:125   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:52:125   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:52:125   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:52:125   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:52:541 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:52:542      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:52:542   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:52:542   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:52:544      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:52:544      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:53:668 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:05:53:668      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:05:53:669   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:53:669   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:53:670      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:53:670      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:54:292   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:54:292   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:54:293   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:54:293   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:54:293   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:54:678 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:54:678      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:54:679   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:54:679   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:54:680      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:54:680      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:55:672 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:55:672      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:55:673   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:55:673   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:55:674      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:55:674      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:56:405   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:56:406   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:56:406   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:56:406   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:56:406   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:56:814 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:05:56:815      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:05:56:815   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:56:815   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:56:816      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:56:817      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:57:956   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:05:57:956   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:05:57:957   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:05:57:957   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:05:57:957   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:05:58:346 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:05:58:346      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:05:58:347   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:58:347   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:58:348      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:58:348      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:05:59:481 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:05:59:481      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:05:59:482   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:05:59:482   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:05:59:483      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:05:59:483      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:08:786 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:08:786      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:08:787   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:08:787   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:08:788      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:08:788      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:23:822   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:06:23:822   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:06:23:823   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:06:23:823   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:06:23:823   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:06:24:342 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:24:342      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:24:343   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:24:343   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:24:344      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:24:344      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:26:521   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:06:26:521   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:06:26:522   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:06:26:522   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:06:26:522   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:06:26:985 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:06:26:985      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:06:26:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:26:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:26:987      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:26:987      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:29:287 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:06:29:287      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:06:29:288   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:29:288   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:29:289      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:29:289      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:32:864   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:06:32:864   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:06:32:865   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:06:32:865   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:06:32:865   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:06:33:187 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:06:33:188      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:06:33:188   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:33:188   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:33:189      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:33:190      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:41:575 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:41:575      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:41:576   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:41:576   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:41:577      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:41:577      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:43:710 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:43:710      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:43:711   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:43:711   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:43:712      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:43:712      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:44:848   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:06:44:848   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:06:44:849   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:06:44:849   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:06:44:849   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:06:45:208 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:45:208      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:45:208   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:45:208   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:45:209      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:45:209      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:45:947 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:45:947      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:45:947   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:45:948   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:45:949      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:45:949      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:46:576 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:46:576      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:46:577   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:46:577   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:46:578      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:46:578      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:49:187   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:06:49:188   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:06:49:188   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:06:49:188   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:06:49:188   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:06:49:623 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:49:623      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:49:624   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:49:624   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:49:625      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:49:625      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:51:014 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:51:014      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:51:014   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:51:015   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:51:016      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:51:016      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:06:54:915   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:06:54:915   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:06:54:916   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:06:54:916   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:06:54:916   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:06:55:376 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:06:55:376      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:06:55:377   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:06:55:377   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:06:55:378      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:06:55:378      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:01:387   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:01:387   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:01:388   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:01:388   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:01:388   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:01:721 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:01:721      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:01:722   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:01:722   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:01:723      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:01:723      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:03:434 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:03:434      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:03:435   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:03:435   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:03:436      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:03:437      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:09:652   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:09:652   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:09:653   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:09:653   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:09:653   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:10:053 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:10:053      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:10:054   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:10:054   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:10:055      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:10:055      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:12:349   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:12:349   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:12:350   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:12:350   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:12:350   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:12:662 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:07:12:662      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:07:12:663   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:12:663   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:12:664      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:12:664      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:15:295     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:15:295     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:15:387 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:15:388      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:15:388   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:15:388   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:15:390      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:15:390      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:15:882     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:15:882     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:15:997     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:15:997     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:111     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:111     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:225     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:225     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:339     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:339     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:454     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:454     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:568     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:568     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:682     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:682     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:796     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:796     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:16:911     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:16:911     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:029     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:029     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:145     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:145     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:263     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:263     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:379     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:379     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:498     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:498     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:614     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:614     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:730     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:730     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:848     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:848     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:17:963     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:17:963     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:18:078     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:18:078     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:18:156   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:18:157   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:18:157   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:18:157   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:18:157   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:18:192     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:18:192     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:18:307     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:07:18:307     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:07:18:571 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:07:18:571      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:07:18:572   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:18:572   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:18:573      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:18:574      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:20:939 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:20:939      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:20:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:20:940   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:20:941      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:20:941      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:23:208 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:23:208      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:23:208   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:23:208   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:23:209      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:23:209      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:26:291   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:26:291   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:26:291   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:26:291   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:26:291   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:26:668 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:26:669      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:26:669   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:26:669   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:26:670      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:26:671      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:27:542 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:27:542      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:27:542   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:27:543   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:27:544      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:27:544      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:28:504   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:28:504   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:28:505   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:28:505   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:28:505   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:29:002 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:29:003      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:29:003   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:29:004   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:29:005      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:29:005      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:29:757 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:29:757      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:29:757   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:29:758   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:29:759      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:29:759      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:30:896   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:30:896   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:30:897   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:30:897   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:30:897   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:31:386 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:31:387      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:31:387   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:31:387   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:31:388      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:31:389      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:33:109 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:07:33:109      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:07:33:110   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:33:110   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:33:111      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:33:111      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:34:103   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:34:103   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:34:104   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:34:104   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:34:104   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:34:475 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:34:475      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:34:476   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:34:476   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:34:477      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:34:477      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:34:992   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:34:992   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:34:993   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:34:993   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:34:993   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:35:352 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:07:35:352      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:07:35:353   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:35:353   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:35:354      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:35:354      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:37:157 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:37:158      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:37:158   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:37:158   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:37:159      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:37:160      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:39:283   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:39:283   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:39:284   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:39:284   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:39:284   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:39:682 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:07:39:682      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:07:39:683   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:39:683   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:39:684      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:39:684      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:41:932 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:41:932      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:41:933   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:41:933   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:41:934      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:41:934      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:43:193   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:43:193   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:43:194   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:43:194   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:43:194   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:43:714 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:07:43:714      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:07:43:714   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:43:715   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:43:716      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:43:716      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:44:912   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:44:912   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:44:913   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:44:913   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:44:913   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:45:395 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:45:395      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:45:395   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:45:396   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:45:397      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:45:397      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:46:468   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:46:468   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:46:469   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:46:469   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:46:469   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:46:909 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:07:46:909      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:07:46:909   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:46:910   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:46:911      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:46:911      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:47:827   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:07:47:827   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:07:47:828   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:07:47:828   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:07:47:828   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:07:48:290   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:07:48:290   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:07:48:291   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:07:48:291   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:48:291   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:07:48:666 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:48:666      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:48:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:48:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:48:667      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:48:667      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:49:410 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:49:411      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:49:411   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:49:411   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:49:413      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:49:413      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:53:334 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:53:335      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:53:335   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:53:335   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:53:336      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:53:337      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:53:919   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:53:919   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:53:920   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:53:920   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:53:920   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:54:344 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:54:344      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:54:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:54:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:54:346      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:54:346      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:55:065 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:55:065      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:55:065   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:55:066   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:55:067      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:55:067      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:56:081   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:56:081   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:56:082   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:56:082   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:56:082   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:56:613 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:56:613      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:56:614   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:56:614   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:56:615      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:56:615      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:07:57:217   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:07:57:217   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:07:57:218   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:07:57:218   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:07:57:218   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:07:57:639 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:07:57:639      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:07:57:640   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:07:57:640   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:07:57:641      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:07:57:641      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:02:183   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:08:02:183   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:08:02:184   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:08:02:184   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:02:184   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:08:02:565 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:08:02:566      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:08:02:566   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:02:566   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:02:567      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:02:568      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:20:807   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[8])
[11/07 15:08:20:807   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:08:20:808   WinAtmCtl.cpp(00891)] :strDataValue[8])
[11/07 15:08:20:808   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[8])
[11/07 15:08:20:808   WinAtmCtl.cpp(00935)] :VirtualKeyCode[38])
[11/07 15:08:21:915   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:08:21:915   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:08:21:916   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:08:21:916   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:21:916   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:08:22:457 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:08:22:457      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:08:22:458   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:22:458   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:22:458      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:22:458      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:23:842   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:08:23:842   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:08:23:843   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:08:23:843   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:23:843   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:08:24:242 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:08:24:242      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:08:24:242   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:24:243   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:24:244      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:24:244      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:25:095   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:08:25:095   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:08:25:096   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:08:25:096   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:08:25:096   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:08:26:087   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:08:26:087   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:08:26:087   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:08:26:087   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:26:088   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:08:26:518 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:08:26:519      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:08:26:519   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:26:519   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:26:521      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:26:521      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:28:333 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:08:28:333      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:08:28:333   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:28:333   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:28:334      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:28:335      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:34:991   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:08:34:991   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:08:34:992   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:08:34:992   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:34:992   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:08:35:452 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:08:35:452      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:08:35:453   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:35:453   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:35:454      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:35:454      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:38:027 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:08:38:027      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:08:38:028   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:38:028   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:38:029      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:38:029      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:41:377   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:08:41:377   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:08:41:378   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:08:41:378   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:41:378   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:08:41:529 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_LOGRCOPY||20171107]
[11/07 15:08:41:529      DevCmn.cpp(06380)] :fstrCMN_GetDestnationDrive()
[11/07 15:08:41:529      DevCmn.cpp(06386)] :fstrCMN_GetDestnationDrive(...): Removal Drive = (USBDRIVE|F:\)
[11/07 15:08:41:530 AtmClerkCtrl.cp(03143)] :strFile=[D:\TRACE\9030171107.zip]
[11/07 15:08:41:530      DevCmn.cpp(06677)] :fnCMN_RCopy(szFileName[D:\TRACE\9030171107.zip]),szDate[20171107], szEJorLog[LOG], szDest[F:\], nFileSize[10000000]
[11/07 15:08:41:530      DevCmn.cpp(06692)] :fnCMN_RCopy(nReturn[1])
[11/07 15:08:41:576      DevCmn.cpp(06703)] :fnCMN_RCopy(strZipFileName[D:\TRACE\LOG07.txt])
[11/07 15:08:41:584      DevCmn.cpp(06709)] :fnCMN_RCopy(strZipFileName[D:\TRACE\Mwi07.txt])
[11/07 15:08:41:587      DevCmn.cpp(06715)] :fnCMN_RCopy(strZipFileName[D:\TRACE\MwiOp07.txt])
[11/07 15:08:41:597      DevCmn.cpp(06721)] :fnCMN_RCopy(strZipFileName[D:\TRACE\Rear07.txt])
[11/07 15:08:41:599      DevCmn.cpp(06727)] :fnCMN_RCopy(strZipFileName[D:\TRACE\RMSLog07.txt])
[11/07 15:08:41:608      DevCmn.cpp(06733)] :fnCMN_RCopy(strZipFileName[D:\TRACE\RMSTrace07_#1.txt])
[11/07 15:08:41:608      DevCmn.cpp(06737)] :BSTrace Log
[11/07 15:08:41:609      DevCmn.cpp(06741)] :strTempFileName:[D:\TRACE\BSCopy07.nwlog]
[11/07 15:08:41:625      DevCmn.cpp(06750)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 15:08:41:916      DevCmn.cpp(06755)] :fnCMN_RCopy(strZipFileName[D:\TRACE\RMSTrace07_#1.txt], nReturn[1])
[11/07 15:08:41:917      DevCmn.cpp(06783)] :fnCMN_RCopy(ZipFuncClose)
[11/07 15:08:41:917      DevCmn.cpp(06803)] :fnCMN_RCopy(src=[D:\TRACE\9030171107.zip],dst=[F:\LOG_9030171107.zip])
[11/07 15:08:54:683      DevCmn.cpp(06811)] :fnCMN_RCopy(...):return(1)
[11/07 15:08:54:871      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:08:54:871      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:08:54:902     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:08:54:902     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:08:54:949 AtmClerkCtrl.cp(00141)] :ClerkProc:strOpResult[NORMAL||OPERATION SUCCESSFUL!]
[11/07 15:08:55:339 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:08:55:339      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:08:55:339   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:55:339   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:55:339      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:55:339      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:57:793   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:08:57:793   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:08:57:794   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:08:57:794   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:57:794   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:08:58:179 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:08:58:180      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:08:58:180   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:08:58:180   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:08:58:182      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:08:58:182      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:08:59:795   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:08:59:795   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:08:59:796   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:08:59:796   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:08:59:796   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:09:00:208 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:09:00:209      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:09:00:209   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:00:209   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:00:211      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:00:211      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:03:217   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:09:03:217   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:03:218   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:09:03:218   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:09:03:218   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:09:03:597   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:09:03:597   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:09:03:598   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:09:03:598   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:03:598   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:09:03:974 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:09:03:974      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:09:03:974   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:03:974   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:03:976      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:03:976      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:04:586 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_EJRCOPY]
[11/07 15:09:04:586      DevCmn.cpp(06380)] :fstrCMN_GetDestnationDrive()
[11/07 15:09:04:586      DevCmn.cpp(06386)] :fstrCMN_GetDestnationDrive(...): Removal Drive = (USBDRIVE|F:\)
[11/07 15:09:04:587 AtmClerkCtrl.cp(03191)] :strFile=[D:\EJR\MDB\EJ9030171107.zip]
[11/07 15:09:04:587      DevCmn.cpp(06677)] :fnCMN_RCopy(szFileName[D:\EJR\MDB\EJ9030171107.zip]),szDate[20171107], szEJorLog[EJ], szDest[F:\], nFileSize[10000000]
[11/07 15:09:04:587      DevCmn.cpp(06692)] :fnCMN_RCopy(nReturn[1])
[11/07 15:09:04:588      DevCmn.cpp(06763)] :fnCMN_RCopy(strZipFileName[D:\INI\ErrorTrans.ini])
[11/07 15:09:04:589      DevCmn.cpp(06768)] :fnCMN_RCopy(strZipFileName[D:\INI\ErrStack.ini])
[11/07 15:09:04:596      DevCmn.cpp(06775)] :fnCMN_RCopy(strZipFileName[D:\EJR\MDB\EJ.mdb])
[11/07 15:09:04:596      DevCmn.cpp(06783)] :fnCMN_RCopy(ZipFuncClose)
[11/07 15:09:04:596      DevCmn.cpp(06803)] :fnCMN_RCopy(src=[D:\EJR\MDB\EJ9030171107.zip],dst=[F:\EJ_9030171107.zip])
[11/07 15:09:11:165      DevCmn.cpp(06811)] :fnCMN_RCopy(...):return(1)
[11/07 15:09:11:299      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:09:11:310      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:09:11:329     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:09:11:329     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:09:11:378 AtmClerkCtrl.cp(00141)] :ClerkProc:strOpResult[NORMAL||OPERATION SUCCESSFUL!]
[11/07 15:09:11:649 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:09:11:649      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:09:11:649   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:11:650   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:11:651      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:11:651      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:16:880   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:09:16:880   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:09:16:880   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:09:16:881   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:16:881   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:09:17:352 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:09:17:352      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:09:17:353   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:17:353   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:17:354      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:17:354      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:23:917   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[4])
[11/07 15:09:23:917   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:23:918   WinAtmCtl.cpp(00891)] :strDataValue[4])
[11/07 15:09:23:918   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[4])
[11/07 15:09:23:918   WinAtmCtl.cpp(00935)] :VirtualKeyCode[34])
[11/07 15:09:24:175   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:09:24:175   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:09:24:176   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:09:24:176   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:24:176   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:09:24:695 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:09:24:695      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:09:24:695   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:24:696   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:24:697      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:24:697      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:26:075   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:09:26:075   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:09:26:076   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:09:26:076   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:26:076   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:09:26:590 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:09:26:590      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:09:26:591   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:26:591   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:26:592      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:26:592      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:27:762   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[6])
[11/07 15:09:27:762   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:27:763   WinAtmCtl.cpp(00891)] :strDataValue[6])
[11/07 15:09:27:763   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[6])
[11/07 15:09:27:763   WinAtmCtl.cpp(00935)] :VirtualKeyCode[36])
[11/07 15:09:28:268   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:09:28:268   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:09:28:269   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:09:28:269   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:28:269   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:09:28:681 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:09:28:681      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:09:28:681   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:28:682   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:28:683      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:28:683      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:29:797   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:09:29:797   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:09:29:797   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:09:29:797   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:29:798   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:09:30:214 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:09:30:215      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:09:30:215   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:30:215   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:30:216      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:30:217      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:32:596   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[4])
[11/07 15:09:32:596   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:32:596   WinAtmCtl.cpp(00891)] :strDataValue[4])
[11/07 15:09:32:596   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[4])
[11/07 15:09:32:597   WinAtmCtl.cpp(00935)] :VirtualKeyCode[34])
[11/07 15:09:32:820   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[4])
[11/07 15:09:32:820   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:32:820   WinAtmCtl.cpp(00891)] :strDataValue[4])
[11/07 15:09:32:820   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[4])
[11/07 15:09:32:820   WinAtmCtl.cpp(00935)] :VirtualKeyCode[34])
[11/07 15:09:33:135   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:09:33:135   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:09:33:135   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:09:33:135   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:33:135   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:09:33:408 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_RESET]
[11/07 15:09:33:408      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:09:33:423      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0065]
[11/07 15:09:33:423      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SE]
[11/07 15:09:33:423      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SE]
[11/07 15:09:33:423       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:09:33:423       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:09:33:423       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:09:33:428       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0065']
[11/07 15:09:33:462       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:09:33:462       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:09:33:463       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:09:33:467       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:09:33:467       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:09:33:468       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:09:33:469       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:09:33:469       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:09:33:469       DevDB.cpp(01106)] :pEJnl->Data [Reset device:[3d00000]<START_EJRNL>[ 11/07/2017 15:09:33 EJ NUMBER = 0065 ] |15:09:33 [RESET]<END_EJRNL>]
[11/07 15:09:33:469       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0104','SE','0065','11','07','2017','15','09','33','Reset device:[3d00000]<START_EJRNL>[ 11/07/2017 15:09:33 EJ NUMBER = 0065 ] |15:09:33 [RESET]<END_EJRNL>')]
[11/07 15:09:33:503       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:09:33:503       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:09:33:504       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:09:33:504       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:09:33:509       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:09:33:509       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:09:33:509       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:09:33:510       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[65]
[11/07 15:09:33:510       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [65]
[11/07 15:09:33:510       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[64], m_bRecordCountFinal=[1]
[11/07 15:09:33:543       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [65]
[11/07 15:09:33:544      DevApl.cpp(06310)] :TempEjrMdb.Data=[Reset device:[3d00000]<START_EJRNL>[ 11/07/2017 15:09:33 EJ NUMBER = 0065 ] |15:09:33 [RESET]<END_EJRNL>]
[11/07 15:09:33:544      DevApl.cpp(06316)] :strTempArray0=[Reset device:[3d00000]] / strTempArray1=[[ 11/07/2017 15:09:33 EJ NUMBER = 0065 ] |15:09:33 [RESET]<END_EJRNL>]
[11/07 15:09:33:544      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:09:33:544      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 15:09:33:592      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[3d00000]) DeviceTran[40]
[11/07 15:09:33:592      DevCmn.cpp(00672)] :fstrSPR_GetRetractCnt():return(0)
[11/07 15:09:33:593      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[0])
[11/07 15:09:33:593      DevApl.cpp(02652)] :[INITIALIZE] : 0,0
[11/07 15:09:33:593      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 15:09:33:594      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:09:33:596      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:09:33:600      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:09:33:607      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:09:33:608      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:09:33:610      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:09:33:611      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:09:33:612      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:09:33:613      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:09:33:614      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:09:33:616      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:09:33:619      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[0]
[11/07 15:09:36:556      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(0)=[0])
[11/07 15:09:36:556      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:09:36:728      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:09:36:744      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:09:36:775     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:09:36:775     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:09:36:806 AtmClerkCtrl.cp(00141)] :ClerkProc:strOpResult[NORMAL||OPERATION SUCCESSFUL!]
[11/07 15:09:37:119 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:09:37:119      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:09:37:120   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:37:120   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:37:121      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:37:121      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:39:666   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[6])
[11/07 15:09:39:666   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:39:667   WinAtmCtl.cpp(00891)] :strDataValue[6])
[11/07 15:09:39:667   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[6])
[11/07 15:09:39:667   WinAtmCtl.cpp(00935)] :VirtualKeyCode[36])
[11/07 15:09:39:895   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:09:39:895   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:39:896   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:09:39:896   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:09:39:896   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:09:40:837   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 15:09:40:837   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 15:09:40:837   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 15:09:40:837   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:40:837   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 15:09:41:040   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 15:09:41:040   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 15:09:41:040   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 15:09:41:040   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:41:040   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 15:09:41:581   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:09:41:582   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:41:582   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:09:41:582   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:09:41:582   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:09:41:740   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:09:41:740   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:09:41:740   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:09:41:740   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:09:41:740   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:09:42:049   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:09:42:049   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:09:42:049   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:09:42:049   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:09:42:049   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:09:42:243 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||1]
[11/07 15:09:42:243      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:09:42:244   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:42:244   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:42:245      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:09:42:562      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:09:42:695 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_RUN]
[11/07 15:09:43:242      DevCmn.cpp(05394)] :fnSNS_ClearOperatorSwitch()
[11/07 15:09:43:242      DevCmn.cpp(05401)] :fnSNS_ClearOperatorSwitch():return(0)
[11/07 15:09:43:242      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 15:09:43:320 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:09:43:320 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:09:43:320 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:09:43:429 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:09:43:429      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 15:09:43:429      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:09:43:460 AtmClerkCtrl.cp(00514)] :EMV Enabled.. Set Kernel Version [5]
[11/07 15:09:44:242 AtmClerkCtrl.cp(00525)] :OP_RUN ClerkProc:strOpResult[NORMAL||]
[11/07 15:09:44:398 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:09:44:398 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:09:44:398      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:09:44:398      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:09:44:398 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:09:44:617      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:09:44:835      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:09:44:835   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:09:44:835   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:09:44:835      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:09:44:835   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:44:835   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:44:851      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:09:44:851      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:09:44:851      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:09:44:851      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:09:44:851      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:09:44:851      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:09:44:851      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:09:44:851      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:09:44:851      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:09:44:851      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:09:44:867      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:09:44:867      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:09:44:867      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:09:44:867      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:09:44:867      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:09:44:867      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:09:44:898      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:09:44:898      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:09:44:929      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:09:44:945      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0066]
[11/07 15:09:44:945      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 15:09:44:945      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 15:09:44:945       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:09:44:945       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:09:44:945       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:09:44:945       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0066']
[11/07 15:09:44:992       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:09:44:992       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:09:44:992       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:09:44:992       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:09:44:992       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:09:44:992       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:09:44:992       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:09:44:992       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:09:44:992       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 15:09:44 EJ NUMBER = 0066 ] |15:09:44 [SERVICE MODE]<END_EJRNL>]
[11/07 15:09:44:992       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0066','11','07','2017','15','09','44','Change into service mode<START_EJRNL>[ 11/07/2017 15:09:44 EJ NUMBER = 0066 ] |15:09:44 [SERVICE MODE]<END_EJRNL>')]
[11/07 15:09:45:039       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:09:45:039       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:09:45:039       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:09:45:039       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:09:45:039       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:09:45:039       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:09:45:039       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:09:45:039       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[66]
[11/07 15:09:45:039       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [66]
[11/07 15:09:45:039       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[65], m_bRecordCountFinal=[1]
[11/07 15:09:45:085       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [66]
[11/07 15:09:45:085      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 15:09:44 EJ NUMBER = 0066 ] |15:09:44 [SERVICE MODE]<END_EJRNL>]
[11/07 15:09:45:085      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 15:09:44 EJ NUMBER = 0066 ] |15:09:44 [SERVICE MODE]<END_EJRNL>]
[11/07 15:09:45:085      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:09:45:101      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:09:45:257 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:09:45:257      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:09:45:257      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:09:45:257 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:09:45:257 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:09:45:257      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:09:45:257      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:09:45:460      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:09:45:773      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:09:45:773   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:09:45:773   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:09:45:773      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:09:45:773   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:45:773   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:45:789      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:09:45:789      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:09:45:789      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:09:45:789      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:09:45:789      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:09:45:789      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:09:45:789      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:09:45:796      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:09:45:804      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:09:45:804      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:09:45:804      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:09:45:804      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:09:45:804      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:09:45:812      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:09:45:812      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:09:45:812      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:09:45:835      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:09:45:835 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:09:45:835 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:09:45:835 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:09:45:835 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:09:45:835 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 15:09:45:843      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:09:45:843      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:09:45:843      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:09:45:843      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:09:45:843      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:09:45:843       Sound.cpp(00148)] :Stop
[11/07 15:09:45:843       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:09:45:843      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:09:45:843      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:09:45:843      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:09:45:843      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:09:45:843   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:45:843   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:45:851      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:45:851      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:45:851      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:09:47:414      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:09:47:414 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:09:47:625 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 15:09:47:656      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:09:47:812 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:09:47:812 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 15:09:47:812 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:09:47:812      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:09:47:812      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:09:47:812   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:09:47:812   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:09:47:812   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:09:47:812   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:09:47:812 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:09:47:812 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:09:47:843      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:09:47:843      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:09:47:859      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:09:47:859      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:09:47:859      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:09:47:859      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:09:47:867      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:09:47:867 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:09:47:867 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:09:47:867 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:09:47:867 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:09:48:109      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:09:48:367      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:09:48:367   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:09:48:367   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:09:48:367 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 15:09:48:429     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:09:48:429     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:09:48:429     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:09:48:429     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:09:48:429     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:09:48:429     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:09:48:468     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:09:48:531     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:09:48:531     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:09:48:531 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:09:48:531 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:09:48:531      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:09:48:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:09:48:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:09:48:539   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [EMV])
[11/07 15:09:48:539   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/EMV]
[11/07 15:09:48:539 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:09:48:562      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:09:48:562      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:09:48:562   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:48:562   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:48:578      DevApl.cpp(05787)] :EMV Enabled and EMV CARD is USED => Chip IO
[11/07 15:09:48:578      DevCmn.cpp(01122)] :fnMCU_ICEntryEnable(nWaitSec[-1])
[11/07 15:09:48:578      DevCmn.cpp(01130)] :fnMCU_ICEntryEnable(...):return(0)
[11/07 15:09:48:671      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:09:48:671 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:09:48:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:09:48:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:09:48:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:09:48:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:09:48:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:09:48:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:09:48:671 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:09:48:671      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:09:48:671      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:09:48:671      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:09:48:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:09:48:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:09:48:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:09:48:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:09:48:671      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:09:48:671      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:09:48:671       Sound.cpp(00148)] :Stop
[11/07 15:09:48:671       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:09:48:671      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:09:48:671      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:09:48:671      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:09:48:671      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:09:48:671   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:09:48:671   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:09:48:671      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:09:48:671      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:09:49:062      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:19:01:453   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:19:01:453   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:19:01:453   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:19:01:453   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:01:453   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:19:01:791   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 15:19:01:799   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 15:19:01:799   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 15:19:01:799   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:01:799   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 15:19:02:099   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:19:02:099   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:19:02:099   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:19:02:100   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:02:100   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:19:02:375   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 15:19:02:375   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:02:376   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 15:19:02:376   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 15:19:02:376   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 15:19:02:708   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 15:19:02:708   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:02:708   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 15:19:02:708   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 15:19:02:708   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 15:19:03:000   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 15:19:03:000   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:03:000   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 15:19:03:000   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 15:19:03:161      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 15:19:03:176      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:03:182 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 15:19:03:404      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:19:03:715      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:03:721      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:03:722   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:19:03:722   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:19:03:722      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:19:03:723   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:03:723   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:03:735      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:19:03:735      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:19:03:736      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:19:03:736      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:19:04:077      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:19:04:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:19:04:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:19:04:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:19:04:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:19:04:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:19:04:077      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:19:04:092      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:19:04:092      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:19:04:092      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:19:04:092      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:19:04:092      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:19:04:795      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:04:795 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:19:04:811      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:19:04:811   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:04:811   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:04:827      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:19:04:827      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:19:04:827      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:19:04:842      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:19:04:842 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:19:04:999 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:19:04:999 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [1]
[11/07 15:19:04:999      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:19:04:999      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:19:04:999 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:19:05:217      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:19:05:467      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:05:467   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:19:05:467   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:19:05:467      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:19:05:467   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:05:467   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:05:483      DevApl.cpp(05813)] :Disable Card Reader... NOT LATCHED
[11/07 15:19:05:483      DevCmn.cpp(01154)] :fnMCU_ICEntryDisable()
[11/07 15:19:05:483      DevCmn.cpp(01161)] :fnMCU_ICEntryDisable(...):return(0)
[11/07 15:19:05:483      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:19:05:483      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:19:05:483      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:19:05:483      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:19:05:483      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:19:05:483      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:19:05:499      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:19:05:514      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 15:19:05:514      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:19:05:514      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:19:05:514      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:19:05:514      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:19:05:514      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:19:05:514       Sound.cpp(00148)] :Stop
[11/07 15:19:05:514       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:19:05:514      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:19:05:514      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:19:05:514      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:19:05:514      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:19:05:514   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:05:514   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:05:514      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:19:05:514      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:19:05:514      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:19:05:514      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:19:05:545 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 15:19:05:545      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:19:05:561      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0067]
[11/07 15:19:05:561      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 15:19:05:561      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 15:19:05:561       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:19:05:577       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:19:05:577       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:19:05:577       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0067']
[11/07 15:19:05:624       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:19:05:624       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:19:05:624       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:19:05:624       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:19:05:624       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:19:05:624       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:19:05:624       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:19:05:624       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:19:05:624       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 15:19:05 EJ NUMBER = 0067 ] |15:19:05 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:19:05:624       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0067','11','07','2017','15','19','05','Change into operator mode<START_EJRNL>[ 11/07/2017 15:19:05 EJ NUMBER = 0067 ] |15:19:05 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 15:19:05:670       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:19:05:670       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:19:05:670       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:19:05:670       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:19:05:670       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:19:05:670       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:19:05:670       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:19:05:670       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[67]
[11/07 15:19:05:670       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [67]
[11/07 15:19:05:670       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[66], m_bRecordCountFinal=[1]
[11/07 15:19:05:717       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [67]
[11/07 15:19:05:717      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 15:19:05 EJ NUMBER = 0067 ] |15:19:05 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:19:05:717      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 15:19:05 EJ NUMBER = 0067 ] |15:19:05 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:19:05:717      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:19:05:717      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:19:05:733      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:05:749     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:19:05:749     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:19:05:795 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:19:05:795 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:19:05:795 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:19:05:905 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:19:06:686 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:19:06:686      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:19:06:686   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:06:686   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:06:686      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:06:686      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:07:051   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:07:051   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:07:051   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:07:051   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:07:052   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:07:179   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:07:179   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:07:179   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:07:179   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:07:179   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:07:463   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:07:463   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:07:463   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:07:464   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:07:464   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:07:680   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:07:680   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:07:681   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:07:681   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:07:681   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:07:889   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:07:889   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:07:889   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:07:890   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:07:890   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:08:080   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:08:080   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:08:080   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:08:080   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:08:080   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:08:501   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:19:08:501   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:19:08:501   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:19:08:501   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:08:501   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:19:08:990 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:19:08:990      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:19:08:991   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:08:991   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:08:992      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:08:992      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:09:710   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:19:09:710   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:09:711   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:19:09:711   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:19:09:711   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:19:10:052   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:19:10:052   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:19:10:052   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:19:10:053   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:10:053   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:19:10:461 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:19:10:462      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:19:10:462   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:10:462   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:10:463      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:10:464      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:13:250 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:19:13:250      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:19:13:251   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:13:251   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:13:253      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:13:254      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:14:537 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:19:14:537      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:19:14:538   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:14:538   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:14:539      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:14:539      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:15:405 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:19:15:405      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:19:15:406   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:15:406   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:15:407      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:15:407      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:17:211   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:19:17:211   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:19:17:212   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:19:17:212   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:17:212   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:19:17:591 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:19:17:591      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:19:17:591   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:17:592   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:17:593      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:17:593      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:18:578   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:19:18:578   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:19:18:579   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:19:18:579   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:18:579   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:19:19:098 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||15]
[11/07 15:19:19:098      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[15]
[11/07 15:19:19:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:19:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:19:100      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,.,00,000,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:19:100      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:19:733   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:19:19:733   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:19:19:734   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:19:19:734   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:19:734   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:19:20:223 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||2]
[11/07 15:19:20:224      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:19:20:224   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:20:224   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:20:225      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:20:226      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:25:825   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:19:25:826   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:19:25:826   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:19:25:826   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:25:827   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:19:26:202 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:19:26:202      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:19:26:202   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:26:203   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:26:204      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:26:204      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:27:208   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:19:27:209   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:19:27:209   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:19:27:209   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:27:209   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:19:27:628 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:19:27:628      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:19:27:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:27:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:27:630      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:27:630      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:29:202   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:19:29:202   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:29:202   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:19:29:203   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:19:29:203   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:19:29:491   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[9])
[11/07 15:19:29:492   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:19:29:492   WinAtmCtl.cpp(00891)] :strDataValue[9])
[11/07 15:19:29:492   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[9])
[11/07 15:19:29:492   WinAtmCtl.cpp(00935)] :VirtualKeyCode[39])
[11/07 15:19:29:839   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:19:29:839   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:19:29:839   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:19:29:839   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:19:29:839   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:19:29:932 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||1]
[11/07 15:19:29:932      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:19:29:933   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:29:933   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:29:934      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:19:30:250      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:19:30:382 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_RUN]
[11/07 15:19:30:852      DevCmn.cpp(05394)] :fnSNS_ClearOperatorSwitch()
[11/07 15:19:30:852      DevCmn.cpp(05401)] :fnSNS_ClearOperatorSwitch():return(0)
[11/07 15:19:30:852      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 15:19:30:946 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:19:30:946 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:19:30:946 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:19:31:055 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:19:31:055      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 15:19:31:071      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:31:868 AtmClerkCtrl.cp(00525)] :OP_RUN ClerkProc:strOpResult[NORMAL||]
[11/07 15:19:32:024 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:19:32:024 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:19:32:024      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:19:32:024      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:19:32:024 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:19:32:305      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:19:32:711      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:32:711   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:19:32:711   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:19:32:711      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:19:32:711   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:32:711   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:32:727      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:19:32:727      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:19:32:727      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:19:32:727      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:19:32:727      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:19:32:727      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:19:32:727      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:19:32:727      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:19:32:727      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:19:32:727      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:19:32:743      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:19:32:743      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:19:32:743      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:19:32:743      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:19:32:743      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:19:32:743      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:19:32:774      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:32:774      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:19:32:805      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:19:32:821      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0068]
[11/07 15:19:32:821      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 15:19:32:821      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 15:19:32:821       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:19:32:821       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:19:32:821       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:19:32:821       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0068']
[11/07 15:19:32:868       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:19:32:868       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:19:32:868       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:19:32:868       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:19:32:868       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:19:32:868       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:19:32:868       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:19:32:868       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:19:32:868       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 15:19:32 EJ NUMBER = 0068 ] |15:19:32 [SERVICE MODE]<END_EJRNL>]
[11/07 15:19:32:868       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0068','11','07','2017','15','19','32','Change into service mode<START_EJRNL>[ 11/07/2017 15:19:32 EJ NUMBER = 0068 ] |15:19:32 [SERVICE MODE]<END_EJRNL>')]
[11/07 15:19:32:915       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:19:32:915       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:19:32:915       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:19:32:915       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:19:32:915       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:19:32:915       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:19:32:915       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:19:32:915       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[68]
[11/07 15:19:32:915       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [68]
[11/07 15:19:32:915       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[67], m_bRecordCountFinal=[1]
[11/07 15:19:32:961       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [68]
[11/07 15:19:32:961      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 15:19:32 EJ NUMBER = 0068 ] |15:19:32 [SERVICE MODE]<END_EJRNL>]
[11/07 15:19:32:961      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 15:19:32 EJ NUMBER = 0068 ] |15:19:32 [SERVICE MODE]<END_EJRNL>]
[11/07 15:19:32:961      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:19:32:961      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:33:133 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:19:33:133      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:19:33:133      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:19:33:133 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:19:33:133 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:19:33:133      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:19:33:133      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:19:33:352      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:19:33:680      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:33:680   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:19:33:680   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:19:33:680      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:19:33:680   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:33:680   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:33:696      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:19:33:696      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:19:33:696      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:19:33:696      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:19:33:696      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:19:33:696      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:19:33:696      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:19:33:696      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:19:33:696      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:19:33:696      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:19:33:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:19:33:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:19:33:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:19:33:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:19:33:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:19:33:711      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:19:33:727      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:33:727 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:19:33:727 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:19:33:727 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:19:33:727 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:19:33:727 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 15:19:33:727      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:19:33:727      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:19:33:727      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:19:33:727      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:19:33:727      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:19:33:727       Sound.cpp(00148)] :Stop
[11/07 15:19:33:727       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:19:33:727      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:19:33:727      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:19:33:727      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:19:33:727      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:19:33:727   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:33:727   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:33:743      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:33:743      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:33:743      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:19:35:305      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:19:35:305 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:19:35:438 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 15:19:35:446      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:19:35:610 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:19:35:610 AtmModeCtrl.cpp(01282)] :GetMemorySize[14417920]
[11/07 15:19:35:610 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:19:35:610      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:19:35:610      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:19:35:610   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:19:35:610   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:19:35:610   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:19:35:610   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:19:35:610 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:19:35:610 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:19:35:641      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:19:35:641      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:19:35:657      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:19:35:657      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:19:35:657      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:19:35:657      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:19:35:665      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:19:35:665 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:19:35:665 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:19:35:665 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:19:35:665 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:19:35:899      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:19:36:141      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:19:36:141   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:19:36:141   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:19:36:141 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 15:19:36:196     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:19:36:196     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:19:36:196     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:19:36:196     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:19:36:196     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:19:36:196     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:19:36:235     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:19:36:266     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:19:36:266     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:19:36:266 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:19:36:266 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:19:36:266      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:19:36:266   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:19:36:266   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:19:36:266   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 15:19:36:266   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 15:19:36:266 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:19:36:290      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:19:36:290      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:19:36:290   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:36:290   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:36:305      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 15:19:36:305      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 15:19:36:305      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 15:19:36:321      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:19:36:321 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:19:36:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:19:36:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:19:36:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:19:36:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:19:36:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:19:36:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:19:36:321 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:19:36:321      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:19:36:321      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:19:36:321      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:19:36:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:19:36:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:19:36:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:19:36:329   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:19:36:329      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:19:36:329      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:19:36:329       Sound.cpp(00148)] :Stop
[11/07 15:19:36:329       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:19:36:329      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:19:36:329      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:19:36:329      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:19:36:329      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:19:36:329   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:19:36:329   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:19:36:329      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:19:36:329      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:19:36:657      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:20:37:266      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:20:37:266 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 15:20:37:266      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:20:37:266      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:20:37:266 AtmModeCtrl.cpp(01741)] :strMCUErrorCode = [0000000]
[11/07 15:20:37:266 AtmModeCtrl.cpp(01760)] : ELSE => ATM_TRAN
[11/07 15:20:37:422 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:20:37:422 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:20:37:422 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:20:37:422 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:20:37:532 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:20:37:532      DevApl.cpp(01874)] :[TRAN START]
[11/07 15:20:37:532      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 15:20:37:782      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 15:20:37:797      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:20:37:797 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 15:20:37:813 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 15:20:37:813 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 15:20:37:829      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:20:37:829      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:20:37:829 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 15:20:37:860      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:20:37:860 TranDevProc.cpp(01265)] :fnAPD_CardReadCheck()
[11/07 15:20:37:875      DevCmn.cpp(01269)] :fnMCU_Read()
[11/07 15:20:37:875      DevCmn.cpp(01278)] :fnMCU_Read():return(0)
[11/07 15:20:37:922      DevCmn.cpp(01020)] :fstrMCU_GetCardData()
[11/07 15:20:37:922 TranDevProc.cpp(01350)] :fnAPD_CardReadCheck:TrInfo[2]
[11/07 15:20:37:922 TranDevProc.cpp(01433)] :fnAPD_CardReadCheck:CardAccountNo LEN[19]
[11/07 15:20:37:954 TranDevProc.cpp(01498)] :fnAPD_CardReadCheck():return OK
[11/07 15:20:37:954 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:20:37:985      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:20:37:985   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:20:37:985   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:20:38:000      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:20:38:000      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:20:38:000      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:20:38:016      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:20:38:016 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:20:38:016 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 15:20:38:047 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 15:20:38:047 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 15:20:38:063 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 15:20:38:063 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:20:38:063   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:20:38:063   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:20:38:063   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:20:38:063   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:20:38:063 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:20:38:063   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 15:20:38:063   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:20:38:063      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:20:38:063      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:20:38:079      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:20:38:079   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:20:38:079   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:20:38:079   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 15:20:38:079   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 15:20:38:079      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:20:38:079      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 15:20:38:079       Sound.cpp(00148)] :Stop
[11/07 15:20:38:079       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:20:38:079      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:20:38:079      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:20:38:079      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:20:38:079      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:20:38:079   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:20:38:079   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:20:38:079      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:20:38:079      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:20:38:454      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 15:20:39:000   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 15:20:39:000   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 15:20:39:000      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 15:20:39:000      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:20:39:090      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:20:39:090 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:20:39:091 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 15:20:39:091 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 15:20:39:091 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:20:39:092   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:20:39:092   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:20:39:092 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 15:20:39:093 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:20:39:093 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 15:20:39:093 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 15:20:39:093 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 15:20:39:094   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:20:39:094   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:20:39:095   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 15:20:39:095   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 15:20:39:095   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:20:39:096   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:20:39:096   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 15:20:39:096   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 15:20:39:097   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:20:39:097   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:20:39:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 15:20:39:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 15:20:39:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:20:39:099   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:20:39:099   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:20:39:099   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:20:39:100   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:20:39:100   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:20:39:101      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:20:39:101      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:20:39:101      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:20:39:101   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:20:39:102   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:20:39:102   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 15:20:39:102   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 15:20:39:103      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:20:39:103      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 15:20:39:103       Sound.cpp(00148)] :Stop
[11/07 15:20:39:103       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:20:39:103      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:20:39:104      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:20:39:104      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:20:39:104      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 15:20:39:105   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:20:39:105   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:20:39:106      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 15:20:39:106      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:20:39:397      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 15:20:40:037   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:40:037   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:40:038   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:40:038   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:40:038   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:40:281   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:40:281   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:40:282   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:40:282   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:40:282   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:40:525   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:40:525   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:40:526   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:40:526   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:40:526   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:40:734   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:40:734   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:40:735   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:40:735   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:40:735   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:41:032   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:41:032   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:41:033   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:41:033   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:41:033   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:41:215   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:41:215   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:41:216   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:41:216   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:41:216   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:41:463   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:41:463   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:41:464   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:41:464   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:41:464   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:41:701   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:41:701   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:41:702   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:41:702   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:41:702   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:41:884   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:20:41:884   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:20:41:885   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:20:41:885   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:41:885   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:20:42:560   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:20:42:561   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:20:42:561   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:20:42:561   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:42:561   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:20:42:618   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/000000000]
[11/07 15:20:42:618   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(000000000)
[11/07 15:20:42:618      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 15:20:42:619      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:20:42:672      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:20:42:672 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:20:42:673 TranMenuProc.cp(00637)] :GetKeyStr=[000000000]
[11/07 15:20:42:673 TranMenuProc.cp(00676)] :Password Mode Input=[000000000]   return OK
[11/07 15:20:42:673 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:20:42:674      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 15:20:42:795 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 15:20:42:795 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 15:20:42:795 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 15:20:42:795 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 15:20:42:796 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:20:42:796   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:20:42:796   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:20:42:797   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:20:42:797   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:20:42:798   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:20:42:798   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:20:42:799   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:20:42:799   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:20:42:800   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:20:42:800   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:20:42:800 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 15:20:42:801   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 15:20:42:801   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 15:20:42:801      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:20:42:801      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:20:42:802      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:20:42:802      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:20:42:802   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:20:42:802   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:20:42:803      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:20:42:803      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:20:42:803      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:20:42:803      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:20:42:803      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 15:20:42:804       Sound.cpp(00148)] :Stop
[11/07 15:20:42:804       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:20:42:804      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:20:42:804      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:20:42:804      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:20:42:805      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:20:42:805   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:20:42:805   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:20:42:806      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:20:42:807      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:20:42:809      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 15:20:54:101   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:54:101   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:54:101   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:54:102   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:54:102   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:20:57:095   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:57:095   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:57:095   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:57:095   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:57:096   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:20:57:142   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:57:142   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:57:143   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:57:143   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:57:143   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:20:57:264   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:57:264   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:57:265   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:57:265   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:57:265   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:20:57:427   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:57:427   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:57:428   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:57:428   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:57:428   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:20:57:620   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:57:620   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:57:620   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:57:620   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:57:620   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:20:57:831   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:20:57:831   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:20:57:832   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:20:57:832   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:20:57:832   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:21:13:008 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 15:21:13:008 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 15:21:13:008 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 15:21:13:008 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:21:13:024      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:21:13:024   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:13:024   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:13:040      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:21:13:040      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:21:13:040      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:21:13:055      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:21:13:055 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:21:13:055 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 15:21:13:055 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:21:13:055      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:21:13:055      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:21:13:055      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:21:13:071      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:21:13:071      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:21:13:071      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:21:13:071      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:21:13:071   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:21:13:071   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:21:13:071   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 15:21:13:071   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 15:21:13:071      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:21:13:071      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 15:21:13:071       Sound.cpp(00148)] :Stop
[11/07 15:21:13:071       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:21:13:071      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:21:13:071      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:21:13:071      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:21:13:071      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:21:13:071   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:13:071   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:13:086      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:21:13:461      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:21:13:461      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 15:21:17:368 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 15:21:17:368 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 15:21:17:368 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 15:21:17:368 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:21:17:368 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:21:17:368 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:21:17:368 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 15:21:17:368 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 15:21:17:368 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:21:17:415 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:21:17:415 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 15:21:17:696   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:21:17:696   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:21:17:696      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:21:17:696 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 15:21:17:696 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 15:21:17:696 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:21:17:696 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:21:17:696 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:21:17:711 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:21:17:758      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:21:17:915 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:21:17:915 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 15:21:17:915 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:21:17:915      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:21:17:915      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:21:17:915   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:21:17:915   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:21:17:915   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:21:17:915   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:21:17:915 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:21:17:915 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:21:17:961      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:21:17:961      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:21:17:977      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:21:17:977      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:21:17:977      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:21:17:977      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:21:17:977      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:21:17:977 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:21:17:977 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:21:17:977 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:21:17:977 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:21:18:446      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:21:18:649      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:21:18:665      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:21:18:665   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:21:18:665   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:21:18:665 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 15:21:18:727     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:21:18:727     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:21:18:727     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:21:18:727     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:21:18:727     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:21:18:727     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:21:18:774     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:21:18:790     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:21:18:790     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:21:18:790 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:21:18:790 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:21:18:790      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:21:18:805   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:21:18:805   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:21:18:805   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 15:21:18:805   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 15:21:18:805 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:21:18:821      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:21:18:821      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:21:18:821   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:18:821   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:18:836      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 15:21:18:836      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 15:21:18:836      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 15:21:18:852      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:21:18:852 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:21:18:852   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:21:18:852   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:21:18:852   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:21:18:852   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:21:18:852   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:21:18:852   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:21:18:852 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:21:18:852      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:21:18:852      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:21:18:852      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:21:18:852   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:21:18:852   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:21:18:852   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:21:18:852   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:21:18:852      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:21:18:852      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:21:18:852       Sound.cpp(00148)] :Stop
[11/07 15:21:18:852       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:21:18:852      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:21:18:852      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:21:18:852      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:21:18:852      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:21:18:852   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:18:852   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:18:852      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:21:18:852      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:21:18:852      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:21:24:258      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:21:24:258 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 15:21:24:258      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:21:24:258      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:21:24:258 AtmModeCtrl.cpp(01560)] :strMCUErrorCode = [0000000]
[11/07 15:21:24:258 AtmModeCtrl.cpp(01577)] : Main Menu EVENT (MCR OR SCR) => ATM_TRAN
[11/07 15:21:24:415 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:21:24:415 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:21:24:415 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:21:24:415 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:21:24:524 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:21:24:524      DevApl.cpp(01874)] :[TRAN START]
[11/07 15:21:24:524      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 15:21:24:805      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 15:21:24:805      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:21:24:821 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 15:21:24:836 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 15:21:24:836 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 15:21:24:836      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:21:24:852      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:21:24:852 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 15:21:24:875      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:21:24:875 TranDevProc.cpp(01265)] :fnAPD_CardReadCheck()
[11/07 15:21:24:891      DevCmn.cpp(01269)] :fnMCU_Read()
[11/07 15:21:24:891      DevCmn.cpp(01278)] :fnMCU_Read():return(0)
[11/07 15:21:24:938      DevCmn.cpp(01020)] :fstrMCU_GetCardData()
[11/07 15:21:24:938 TranDevProc.cpp(01350)] :fnAPD_CardReadCheck:TrInfo[2]
[11/07 15:21:24:938 TranDevProc.cpp(01433)] :fnAPD_CardReadCheck:CardAccountNo LEN[19]
[11/07 15:21:24:969 TranDevProc.cpp(01498)] :fnAPD_CardReadCheck():return OK
[11/07 15:21:24:969 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:21:24:985      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:21:24:985   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:24:985   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:25:016      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:21:25:016      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:21:25:016      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:21:25:032      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:21:25:032 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:21:25:032 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 15:21:25:055 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 15:21:25:055 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 15:21:25:086 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 15:21:25:086 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:21:25:086   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:21:25:086   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:21:25:086   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:21:25:086   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:21:25:086 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:21:25:086   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 15:21:25:086   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:21:25:086      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:21:25:086      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:21:25:086      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:21:25:094   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:21:25:094   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:21:25:094   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 15:21:25:094   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 15:21:25:094      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:21:25:094      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 15:21:25:094       Sound.cpp(00148)] :Stop
[11/07 15:21:25:094       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:21:25:094      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:21:25:094      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:21:25:094      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:21:25:094      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:21:25:094   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:25:094   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:25:094      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:21:25:094      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:21:25:438      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 15:21:26:063   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 15:21:26:063   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 15:21:26:063      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 15:21:26:063      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:21:26:211      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:21:26:211 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:21:26:212 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 15:21:26:212 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 15:21:26:212 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:21:26:213   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:21:26:213   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:21:26:213 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 15:21:26:213 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:21:26:214 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 15:21:26:214 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 15:21:26:214 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 15:21:26:215   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:21:26:215   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:21:26:215   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 15:21:26:216   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 15:21:26:216   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:21:26:216   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:21:26:217   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 15:21:26:217   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 15:21:26:218   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:21:26:218   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:21:26:219   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 15:21:26:219   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 15:21:26:219   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:21:26:220   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:21:26:220   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:21:26:220   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:21:26:221   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:21:26:221   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:21:26:222      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:21:26:222      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:21:26:222      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:21:26:222   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:21:26:223   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:21:26:223   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 15:21:26:223   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 15:21:26:223      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:21:26:224      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 15:21:26:224       Sound.cpp(00148)] :Stop
[11/07 15:21:26:224       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:21:26:224      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:21:26:225      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:21:26:225      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:21:26:225      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 15:21:26:225   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:26:226   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:26:226      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 15:21:26:227      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:21:26:529      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 15:21:27:179   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:21:27:179   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:21:27:180   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:21:27:180   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:21:27:180   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:21:27:483   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:21:27:483   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:21:27:484   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:21:27:484   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:21:27:484   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:21:27:787   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:21:27:787   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:21:27:788   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:21:27:788   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:21:27:788   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:21:28:128   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:21:28:128   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:21:28:129   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:21:28:129   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:21:28:129   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:21:28:771   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:21:28:771   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:21:28:772   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:21:28:772   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:21:28:772   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:21:28:786   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 15:21:28:786   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 15:21:28:787      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 15:21:28:787      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:21:28:894      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:21:28:894 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:21:28:895 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 15:21:28:895 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 15:21:28:895 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:21:28:895      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 15:21:29:060 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 15:21:29:060 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 15:21:29:060 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 15:21:29:060 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 15:21:29:061 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:21:29:061   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:21:29:061   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:21:29:062   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:21:29:062   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:21:29:063   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:21:29:063   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:21:29:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:21:29:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:21:29:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:21:29:065   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:21:29:065 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 15:21:29:065   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 15:21:29:066   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 15:21:29:066      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:21:29:066      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:21:29:066      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:21:29:067      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:21:29:067   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:21:29:067   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:21:29:067      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:21:29:068      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:21:29:068      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:21:29:068      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:21:29:068      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 15:21:29:069       Sound.cpp(00148)] :Stop
[11/07 15:21:29:069       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:21:29:069      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:21:29:069      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:21:29:069      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:21:29:070      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:21:29:070   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:29:070   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:29:071      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:21:29:071      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:21:29:074      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 15:21:59:305 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 15:21:59:305 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 15:21:59:305 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 15:21:59:305 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:21:59:321      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:21:59:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:59:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:59:336      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:21:59:336      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:21:59:336      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:21:59:352      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:21:59:352 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:21:59:352 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 15:21:59:352 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:21:59:352      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:21:59:352      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:21:59:352      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:21:59:368      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:21:59:368      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:21:59:368      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:21:59:368      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:21:59:368   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:21:59:368   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:21:59:368   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 15:21:59:368   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 15:21:59:368      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:21:59:368      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 15:21:59:368       Sound.cpp(00148)] :Stop
[11/07 15:21:59:368       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:21:59:368      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:21:59:368      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:21:59:368      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:21:59:368      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:21:59:368   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:21:59:368   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:21:59:383      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:21:59:758      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:21:59:758      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 15:22:03:665 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 15:22:03:665 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 15:22:03:665 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 15:22:03:665 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:22:03:665 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:22:03:665 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:22:03:665 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 15:22:03:665 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 15:22:03:665 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:22:03:711 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:22:03:711 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 15:22:04:040   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:22:04:040   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:22:04:040      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:22:04:040 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 15:22:04:040 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 15:22:04:040 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:22:04:040 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:22:04:040 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:22:04:040 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:22:04:165      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:22:04:321 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:22:04:321 AtmModeCtrl.cpp(01282)] :GetMemorySize[15466496]
[11/07 15:22:04:321 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:22:04:321      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:22:04:321      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:22:04:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:22:04:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:22:04:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:22:04:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:22:04:321 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:22:04:321 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:22:04:352      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:22:04:352      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:22:04:368      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:22:04:368      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:22:04:368      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:22:04:368      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:22:04:368      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:22:04:368 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:22:04:368 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:22:04:368 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:22:04:368 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:22:04:977      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:22:05:274      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:22:05:274      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:22:05:274   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:22:05:274   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:22:05:274 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 15:22:05:336     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:22:05:336     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:22:05:336     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:22:05:336     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:22:05:336     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:22:05:336     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:22:05:399     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:22:05:430     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:22:05:430     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:22:05:430 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:22:05:430 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:22:05:430      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:22:05:446   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:22:05:446   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:22:05:446   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 15:22:05:446   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 15:22:05:446 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:22:05:461      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:22:05:461      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:22:05:461   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:05:461   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:05:477      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 15:22:05:477      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 15:22:05:477      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 15:22:05:493      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:22:05:493 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:22:05:493   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:22:05:493   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:22:05:493   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:22:05:493   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:22:05:493   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:22:05:493   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:22:05:493 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:22:05:493      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:22:05:493      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:22:05:493      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:22:05:493   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:22:05:493   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:22:05:493   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:22:05:500   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:22:05:500      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:22:05:500      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:22:05:500       Sound.cpp(00148)] :Stop
[11/07 15:22:05:500       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:22:05:500      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:22:05:500      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:22:05:500      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:22:05:500      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:22:05:500   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:05:500   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:05:500      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:22:05:500      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:22:05:500      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:22:05:947   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:22:05:947   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:22:05:947   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:22:05:947   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:05:948   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:22:06:131   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:22:06:131   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:22:06:131   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:22:06:131   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:06:131   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:22:06:349   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:22:06:349   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:22:06:349   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:22:06:349   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:06:357   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:22:07:802   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:22:07:802   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:22:07:803   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:22:07:803   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:07:803   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:22:08:303   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CLEAR])
[11/07 15:22:08:303   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CLEAR])
[11/07 15:22:08:304   WinAtmCtl.cpp(00891)] :strDataValue[CLEAR])
[11/07 15:22:08:304   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:08:304   WinAtmCtl.cpp(00935)] :VirtualKeyCode[2e])
[11/07 15:22:08:562   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:22:08:562   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:22:08:562   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:22:08:562   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:08:562   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:22:08:892   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[1])
[11/07 15:22:08:892   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:08:893   WinAtmCtl.cpp(00891)] :strDataValue[1])
[11/07 15:22:08:893   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[1])
[11/07 15:22:08:893   WinAtmCtl.cpp(00935)] :VirtualKeyCode[31])
[11/07 15:22:09:090   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[2])
[11/07 15:22:09:090   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:09:091   WinAtmCtl.cpp(00891)] :strDataValue[2])
[11/07 15:22:09:091   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[2])
[11/07 15:22:09:091   WinAtmCtl.cpp(00935)] :VirtualKeyCode[32])
[11/07 15:22:09:250   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[3])
[11/07 15:22:09:250   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:09:250   WinAtmCtl.cpp(00891)] :strDataValue[3])
[11/07 15:22:09:250   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[3])
[11/07 15:22:09:462      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(1)
[11/07 15:22:09:482      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:22:09:488 AtmClerkCtrl.cp(00108)] :ClerkProc() Set m_bOperatorSwitch=True, AtmDefine.OpDevice=[0], nOperatorSwitchStatus=[1]
[11/07 15:22:09:873      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:22:10:168      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:22:10:173      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:22:10:174   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:22:10:174   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:22:10:174      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:22:10:175   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:10:175   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:10:187      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:22:10:187      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:22:10:188      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:22:10:189      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:22:10:571      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:22:10:571      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:22:10:571      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:22:10:571      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:22:10:571      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:22:10:571      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:22:10:586      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:22:10:586      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:22:10:586      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:22:10:586      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:22:10:586      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:22:10:586      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:22:11:305      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:22:11:305 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:22:11:321      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:22:11:321   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:11:321   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:11:336      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:22:11:336      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:22:11:336      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:22:11:352      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:22:11:352 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:22:11:508 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:22:11:508 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:22:11:508      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:22:11:508      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:22:11:508 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:22:11:790      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:22:12:102      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:22:12:102   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:22:12:102   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:22:12:102      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:22:12:102   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:12:102   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:12:118      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:22:12:118      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:22:12:118      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:22:12:118      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:22:12:118      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:22:12:118      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:22:12:125      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:22:12:125      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:22:12:133      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:22:12:133      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:22:12:133      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:22:12:133      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:22:12:133      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:22:12:141      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:22:12:141      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:22:12:141      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:22:12:165      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OPERATOR MODE])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OPERATOR MODE]
[11/07 15:22:12:165      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:22:12:165      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:22:12:165      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:22:12:165      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:22:12:165      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:22:12:165       Sound.cpp(00148)] :Stop
[11/07 15:22:12:165       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:22:12:165      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:22:12:165      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:22:12:165      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:22:12:165      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:22:12:165   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:12:165   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:12:172      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:22:12:172      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:22:12:172      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:22:12:172      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:22:12:204 AtmClerkCtrl.cp(00067)] :ClerkProc() m_bOperatorSwitch = True
[11/07 15:22:12:204      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:22:12:227      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0069]
[11/07 15:22:12:227      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SD]
[11/07 15:22:12:227      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SD]
[11/07 15:22:12:227       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:22:12:227       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:22:12:227       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:22:12:227       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0069']
[11/07 15:22:12:282       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:22:12:282       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:22:12:282       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:22:12:282       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:22:12:282       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:22:12:282       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:22:12:282       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:22:12:282       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:22:12:282       DevDB.cpp(01106)] :pEJnl->Data [Change into operator mode<START_EJRNL>[ 11/07/2017 15:22:12 EJ NUMBER = 0069 ] |15:22:12 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:22:12:282       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0123','SD','0069','11','07','2017','15','22','12','Change into operator mode<START_EJRNL>[ 11/07/2017 15:22:12 EJ NUMBER = 0069 ] |15:22:12 [SUPERVISOR MENU START]<END_EJRNL>')]
[11/07 15:22:12:336       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:22:12:336       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:22:12:336       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:22:12:336       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:22:12:336       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:22:12:336       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:22:12:336       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:22:12:336       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[69]
[11/07 15:22:12:336       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [69]
[11/07 15:22:12:336       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[68], m_bRecordCountFinal=[1]
[11/07 15:22:12:383       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [69]
[11/07 15:22:12:383      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into operator mode<START_EJRNL>[ 11/07/2017 15:22:12 EJ NUMBER = 0069 ] |15:22:12 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:22:12:383      DevApl.cpp(06316)] :strTempArray0=[Change into operator mode] / strTempArray1=[[ 11/07/2017 15:22:12 EJ NUMBER = 0069 ] |15:22:12 [SUPERVISOR MENU START]<END_EJRNL>]
[11/07 15:22:12:383      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:22:12:383      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:22:12:407      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||OFF||OFF||OFF||ON||******||******||******||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:22:12:422     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:22:12:422     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:22:12:469 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:22:12:469 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:22:12:469 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:22:12:571 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:22:13:305 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:22:13:305      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:22:13:305   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:13:305   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:13:305      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:22:13:305      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:22:15:416   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:15:416   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:15:416   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:15:416   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:15:416   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:15:583   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:15:583   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:15:584   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:15:584   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:15:584   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:15:839   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:15:839   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:15:839   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:15:839   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:15:839   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:16:049   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:16:049   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:16:049   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:16:049   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:16:057   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:16:307   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:16:315   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:16:315   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:16:315   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:16:315   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:16:811   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:16:812   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:16:812   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:16:812   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:16:812   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:17:981   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:22:17:981   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:22:17:981   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:22:17:982   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:17:982   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:22:18:478 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:22:18:478      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:22:18:479   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:18:479   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:18:480      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:22:18:480      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:22:24:491   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[5])
[11/07 15:22:24:491   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:22:24:492   WinAtmCtl.cpp(00891)] :strDataValue[5])
[11/07 15:22:24:492   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[5])
[11/07 15:22:24:492   WinAtmCtl.cpp(00935)] :VirtualKeyCode[35])
[11/07 15:22:25:087   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:22:25:087   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:22:25:088   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:22:25:088   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:22:25:088   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:22:25:413 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:22:25:414      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:22:25:414   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:25:415   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:25:416      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:22:25:416      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:22:26:327 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:22:26:327      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:22:26:328   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:22:26:328   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:22:26:329      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:22:26:329      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:23:13:340   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:23:13:340   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:23:13:341   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:23:13:341   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:23:13:341   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:23:13:850 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||14]
[11/07 15:23:13:850      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[14]
[11/07 15:23:13:851   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:23:13:851   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:23:13:852      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:23:13:852      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:23:17:648   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[CANCEL])
[11/07 15:23:17:648   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[CANCEL])
[11/07 15:23:17:648   WinAtmCtl.cpp(00891)] :strDataValue[CANCEL])
[11/07 15:23:17:649   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:23:17:649   WinAtmCtl.cpp(00935)] :VirtualKeyCode[1b])
[11/07 15:23:18:127 AtmClerkCtrl.cp(00147)] :ClerkProc:strOpCommand[OP_PINMODE||4]
[11/07 15:23:18:128      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[4]
[11/07 15:23:18:128   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:23:18:128   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:23:18:129      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:23:18:130      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:30:48:368   LoaderDlg.cpp(00137)] :









Loading Loader.exe
[11/07 15:30:48:438   LoaderDlg.cpp(00373)] :Loader:: nDownload=[0]
[11/07 15:30:48:995    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 15:30:49:004    CESocket.cpp(00101)] :~CCESocket()

[11/07 15:30:49:143    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 15:30:49:166    CESocket.cpp(00101)] :~CCESocket()

[11/07 15:30:50:179    CESocket.cpp(00058)] :CCESocket() - socket type: 1 errorcode: 0
[11/07 15:30:50:184   WinAtmCtl.cpp(01638)] :CSuppressOleBusyMsg()
[11/07 15:30:50:184   WinAtmCtl.cpp(01649)] :CSuppressOleBusyMsg(): pThread->m_pMessageFilter=[0141A9D8]
[11/07 15:30:50:184   WinAtmCtl.cpp(00202)] :===============================================================
[11/07 15:30:50:184   WinAtmCtl.cpp(00203)] :===============================================================
[11/07 15:30:50:185   WinAtmCtl.cpp(00204)] :CWinAtmCtrl()
[11/07 15:30:50:185   WinAtmCtl.cpp(00363)] :OnCreate()
[11/07 15:30:50:268   WinAtmCtl.cpp(00377)] :OnCreate():return
[11/07 15:30:50:268   WinAtmCtl.cpp(01168)] :handle1=[10252]
[11/07 15:30:50:268   WinAtmCtl.cpp(01171)] :handle2=[10250]
[11/07 15:30:50:301   WinAtmCtl.cpp(00977)] :AtmStart()
[11/07 15:30:50:302      DevCmn.cpp(00045)] :CDevCmn()
[11/07 15:30:50:302      DevCmn.cpp(00053)] :CDevCmn():return
[11/07 15:30:50:302     TranCmn.cpp(00032)] :CTranCmn()
[11/07 15:30:50:302     TranCmn.cpp(00033)] :CTranCmn():return
[11/07 15:30:50:302      DevCmn.cpp(00101)] :CDevCmn::SetOwner()
[11/07 15:30:50:424      DevCmn.cpp(00149)] :[SetOwner] FDK TYPE : TOUCH
[11/07 15:30:50:424      DevCmn.cpp(00218)] :[SetOwner] Dialup TCPIP Type : 1
[11/07 15:30:50:424  GTcpSocket.cpp(00029)] :CGTcpSocket::CGTcpSocket()
[11/07 15:30:50:425  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Received)
[11/07 15:30:50:425  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Send)
[11/07 15:30:50:425  GTcpSocket.cpp(00068)] :CGTcpSocket::ClearBuffer(Parsed)
[11/07 15:30:50:426  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1880860644, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 15:30:50:427  VISAIICtrl.cpp(00062)] :[CVISAIICtrl] m_strRequestType : 1880860644, m_strProtocol : STANDARD1, m_nEnqTimeout : 30000
[11/07 15:30:50:427     NetWork.cpp(00095)] :[SetInformation] CtrlType : 1, LineType : 2
[11/07 15:30:50:477 CardDispenser.c(00022)] :CCardDispenser::CCardDispenser()
[11/07 15:30:58:350      DevCmn.cpp(06406)] :fnCMN_BackupAllTrace()::bBackupOnlyYesterdays[0]
[11/07 15:30:58:350      DevCmn.cpp(06417)] :strFolderName=[D:\TRACE\Log1107]
[11/07 15:30:58:350      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[],nStep[1]
[11/07 15:30:58:350      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:350      DevCmn.cpp(06422)] :strZipFileName=[D:\TRACE\Log1107\Log1107.zip]
[11/07 15:30:58:350      DevCmn.cpp(06424)] :BSTrace Log
[11/07 15:30:58:350      DevCmn.cpp(06434)] :strTempFileName:[D:\TRACE\Log1107\BSTrace1711071530.nwlog]
[11/07 15:30:58:428      DevCmn.cpp(06443)] :BSTrace Log Trace Delete,BResult=[1]
[11/07 15:30:58:428      DevCmn.cpp(06444)] :BSTrace Log Trace End
[11/07 15:30:58:428      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log1107\BSTrace1711071530.nwlog],nStep[2]
[11/07 15:30:58:725      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:725      DevCmn.cpp(06449)] :strAddFileName=[D:\TRACE\Log1107\BSTrace1711071530.nwlog]
[11/07 15:30:58:725      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\EJR\MDB\EJ.MDB],nStep[2]
[11/07 15:30:58:741      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:741      DevCmn.cpp(06455)] :strAddFileName=[D:\EJR\MDB\EJ.MDB]
[11/07 15:30:58:741      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMInfo.ini],nStep[2]
[11/07 15:30:58:756      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:756      DevCmn.cpp(06460)] :strAddFileName=[D:\INI\ATMInfo.ini]
[11/07 15:30:58:756      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\Device.ini],nStep[2]
[11/07 15:30:58:756      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:756      DevCmn.cpp(06465)] :strAddFileName=[D:\INI\Device.ini]
[11/07 15:30:58:756      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrStack.ini],nStep[2]
[11/07 15:30:58:756      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:756      DevCmn.cpp(06470)] :strAddFileName=[D:\INI\ErrStack.ini]
[11/07 15:30:58:756      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ATMTotal.ini],nStep[2]
[11/07 15:30:58:756      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:756      DevCmn.cpp(06475)] :strAddFileName=[D:\INI\ATMTotal.ini]
[11/07 15:30:58:756      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\INI\ErrorTrans.ini],nStep[2]
[11/07 15:30:58:756      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:756      DevCmn.cpp(06481)] :strAddFileName=[D:\INI\ErrorTrans.ini]
[11/07 15:30:58:756      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log07.txt],nStep[2]
[11/07 15:30:58:834      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:834      DevCmn.cpp(06489)] :strAddFileName=[D:\TRACE\Log07.txt]
[11/07 15:30:58:834      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi07.txt],nStep[2]
[11/07 15:30:58:866      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:866      DevCmn.cpp(06494)] :strAddFileName=[D:\TRACE\Mwi07.txt]
[11/07 15:30:58:866      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear07.txt],nStep[2]
[11/07 15:30:58:881      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:881      DevCmn.cpp(06499)] :strAddFileName=[D:\TRACE\Rear07.txt]
[11/07 15:30:58:881      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog07.txt],nStep[2]
[11/07 15:30:58:881      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:881      DevCmn.cpp(06504)] :strAddFileName=[D:\TRACE\RMSLog07.txt]
[11/07 15:30:58:881      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace07_#1.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:897      DevCmn.cpp(06509)] :strAddFileName=[D:\TRACE\RMSTrace07_#1.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp07.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(1)
[11/07 15:30:58:897      DevCmn.cpp(06514)] :strAddFileName=[D:\TRACE\MwiOp07.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Log06.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:30:58:897      DevCmn.cpp(06577)] :strAddFileName=[D:\TRACE\Log06.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Mwi06.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:30:58:897      DevCmn.cpp(06582)] :strAddFileName=[D:\TRACE\Mwi06.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\Rear06.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:30:58:897      DevCmn.cpp(06587)] :strAddFileName=[D:\TRACE\Rear06.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSLog06.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:30:58:897      DevCmn.cpp(06592)] :strAddFileName=[D:\TRACE\RMSLog06.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\RMSTrace06_#1.txt],nStep[2]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:30:58:897      DevCmn.cpp(06597)] :strAddFileName=[D:\TRACE\RMSTrace06_#1.txt]
[11/07 15:30:58:897      DevCmn.cpp(06641)] :fnCMN_ArchiveFile()strFileName[D:\TRACE\Log1107\Log1107.zip],strAddFileName[D:\TRACE\MwiOp06.txt],nStep[3]
[11/07 15:30:58:897      DevCmn.cpp(06662)] :fnCMN_ArchiveFile(...):return(0)
[11/07 15:30:58:897      DevCmn.cpp(06602)] :strAddFileName=[D:\TRACE\MwiOp06.txt]
[11/07 15:30:58:913      DevCmn.cpp(06630)] :fnCMN_BackupAllTrace():: Return
[11/07 15:30:58:913      DevApl.cpp(07610)] :fnAPL_ClerkInitModeSet:OP_STATUS[CLERK||OFF||OFF||OFF||ON||111111||222222||555555||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:30:58:913      DevApl.cpp(07698)] :fnAPL_ClerkInitModeSet:OP_STATUS[INIT||OFF||OFF||OFF||ON||111111||222222||NHD||9030||SUPERVISOR||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:30:58:913      DevApl.cpp(07726)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APRUN]
[11/07 15:30:58:913      DevApl.cpp(07730)] :fnAPL_ClerkInitModeSet:OP_APSTATUS[APINIT]
[11/07 15:30:58:913      DevCmn.cpp(00521)] :fnSPR_SetPrintImageMode()
[11/07 15:30:58:913      DevCmn.cpp(00561)] :fnSPR_SetPrintImageMode():return(1)
[11/07 15:30:58:913      DevApl.cpp(00665)] :CHECK MISFEED CONDITION
[11/07 15:30:58:913      DevApl.cpp(00702)] :Don't need to disable MisfeedRetry => Leave as is.
[11/07 15:30:58:913      DevApl.cpp(00707)] :    BATTERY LOW REBOOT OPTION
[11/07 15:30:58:913      DevApl.cpp(00722)] :    BATTERY LOW SHUTDOWN OPTION IS ENABLED
[11/07 15:30:58:913   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [BillCode], szDataValue [USD])
[11/07 15:30:58:913   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[BillCode/USD]
[11/07 15:30:58:913   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindCountry], szDataValue [USA])
[11/07 15:30:58:913   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindCountry/USA]
[11/07 15:30:58:913   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindResolution], szDataValue [1024])
[11/07 15:30:58:913   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindResolution/1024]
[11/07 15:30:58:913       Sound.cpp(00059)] :OpenDevice()
[11/07 15:30:58:913       Sound.cpp(00076)] :OpenDevice()=[0]
[11/07 15:30:58:913      DevApl.cpp(10595)] :BINLIST Count of BinList =[2], Command=[UPDATE]
[11/07 15:30:58:944      DevApl.cpp(10621)] :BINLIST Count of BININFO1=[2]
[11/07 15:30:58:944      DevApl.cpp(10626)] :BINLIST nCntMain=[2]
[11/07 15:30:58:959      DevApl.cpp(10637)] :BINLIST strBINListArrayMake=[2||1234567890||1234567891]
[11/07 15:30:58:959      DevApl.cpp(01038)] :fnAPL_InitializeDS():return(DeviceDefine=100c4e4d)
[11/07 15:30:58:959      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 15:30:58:959      DevCmn.cpp(00281)] :[SetOwner] m_bIsWindows7orHigher = [1]
[11/07 15:30:58:959      DevCmn.cpp(00284)] :CDevCmn::SetOwner():return
[11/07 15:30:58:959     TranCmn.cpp(00065)] :SetOwner()
[11/07 15:30:58:959     TranCmn.cpp(01571)] :CDevCmn::SetOwner() AP VERSION INFO=[V01.05.00.00]
[11/07 15:30:59:178     TranCmn.cpp(00108)] :AP VERSION = [V01.05.00.00D CD                        ]
[11/07 15:30:59:178     TranCmn.cpp(00371)] :SetInitialEMVTermData()
[11/07 15:30:59:178     TranCmn.cpp(00381)] :Successfully read AID Total Count = [9] => Term_data Exist : Return without creating
[11/07 15:30:59:178     TranCmn.cpp(00134)] :[RELEASE MODE SET]
[11/07 15:30:59:194     TranCmn.cpp(00191)] :SetOwner() _APPKEY_TIMEDEFINE_SENDTIMEOUT[75]
[11/07 15:30:59:209     TranCmn.cpp(00198)] :SetOwner() _INIKEY_TIMEDEFINE_RECVTIMEOUT[75]
[11/07 15:30:59:241     TranCmn.cpp(00205)] :SetOwner() _INIKEY_TIMEDEFINE_OPENRETRYTIME[60]
[11/07 15:30:59:256     TranCmn.cpp(00212)] :SetOwner() _INIKEY_TIMEDEFINE_LINERETRYTIME[30]
[11/07 15:30:59:256     TranCmn.cpp(00216)] :SetOwner() _INIKEY_TIMEDEFINE_IDLERETRYTIME[7200]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[0], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[1], nCnt=[2]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[2], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[3], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[4], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[5], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[6], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[7], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[8], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00284)] :i=[9], nCnt=[0]
[11/07 15:30:59:256     TranCmn.cpp(00287)] :nCount[2]
[11/07 15:30:59:272 TranLibProc.cpp(00343)] :fnAPL_ModifyInitialValue()
[11/07 15:30:59:319 TranLibProc.cpp(00413)] :fnAPL_ModifyInitialValue() EotControlOption : 1
[11/07 15:30:59:319     TranCmn.cpp(00361)] :Auto Reboot Option = [2]
[11/07 15:30:59:319     TranCmn.cpp(00364)] :SetOwner():return
[11/07 15:30:59:319   WinAtmCtl.cpp(01660)] :Suppress(): pOMF=[0141A9D8]
[11/07 15:30:59:319   WinAtmCtl.cpp(01667)] :Suppress(): AfxOleGetMessageFilter()->Register() TRUE
[11/07 15:30:59:319   WinAtmCtl.cpp(01272)] :strDate=[07], strYYMM=[1711]
[11/07 15:30:59:319      DevApl.cpp(01046)] :fnAPL_LoadDevice()
[11/07 15:30:59:319      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:30:59:319      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD991.swf)
[11/07 15:30:59:319      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD991.swf)
[11/07 15:30:59:319   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:30:59:319   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:30:59:319   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD991.swf])
[11/07 15:30:59:319   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD991.swf]
[11/07 15:30:59:319      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:30:59:319      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(991)
[11/07 15:30:59:319       Sound.cpp(00148)] :Stop
[11/07 15:30:59:319       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:30:59:319      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:30:59:319      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:30:59:319      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[AP]
[11/07 15:30:59:319      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:30:59:319   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:30:59:319   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:30:59:334      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:30:59:334      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:30:59:334      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[991], nInputSec[0]):return(0)
[11/07 15:30:59:522      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:30:59:569      DevCmn.cpp(05658)] :fnVFD_Initialize(nPortNum[9], nBaudRate[38400])
[11/07 15:30:59:569      DevCmn.cpp(05665)] :fnVFD_Initialize(...):return(0)
[11/07 15:30:59:569      DevCmn.cpp(04566)] :fnDOR_Initialize()
[11/07 15:31:12:426      DevCmn.cpp(04573)] :fnDOR_Initialize():return(0)
[11/07 15:31:12:426      DevCmn.cpp(04678)] :fnLGT_Initialize()
[11/07 15:31:12:458      DevCmn.cpp(04685)] :fnLGT_Initialize():return(0)
[11/07 15:31:12:458      DevCmn.cpp(04931)] :fnSPL_Initialize()
[11/07 15:31:12:473      DevCmn.cpp(04938)] :fnSPL_Initialize():return(0)
[11/07 15:31:12:473      DevCmn.cpp(05196)] :fnPIN_Initialize()
[11/07 15:31:13:926      DevCmn.cpp(05203)] :fnPIN_Initialize():return(0)
[11/07 15:31:13:926      DevCmn.cpp(05541)] :fnSNS_Initialize()
[11/07 15:31:13:965      DevCmn.cpp(05550)] :fnSNS_Initialize():return(0)
[11/07 15:31:13:965      DevCmn.cpp(04389)] :fnCMR_Initialize()
[11/07 15:31:13:965      DevCmn.cpp(04396)] :fnCMR_Initialize():return(0)
[11/07 15:31:13:966      DevCmn.cpp(05032)] :fnUPS_Initialize()
[11/07 15:31:14:096      DevCmn.cpp(05039)] :fnUPS_Initialize():return(0)
[11/07 15:31:15:293   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:31:15:293   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:31:15:293      DevApl.cpp(01116)] :fnAPL_LoadDevice():return
[11/07 15:31:16:239 AtmModeCtrl.cpp(00092)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_INIT       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:31:16:239      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:31:16:239      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:31:16:239      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:31:16:239      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:31:16:239      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:31:16:239 AtmModeCtrl.cpp(00102)] :Reset OP Change Reboot Flag
[11/07 15:31:16:239      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:31:16:489      DevCmn.cpp(05473)] :fnSNS_GetOperatorSwitch():return(2)
[11/07 15:31:16:489      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[INIT||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,OFF,OFF,ON,ON,ON|| ||]
[11/07 15:31:16:504      DevCmn.cpp(01011)] :fstrMCU_GetRetractCnt():return(0)
[11/07 15:31:16:504      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[00000000])
[11/07 15:31:16:520 TranNmsProc.cpp(01840)] :dwInitOccupied_VMMem=[189140992], memStatus.dwTotalVirtual=[2147352576], memStatus.dwAvailVirtual=[1958211584]
[11/07 15:31:16:520      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:31:16:520 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:31:16:520 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:31:16:520 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:31:16:629 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:31:16:629      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:31:16:645      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0070]
[11/07 15:31:16:645      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SA]
[11/07 15:31:16:645      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SA]
[11/07 15:31:16:645       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:31:16:645       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:31:16:645       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:31:16:661       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0070']
[11/07 15:31:16:708       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:31:16:708       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:31:16:708       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:31:16:708       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:31:16:708       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:31:16:708       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:31:16:708       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:31:16:708       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:31:16:708       DevDB.cpp(01106)] :pEJnl->Data [System Power On<START_EJRNL>[ 11/07/2017 15:31:16 EJ NUMBER = 0070 ] |15:31:16 [Power On]<END_EJRNL>]
[11/07 15:31:16:708       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0100','SA','0070','11','07','2017','15','31','16','System Power On<START_EJRNL>[ 11/07/2017 15:31:16 EJ NUMBER = 0070 ] |15:31:16 [Power On]<END_EJRNL>')]
[11/07 15:31:16:754       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:31:16:754       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:31:16:754       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:31:16:754       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:31:16:754       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:31:16:754       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:31:16:754       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:31:16:754       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[70]
[11/07 15:31:16:754       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [70]
[11/07 15:31:16:754       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[69], m_bRecordCountFinal=[1]
[11/07 15:31:16:801       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [70]
[11/07 15:31:16:801      DevApl.cpp(06310)] :TempEjrMdb.Data=[System Power On<START_EJRNL>[ 11/07/2017 15:31:16 EJ NUMBER = 0070 ] |15:31:16 [Power On]<END_EJRNL>]
[11/07 15:31:16:801      DevApl.cpp(06316)] :strTempArray0=[System Power On] / strTempArray1=[[ 11/07/2017 15:31:16 EJ NUMBER = 0070 ] |15:31:16 [Power On]<END_EJRNL>]
[11/07 15:31:16:801      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:31:16:879      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:16:879 AtmModeCtrl.cpp(00183)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:31:16:879      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:31:16:879      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:31:16:879      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 15:31:16:895      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[d])
[11/07 15:31:16:895      DevApl.cpp(05493)] :fnAPL_ResetDevice(nDevid[d]) DeviceTran[0]
[11/07 15:31:16:895      DevApl.cpp(05524)] :fnAPL_ResetDevice(nDevId[d])
[11/07 15:31:16:895      DevApl.cpp(02652)] :[INITIALIZE] : d,1
[11/07 15:31:16:895      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[88888888])
[11/07 15:31:16:895      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:31:16:895      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:31:16:895      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:31:16:911      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 15:31:16:911      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:31:16:911      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 15:31:16:911      DevApl.cpp(02499)] :fnAPL_ClearError()
[11/07 15:31:16:958      DevCmn.cpp(00493)] :fnSPR_ClearErrorCode()
[11/07 15:31:16:958      DevCmn.cpp(00683)] :fnSPR_Initialize()
[11/07 15:31:19:067      DevCmn.cpp(00692)] :fnSPR_Initialize():return(0)
[11/07 15:31:19:067      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:31:19:067      DevCmn.cpp(01070)] :fnMCU_Initialize()
[11/07 15:31:21:629      DevCmn.cpp(01082)] :fnMCU_Initialize():return(0)
[11/07 15:31:21:629      DevCmn.cpp(02926)] :fnCDU_ClearErrorCode()
[11/07 15:31:21:629      DevCmn.cpp(03781)] :fnCDU_Initialize()
[11/07 15:31:33:145      DevCmn.cpp(03790)] :fnCDU_Initialize():return(0)
[11/07 15:31:36:286      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[c])
[11/07 15:31:39:426      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[8])
[11/07 15:31:39:489      DevApl.cpp(01293)] :fnAPL_GetErrorDevice()::DeviceStatusSave=[0])
[11/07 15:31:39:489      DevApl.cpp(03023)] :fnAPL_InitializeDevice::nDevId=[d]
[11/07 15:31:42:676      DevCmn.cpp(03279)] :fnCDU_GetNumberOfCST():return(2)
[11/07 15:31:42:676      DevCmn.cpp(03423)] :fnCDU_GetValueOfCash(nCSTNo[1]):return(20)
[11/07 15:31:42:676      DevCmn.cpp(03500)] :fnCDU_GetNumberOfCash(nCSTNo[1]):return(1999)
[11/07 15:31:42:676      DevCmn.cpp(03636)] :fnCDU_GetNumberOfDispense(nCSTNo[1]):return(1)
[11/07 15:31:42:676      DevCmn.cpp(03430)] :fnCDU_GetValueOfCash(nCSTNo[2]):return(20)
[11/07 15:31:42:676      DevCmn.cpp(03508)] :fnCDU_GetNumberOfCash(nCSTNo[2]):return(2000)
[11/07 15:31:42:692      DevApl.cpp(03559)] :fnCDU_GetCurrencyID(CDU_CST_1)=[USD]  CurrencyCurrency[USD]
[11/07 15:31:45:848      DevApl.cpp(05676)] :fnAPL_GetAvailErrorDevice(d)=[0])
[11/07 15:31:45:848      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:31:45:848      DevCmn.cpp(03561)] :fnCDU_GetNumberOfSetCash(nCSTNo[1]):return(2000)
[11/07 15:31:45:848      DevCmn.cpp(03568)] :fnCDU_GetNumberOfSetCash(nCSTNo[2]):return(2000)
[11/07 15:31:45:848      DevCmn.cpp(03313)] :fnCDU_GetCSTStatus(nCSTNo[1]):return(1)
[11/07 15:31:45:848      DevCmn.cpp(04535)] :fnDOR_GetDoorStatus():return1(1)
[11/07 15:31:45:848      DevCmn.cpp(03260)] :fnCDU_GetAvailWithdraw():return(20)
[11/07 15:31:45:848      DevCsh.cpp(00807)] :fnCDU_GetAvailWithdraw()=[20], LOWCURRENCYCHK=[0]
[11/07 15:31:45:848      DevCsh.cpp(00808)] :fnCDU_GetAvailWithdraw() FirstCSTStatus[1][0][0][0]
[11/07 15:31:45:848      DevApl.cpp(01501)] :nTempWithAvail=[32], RejectCSTLoc=[0], fnAPL_GetAvailDevice(DEV_CSH)=[8], CshLoc=[0]
[11/07 15:31:45:864      DevNet.cpp(00196)] :[PutATMIPSettings]
[11/07 15:31:45:989 AtmModeCtrl.cpp(00220)] :VAS ENABLE CHECK
[11/07 15:31:45:989 AtmModeCtrl.cpp(00228)] :VAS ENABLE CHECK - Disabled
[11/07 15:31:46:020      DevApl.cpp(07749)] :fnAPL_ClerkInformation:: Init
[11/07 15:31:46:036      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CLERK||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:31:46:051     TypeCvt.cpp(01323)] :MakeMoneyCent() : stramount[00000355]
[11/07 15:31:46:051     TypeCvt.cpp(01437)] :MakeMoneyCent() : strRetVal[3.55]
[11/07 15:31:46:114      DevApl.cpp(08005)] :fnAPL_ClerkInformation:OP_APSTATUS[APINIT]
[11/07 15:31:46:114      DevApl.cpp(08009)] :fnAPL_ClerkInformation:OP_APSTATUS[APSTART]
[11/07 15:31:46:114 TranNmsProc.cpp(00063)] :m_strProtocolType=[STANDARD1]
[11/07 15:31:46:114      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=0, pTime=11
[11/07 15:31:46:114      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 15:31:46:129 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[0], m_ModemStatus=[3], AtmStatus=[2]
[11/07 15:31:46:301 AtmModeCtrl.cpp(00892)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_INIT       ]->[ATM_CLERK      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:31:46:301 AtmModeCtrl.cpp(00898)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:31:46:301      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:31:46:301      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:31:46:301 AtmModeCtrl.cpp(00908)] :Reset OP Change Reboot Flag
[11/07 15:31:46:536      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:31:46:754      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:31:46:754   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:31:46:754   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:31:46:770      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:31:46:770   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:46:770   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:46:786      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:31:46:786      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:31:46:786      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:31:46:786      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:31:46:786      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:31:46:786      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:31:46:793      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:31:46:793      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:31:46:801      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:31:46:801      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:31:46:801      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:31:46:801      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:31:46:801      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:31:46:809      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:31:46:809      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:31:46:809      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:31:46:833      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:31:46:833      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:31:46:864      DevApl.cpp(06057)] :fnAPL_EjrSpoolEnd()
[11/07 15:31:46:872      DevApl.cpp(06213)] :fnAPL_EjrAddSerialNo():EjrMdb.StackNum=[0071]
[11/07 15:31:46:872      DevApl.cpp(06226)] :fnAPL_EjrSave():strKindCode=[SB]
[11/07 15:31:46:872      DevApl.cpp(06235)] :fnAPL_EjrSave():EjrMdb.DataSize=[], EjrMdb.KindCode=[SB]
[11/07 15:31:46:872       DevDB.cpp(01281)] :fbMDB_DeleteData() 1
[11/07 15:31:46:872       DevDB.cpp(01285)] :fbMDB_DeleteData() 2
[11/07 15:31:46:879       DevDB.cpp(01292)] :fbMDB_DeleteData() 3
[11/07 15:31:46:879       DevDB.cpp(01295)] :m_strQuery = [Delete from TranJournal Where StackNum = '0071']
[11/07 15:31:46:926       DevDB.cpp(01319)] :fbMDB_DeleteData()::Return
[11/07 15:31:46:926       DevDB.cpp(01076)] :fbMDB_InsertData()
[11/07 15:31:46:926       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:31:46:926       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:31:46:926       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:31:46:926       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:31:46:926       DevDB.cpp(01093)] :fbMDB_InsertData(): before pRsConn->Close()
[11/07 15:31:46:926       DevDB.cpp(01096)] :fbMDB_InsertData(): after delete pRsConn;
[11/07 15:31:46:926       DevDB.cpp(01106)] :pEJnl->Data [Change into service mode<START_EJRNL>[ 11/07/2017 15:31:46 EJ NUMBER = 0071 ] |15:31:46 [SERVICE MODE]<END_EJRNL>]
[11/07 15:31:46:926       DevDB.cpp(01123)] :strSQL =  [INSERT INTO TranJournal (DataSize, KindCode, StackNum, StackDataMonth, StackDataDay, StackDataYear, StackDataHour, StackDataMin, StackDataSec, Data) VALUES ('0113','SB','0071','11','07','2017','15','31','46','Change into service mode<START_EJRNL>[ 11/07/2017 15:31:46 EJ NUMBER = 0071 ] |15:31:46 [SERVICE MODE]<END_EJRNL>')]
[11/07 15:31:46:981       DevDB.cpp(00115)] :SingleExcute() Normal End
[11/07 15:31:46:981       DevDB.cpp(01132)] :fbMDB_InsertData()::Return
[11/07 15:31:46:981       DevDB.cpp(00992)] :fnMDB_GetTableSize(strTableName=[TranJournal])
[11/07 15:31:46:981       DevDB.cpp(00063)] :OpenDataBase Start, StrDBConn=[DSN=EJ;UID=****;PWD=****]
[11/07 15:31:46:981       DevDB.cpp(00079)] :OpenDataBase End
[11/07 15:31:46:981       DevDB.cpp(00127)] :ExecuteQuery Start!
[11/07 15:31:46:981       DevDB.cpp(00146)] :ExecuteQuery End!
[11/07 15:31:46:981       DevDB.cpp(01038)] :fstrMDB_GetData() nCnt=[71]
[11/07 15:31:46:981       DevDB.cpp(01042)] :fstrMDB_GetData():nFields = [71]
[11/07 15:31:46:981       DevDB.cpp(01049)] :pStatus m_lCurrentRecord=[70], m_bRecordCountFinal=[1]
[11/07 15:31:47:028       DevDB.cpp(01056)] :fstrMDB_GetData():nFields = [71]
[11/07 15:31:47:028      DevApl.cpp(06310)] :TempEjrMdb.Data=[Change into service mode<START_EJRNL>[ 11/07/2017 15:31:46 EJ NUMBER = 0071 ] |15:31:46 [SERVICE MODE]<END_EJRNL>]
[11/07 15:31:47:028      DevApl.cpp(06316)] :strTempArray0=[Change into service mode] / strTempArray1=[[ 11/07/2017 15:31:46 EJ NUMBER = 0071 ] |15:31:46 [SERVICE MODE]<END_EJRNL>]
[11/07 15:31:47:028      DevApl.cpp(06164)] :fnAPL_EjrSpoolEnd() Return
[11/07 15:31:47:051      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:31:47:215 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CLERK      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:31:47:215      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:31:47:215      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:31:47:215 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:31:47:215 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:31:47:215      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:31:47:215      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:31:47:543      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:31:48:090      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:31:48:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:31:48:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:31:48:098      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:31:48:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:48:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:48:114      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:31:48:114      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:31:48:114      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:31:48:114      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:31:48:114      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:31:48:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:31:48:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:31:48:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:31:48:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:31:48:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:31:48:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:31:48:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:31:48:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:31:48:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:31:48:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:31:48:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:31:48:161      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:31:48:161 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:31:48:161 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:31:48:161 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:31:48:161 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:31:48:161 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:31:48:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:31:48:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:31:48:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE (L/C)])
[11/07 15:31:48:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE (L/C)]
[11/07 15:31:48:168      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:31:48:168      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:31:48:168      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:31:48:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:31:48:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:31:48:168      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:31:48:168      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:31:48:168       Sound.cpp(00148)] :Stop
[11/07 15:31:48:168       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:31:48:168      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:31:48:168      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:31:48:168      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:31:48:168      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:31:48:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:48:176   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:48:176      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:31:48:176      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:48:192      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:31:49:793      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:31:49:793 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:31:49:911 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 1936548210 => A5
[11/07 15:31:49:950 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 15:31:49:997 TranMainProc.cp(00108)] :m_pDevCmn->HostOpenRetryCnt=[0]
[11/07 15:31:50:090 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_WAITREADY ], HostStatusSave[HOST_OFFLINE   ]
[11/07 15:31:50:262 TranMainProc.cp(00060)] :m_pDevCmn->HostOpenFlag = FALSE
[11/07 15:31:50:262 TranMainProc.cp(00141)] :fnAPP_MainTranProc(11)
[11/07 15:31:50:286 TranMainProc.cp(00182)] :TranStatus[11]
[11/07 15:31:50:286 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[11]
[11/07 15:31:50:286 TranMainProc.cp(00677)] :fnAPP_TranOpenProc()
[11/07 15:31:50:286     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:31:50:286     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:31:50:286     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:31:50:348     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:31:50:372     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:31:50:379     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:31:50:379 TranMainProc.cp(00683)] :TranCode=[1011], TRAN_OPEN=[11], TC_OPEN=[1011]
[11/07 15:31:50:379      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 15:31:50:598      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 15:31:50:614 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 15:31:50:614 TranHostProc.cp(00075)] :TranCode(1011), m_pDevCmn->TranStatus(11)
[11/07 15:31:50:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Configuration)])
[11/07 15:31:50:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Configuration)]
[11/07 15:31:50:629      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:31:50:629      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:31:50:629      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:31:50:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:31:50:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:31:50:629   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 15:31:50:629   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 15:31:50:629      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:31:50:629      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 15:31:50:637       Sound.cpp(00148)] :Stop
[11/07 15:31:50:637       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:31:50:637      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:31:50:637      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:31:50:637      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:31:50:637      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:31:50:637   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:50:637   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:50:637      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:31:50:981      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:31:50:981      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 15:31:51:762 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 15:31:51:762 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 15:31:51:762 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 15:31:51:762 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1011])
[11/07 15:31:51:762 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    88]:return
[11/07 15:31:51:762 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1011] RealFlag[1])
[11/07 15:31:51:762 TranHostProc.cp(01345)] :m_strProtocolType=[STANDARD1], m_KeyMode=[3]
[11/07 15:31:51:762 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 15:31:51:762 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[11]
[11/07 15:31:51:762 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 15:31:51:762 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(23)
[11/07 15:31:51:762 TranHostProc.cp(00254)] :SendLength(23), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 15:31:51:762 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 15:31:51:793      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,OFF,OFF,ON,OFF,OFF,OFF,OFF|| ||]
[11/07 15:31:51:801 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 15:31:51:801     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 15:31:51:801     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 15:31:51:801  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 15:31:51:801       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 15:31:51:801    CESocket.cpp(00116)] :Create() start

[11/07 15:31:51:801    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 15:31:51:801    CESocket.cpp(00220)] :Connect() start - socket:1972 address: 192.168.198.199 port: 45000
[11/07 15:31:51:809    CESocket.cpp(00441)] :Connect() OK
[11/07 15:31:51:809    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 15:31:51:809  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 15:31:51:809  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 15:31:51:809  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : 88, protocol : STANDARD1
[11/07 15:31:51:809  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 15:31:51:809    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 15:31:53:458    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:31:53:458    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:31:53:458       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:31:53:536  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 15:31:53:536    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:31:53:536       TCPIP.cpp(00091)] :LineSendData
[11/07 15:31:53:536    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:31:53:536    CESocket.cpp(00520)] :Send() end - total sendLen: 26
[11/07 15:31:53:536  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:26]

[11/07 15:31:53:723    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:31:53:723    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:31:53:723       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:31:53:848  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 15:31:53:848    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:31:53:942    CESocket.cpp(00755)] :receive Data(thread): [len:108]
[11/07 15:31:53:942    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 108
[11/07 15:31:53:942       TCPIP.cpp(00123)] :receive Data(put_data): [len: 108]
[11/07 15:31:54:004  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 15:31:54:004    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:31:54:004  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[0]

[11/07 15:31:54:004    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:31:54:004       TCPIP.cpp(00091)] :LineSendData
[11/07 15:31:54:004    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:31:54:004    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:31:54:145    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:31:54:145    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:31:54:145       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:31:54:161  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 15:31:54:161    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 15:31:54:161       TCPIP.cpp(00091)] :LineSendData
[11/07 15:31:54:161    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:31:54:161    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:31:54:176       TCPIP.cpp(00082)] :line close start
[11/07 15:31:54:176    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 15:31:54:176    CESocket.cpp(00463)] :Disconnect() End

[11/07 15:31:54:176    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 15:31:54:176     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 15:31:54:176    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 15:31:54:176    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 15:31:54:176      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 15:31:54:176   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 15:31:54:176   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 15:31:54:176      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:31:54:176 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 15:31:54:176 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 15:31:54:176 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 15:31:54:176  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    881106201716490800050011808CE54F7E2CCC00000355022808CE54F7E2CCC11808CE54F7E2CCC][LEN:105]

[11/07 15:31:54:176     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 15:31:54:176      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 15:31:54:176 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[105])
[11/07 15:31:54:176      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 15:31:54:176   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 15:31:54:176   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 15:31:54:176      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:31:54:192 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[88]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[3]=[11062017164908]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[4]=[000500]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[5]=[11808CE54F7E2CCC]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[6]=[00000355]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[7]=[0]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[8]=[22808CE54F7E2CCC]
[11/07 15:31:54:192 TranHostProc.cp(03862)] :m_strArrRecvData[9]=[11808CE54F7E2CCC]
[11/07 15:31:54:192 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[10]
[11/07 15:31:54:411 TranHostProc.cp(04029)] :OpenRespMsg.SurchargeAmount_V=[00000355]
[11/07 15:31:54:458 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 15:31:54:473 TranOutputProc.(02767)] :fnAPP_LoadWorkingKey(), Keymode = [3]
[11/07 15:31:54:473      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:54:473      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K3], szKeyValue[11808CE54F7E2CCC])
[11/07 15:31:54:473      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:54:536      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 15:31:54:551 TranOutputProc.(02839)] :fnAPP_LoadWorkingKey() K3 KeyLoad Success!
[11/07 15:31:54:551      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:54:551      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK3], szKeyName[K2], szKeyValue[22808CE54F7E2CCC])
[11/07 15:31:54:551      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:54:598      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 15:31:54:614 TranOutputProc.(02865)] :fnAPP_LoadWorkingKey() K2 KeyLoad Success!
[11/07 15:31:54:614      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:54:614      DevCmn.cpp(05316)] :fnPIN_LoadKey(szKeyUse[FUNCTION], szEncKeyName[MASTERK], szKeyName[K1], szKeyValue[11808CE54F7E2CCC])
[11/07 15:31:54:614      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:31:54:848      DevCmn.cpp(05332)] :fnPIN_LoadKey(...Len:16):return(0)
[11/07 15:31:54:864 TranOutputProc.(02893)] :fnAPP_LoadWorkingKey() K1 KeyLoad Success!
[11/07 15:31:54:864 TranHostProc.cp(03105)] :fnAPP_STD1_RecvHost(): TranResult = TRUE
[11/07 15:31:54:864 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 15:31:54:864 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 15:31:54:864      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 15:31:55:114      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 15:31:55:114 TranMainProc.cp(00730)] :fnAPP_TranOpenProc():return
[11/07 15:31:55:114 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:31:55:114 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:31:55:129 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:31:55:129 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:31:55:176 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:31:55:176 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:31:55:176 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:31:55:176 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:31:55:176 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:31:55:176 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 15:31:55:176 TranMainProc.cp(00096)] :[fnAPP_MainOpenPorc] Send ATM_REPORT_STATUS to RMS agent
[11/07 15:31:55:176 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 15:31:55:176 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 15:31:55:176 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:31:55:176 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:31:55:176 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:31:55:176 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:31:55:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:31:55:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:31:55:176      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:31:55:192      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:31:55:364 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 15:31:55:364 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 15:31:55:364 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:31:55:364 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:31:55:364 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 15:31:55:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 15:31:55:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 15:31:55:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 15:31:55:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 15:31:55:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 15:31:55:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 15:31:55:364      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:31:55:364      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:31:55:364      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:31:55:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:31:55:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:31:55:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 15:31:55:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 15:31:55:364      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:31:55:364      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 15:31:55:364       Sound.cpp(00148)] :Stop
[11/07 15:31:55:364       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:31:55:364      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:31:55:364      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:31:55:364      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:31:55:364      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:31:55:364   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:55:364   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:55:364      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:31:55:364      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:31:55:364      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 15:31:56:926 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 15:31:56:926 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 15:31:56:926 TranMainProc.cp(00134)] :fnAPP_MainOpenProc:: Return(1)
[11/07 15:31:56:926 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 15:31:56:926 AtmModeCtrl.cpp(01239)] :READY MODE : READYSTATUS CHANGED, 5 => A0
[11/07 15:31:56:942      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:31:56:958 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 15:31:56:958 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[10], m_pDevCmn->m_DelayTime=[0]
[11/07 15:31:56:958 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:31:56:973      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:31:56:973   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:56:973   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:56:989      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:31:56:989      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:31:56:989      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:31:57:004      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:31:57:004 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:31:57:004 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[11], m_DelayTime=[0]
[11/07 15:31:57:036 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_READY      )
[11/07 15:31:57:036 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 15:31:57:036 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 15:31:57:067 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 15:31:57:067 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 15:31:57:067 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 15:31:57:067 TranMainProc.cp(01138)] :TranCode:[1011]
[11/07 15:31:57:067 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 15:31:57:083 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:31:57:083 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:31:57:083 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:31:57:192 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:31:57:348 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 15:31:57:348 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 15:31:57:348      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:31:57:348      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:31:57:348      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:31:57:356      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:31:57:364      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:31:57:372     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:31:57:372     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:31:57:372     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:31:57:442     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:31:57:528     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:31:57:528     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:31:57:528 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 15:31:57:528      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 15:31:57:833      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 15:31:57:856 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 15:31:57:856 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 15:31:57:856   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 15:31:57:856   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 15:31:57:856      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:31:57:856      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:31:57:856      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 15:31:57:856   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:31:57:856   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:31:57:856   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 15:31:57:856   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 15:31:57:856      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:31:57:856      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 15:31:57:856       Sound.cpp(00148)] :Stop
[11/07 15:31:57:856       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:31:57:856      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:31:57:856      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:31:57:856      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:31:57:856      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:31:57:856   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:31:57:856   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:31:57:856      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:31:57:856      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:31:57:856      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 15:31:58:653 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 15:31:58:653 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 15:31:58:653 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 15:31:58:653 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 15:31:58:653 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 15:31:58:653 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 15:31:58:653 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 15:31:58:653 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 15:31:58:653 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 15:31:58:653 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 15:31:58:653 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 15:31:58:692 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 15:31:58:692      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:31:58:692      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:31:58:692 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 15:31:58:692 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 15:31:58:692 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 15:31:58:692 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 15:31:58:692 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 15:31:58:692 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 15:31:58:692 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 15:31:58:692 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 15:31:58:692 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 15:31:58:723 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 15:31:58:723     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 15:31:58:723     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 15:31:58:723  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 15:31:58:723       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 15:31:58:723    CESocket.cpp(00116)] :Create() start

[11/07 15:31:58:723    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 15:31:58:723    CESocket.cpp(00220)] :Connect() start - socket:356 address: 192.168.198.199 port: 45000
[11/07 15:31:58:723    CESocket.cpp(00441)] :Connect() OK
[11/07 15:31:58:723    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 15:31:58:723  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 15:31:58:731  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 15:31:58:731  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 15:31:58:731  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 15:31:58:731    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 15:32:00:395    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:32:00:395    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:32:00:395       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:32:00:458  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 15:32:00:458    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:32:00:458       TCPIP.cpp(00091)] :LineSendData
[11/07 15:32:00:458    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:32:00:458    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 15:32:00:458  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 15:32:00:661    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:32:00:661    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:32:00:661       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:32:00:770  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 15:32:00:770    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:32:00:879    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 15:32:00:879    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 15:32:00:879       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 15:32:00:926  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 15:32:00:926    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:32:00:926  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 15:32:00:926    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 15:32:00:926       TCPIP.cpp(00091)] :LineSendData
[11/07 15:32:00:926    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:32:00:926    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:32:01:067    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 15:32:01:067    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 15:32:01:067       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 15:32:01:083  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 15:32:01:083    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 15:32:01:083       TCPIP.cpp(00091)] :LineSendData
[11/07 15:32:01:083    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 15:32:01:083    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 15:32:01:098       TCPIP.cpp(00082)] :line close start
[11/07 15:32:01:098    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 15:32:01:098    CESocket.cpp(00463)] :Disconnect() End

[11/07 15:32:01:098    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 15:32:01:098     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 15:32:01:098    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 15:32:01:098    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 15:32:01:098      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 15:32:01:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 15:32:01:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 15:32:01:098      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:32:01:098 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 15:32:01:098 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 15:32:01:098 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 15:32:01:098  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 15:32:01:098     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 15:32:01:098      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 15:32:01:098 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 15:32:01:098      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 15:32:01:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 15:32:01:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 15:32:01:098      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 15:32:01:098 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 15:32:01:098 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 15:32:01:098 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 15:32:01:098 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 15:32:01:098 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 15:32:01:098 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 15:32:01:098 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 15:32:01:098 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 15:32:01:098      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 15:32:01:379      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 15:32:01:411 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 15:32:01:411 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:32:01:411 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:32:01:411 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:32:01:411 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:32:01:458 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:32:01:458 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:32:01:458 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:32:01:458 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:01:458 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:01:458 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 15:32:01:458 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:32:01:458 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:32:01:458 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:01:458 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:01:458      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 15:32:01:536 AtmHostCtrl.cpp(00043)] :HostStatus[HOST_ONLINE    ], HostStatusSave[HOST_WAITREADY ]
[11/07 15:32:01:614 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:32:01:614      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:32:01:614      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:32:01:614 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 15:32:01:614 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:32:01:614      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:32:01:614      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:32:01:848      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 15:32:02:098      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:32:02:098      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:32:02:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:32:02:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:32:02:098      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 15:32:02:098   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:02:098   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:02:114      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:32:02:114      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:32:02:114      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:32:02:114      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:32:02:114      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:32:02:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:32:02:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:32:02:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:32:02:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:32:02:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:32:02:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:32:02:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:32:02:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:32:02:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:32:02:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:32:02:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:32:02:161      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:32:02:161 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:32:02:161 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:32:02:161 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:02:161 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:02:161 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 15:32:02:161   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 15:32:02:161   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 15:32:02:161   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 15:32:02:161   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 15:32:02:161   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 15:32:02:161   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 15:32:02:161   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 15:32:02:161   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 15:32:02:161      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 15:32:02:168      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:32:02:168      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 15:32:02:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:02:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:02:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 15:32:02:168   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 15:32:02:168      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:02:168      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 15:32:02:168       Sound.cpp(00148)] :Stop
[11/07 15:32:02:168       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:02:168      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:02:168      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:02:168      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:02:168      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:32:02:168   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:02:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:02:184      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:32:02:184      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:32:02:192      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 15:32:03:754      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:32:03:754 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:32:03:879 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 15:32:03:895      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:32:03:903 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 15:32:03:903 TranNmsProc.cpp(00488)] :NmsCashStatus:(0)
[11/07 15:32:04:059 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:32:04:059 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 15:32:04:059 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:32:04:059      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:32:04:059      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:32:04:059   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:32:04:059   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:32:04:059   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:32:04:059   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:32:04:059 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:32:04:059 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:32:04:114 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 15:32:04:114 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 15:32:04:114 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:32:04:114 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:32:04:114 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:04:114 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:04:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:32:04:114      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:32:04:122      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:32:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:32:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:32:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:32:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:32:04:129      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:32:04:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:32:04:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:32:04:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:32:04:309 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 15:32:04:309 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 15:32:04:309 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:04:309 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:04:309 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 15:32:04:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 15:32:04:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 15:32:04:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 15:32:04:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 15:32:04:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 15:32:04:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 15:32:04:309      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:32:04:309      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:32:04:309      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 15:32:04:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:04:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:04:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 15:32:04:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 15:32:04:309      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:04:309      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 15:32:04:309       Sound.cpp(00148)] :Stop
[11/07 15:32:04:309       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:04:309      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:04:309      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:04:309      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:04:309      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:32:04:309   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:04:309   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:04:309      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:32:04:684      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:32:04:684      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 15:32:06:247 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 15:32:06:247 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 15:32:06:247      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:32:06:247      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:32:06:262      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:32:06:262      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:32:06:262      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:32:06:262      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:32:06:262      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:32:06:262 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:32:06:262 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:32:06:262 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:06:262 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:06:497      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:32:06:731      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:32:06:731   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:32:06:731   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:32:06:731 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0xffffffff]
[11/07 15:32:06:793     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:32:06:793     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:32:06:793     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:32:06:793     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:32:06:793     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:32:06:793     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:32:06:840     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:32:06:872     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:32:06:872     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:32:06:872 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:32:06:872 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:32:06:872      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:32:06:872   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:32:06:872   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:32:06:872   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 15:32:06:872   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 15:32:06:872 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:32:06:887      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:32:06:887      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:32:06:887   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:06:887   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:06:903      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 15:32:06:903      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 15:32:06:903      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 15:32:06:918      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:32:06:918 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:32:06:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:32:06:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:32:06:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:32:06:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:32:06:918   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:32:06:918   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:32:06:918 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:32:06:918      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:32:06:918      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:32:06:934      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:32:06:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:06:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:06:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:32:06:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:32:06:934      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:06:934      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:32:06:934       Sound.cpp(00148)] :Stop
[11/07 15:32:06:934       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:06:934      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:06:934      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:06:934      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:06:934      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:32:06:934   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:06:934   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:06:934      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:32:06:934      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:32:06:950      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:32:08:637 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 15:32:08:637 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 15:32:11:215      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:32:11:215 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 15:32:11:403      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:32:11:403 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[68], m_pDevCmn->DeviceTran[4]
[11/07 15:32:11:403      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 15:32:11:403      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 15:32:11:403 AtmModeCtrl.cpp(01741)] :strMCUErrorCode = [0000000]
[11/07 15:32:11:403 AtmModeCtrl.cpp(01760)] : ELSE => ATM_TRAN
[11/07 15:32:11:559 AtmModeCtrl.cpp(01828)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_TRAN       ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:32:11:559 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 15:32:11:559 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 15:32:11:559 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:32:11:668 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:32:11:668      DevApl.cpp(01874)] :[TRAN START]
[11/07 15:32:11:668      DevApl.cpp(01878)] :fnAPL_SetTranStart : AP Country Code = [U]
[11/07 15:32:11:903      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[10000000])
[11/07 15:32:11:903      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:32:11:903 TranMainProc.cp(00141)] :fnAPP_MainTranProc(20)
[11/07 15:32:11:918 TranMainProc.cp(00182)] :TranStatus[20]
[11/07 15:32:11:918 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[20]
[11/07 15:32:11:934      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[TRAN||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:32:11:950      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:32:11:950 TranMainProc.cp(00336)] :Scan Screen Input....
[11/07 15:32:11:981      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[44], nScanTime[0], nEventKind[1]):return(4)
[11/07 15:32:11:981 TranDevProc.cpp(01265)] :fnAPD_CardReadCheck()
[11/07 15:32:11:997      DevCmn.cpp(01269)] :fnMCU_Read()
[11/07 15:32:11:997      DevCmn.cpp(01278)] :fnMCU_Read():return(0)
[11/07 15:32:12:043      DevCmn.cpp(01020)] :fstrMCU_GetCardData()
[11/07 15:32:12:043 TranDevProc.cpp(01350)] :fnAPD_CardReadCheck:TrInfo[2]
[11/07 15:32:12:043 TranDevProc.cpp(01433)] :fnAPD_CardReadCheck:CardAccountNo LEN[19]
[11/07 15:32:12:059 TranDevProc.cpp(01498)] :fnAPD_CardReadCheck():return OK
[11/07 15:32:12:059 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:32:12:090      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:32:12:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:12:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:12:122      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:32:12:122      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:32:12:122      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:32:12:137      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:32:12:137 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:32:12:137 TranReversalPro(00522)] :fnAPP_TramReversalFlagOFF() : REVERSAL FLAG >> OFF
[11/07 15:32:12:153 TranMenuProc.cp(00915)] :CUSTOM LOGO CHECK : Extra Bin List Number=[0]
[11/07 15:32:12:153 TranInputProc.c(00079)] :fnAPP_SelectLanguage()
[11/07 15:32:12:184 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[bf], nPinInputMode[2], strBtn[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], strBtnEvent[SPANISH|ENGLISH|CHINESE|FRENCH|JAPANESE|KOREAN|X|EXIT], nScrNo[104])
[11/07 15:32:12:184 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:32:12:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:32:12:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:32:12:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:32:12:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:32:12:184 TranMenuProc.cp(00583)] :Screen#[104], Data:ID[1], Type[0], Content[SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:32:12:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT])
[11/07 15:32:12:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/SPANISH,ENGLISH,CHINESE,FRENCH,JAPANESE,KOREAN,X,EXIT]
[11/07 15:32:12:184      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:32:12:184      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:32:12:184      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD104.swf)
[11/07 15:32:12:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:12:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:12:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD104.swf])
[11/07 15:32:12:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD104.swf]
[11/07 15:32:12:184      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:12:184      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(104)
[11/07 15:32:12:184       Sound.cpp(00148)] :Stop
[11/07 15:32:12:184       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:12:184      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:12:184      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:12:184      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:12:184      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:32:12:184   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:12:184   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:12:184      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:32:12:184      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:32:12:590      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[104], nInputSec[0]):return(0)
[11/07 15:32:13:793   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[LANGUAGE/ENGLISH]
[11/07 15:32:13:793   WinAtmCtl.cpp(01145)] :SetScreenDataName=(LANGUAGE),SetScreenDataValue=(ENGLISH)
[11/07 15:32:13:793      DevScr.cpp(00164)] :fnSCR_SetData(szSetDataName[LANGUAGE], szSetDataValue[ENGLISH])
[11/07 15:32:13:793      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:32:14:065      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:32:14:065 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:32:14:066 TranMenuProc.cp(00637)] :GetKeyStr=[ENGLISH]
[11/07 15:32:14:066 TranMenuProc.cp(00699)] :Pressed Button ID=[2]
[11/07 15:32:14:067 TranInputProc.c(00193)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:32:14:067   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:32:14:067   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:32:14:067 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(2)
[11/07 15:32:14:068 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:32:14:068 TranInputProc.c(00212)] :fnAPP_EnterPIN()
[11/07 15:32:14:087 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[700], nPinInputMode[6], strBtn[X|X|X|X|X|X|X|EXIT], strBtnEvent[X|X|X|X|X|X|X|EXIT], nScrNo[102])
[11/07 15:32:14:087 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [45]
[11/07 15:32:14:087   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:32:14:088   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:32:14:088   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState2], szDataValue [off])
[11/07 15:32:14:089   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState2/off]
[11/07 15:32:14:089   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:32:14:089   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:32:14:090   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState4], szDataValue [off])
[11/07 15:32:14:090   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState4/off]
[11/07 15:32:14:091   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:32:14:091   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:32:14:092   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState6], szDataValue [off])
[11/07 15:32:14:092   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState6/off]
[11/07 15:32:14:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:32:14:093   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:32:14:093   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:32:14:094   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:32:14:094   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:32:14:094   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:32:14:095      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0], nPinInputMode[6], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:32:14:095      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:32:14:095      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD102.swf)
[11/07 15:32:14:096   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:14:096   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:14:096   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD102.swf])
[11/07 15:32:14:096   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD102.swf]
[11/07 15:32:14:097      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:14:097      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(102)
[11/07 15:32:14:097       Sound.cpp(00148)] :Stop
[11/07 15:32:14:098       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:14:098      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:14:098      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:14:098      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:14:098      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[6]
[11/07 15:32:14:099   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:14:099   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:14:100      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[2], nMinKeyCount[4], nMaxKeyCount[12], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[ENTER,CANCEL], szCardData[], nTimeout[-1])
[11/07 15:32:14:100      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:32:14:406      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[102], nInputSec[0]):return(0)
[11/07 15:32:24:721   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:32:24:721   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:32:24:722   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:32:24:722   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:32:24:722   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:32:24:808   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:32:24:808   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:32:24:808   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:32:24:808   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:32:24:808   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:32:24:958   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:32:24:958   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:32:24:958   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:32:24:958   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:32:24:958   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:32:25:132   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[0])
[11/07 15:32:25:132   WinAtmCtl.cpp(00431)] :OnDisplayPinpadData(szDataValue[*])
[11/07 15:32:25:133   WinAtmCtl.cpp(00891)] :strDataValue[0])
[11/07 15:32:25:133   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:32:25:133   WinAtmCtl.cpp(00935)] :VirtualKeyCode[30])
[11/07 15:32:25:579   WinAtmCtl.cpp(00425)] :OnDisplayPinpadData(strDataValue[ENTER])
[11/07 15:32:25:579   WinAtmCtl.cpp(00433)] :OnDisplayPinpadData(szDataValue[ENTER])
[11/07 15:32:25:579   WinAtmCtl.cpp(00891)] :strDataValue[ENTER])
[11/07 15:32:25:579   WinAtmCtl.cpp(00892)] :Asc2Int(strDataValue)[0])
[11/07 15:32:25:579   WinAtmCtl.cpp(00935)] :VirtualKeyCode[d])
[11/07 15:32:25:614   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[PIN/0000]
[11/07 15:32:25:614   WinAtmCtl.cpp(01145)] :SetScreenDataName=(PIN),SetScreenDataValue=(0000)
[11/07 15:32:25:614      DevScr.cpp(00162)] :fnSCR_SetData(szSetDataName[PIN], szSetDataValue[*])
[11/07 15:32:25:615      DevScr.cpp(00170)] :fnSCR_SetData(...):return(0)
[11/07 15:32:25:763      DevCmn.cpp(06284)] :fnCMN_ScanDeviceAction(nDevId[40], nScanTime[0], nEventKind[1]):return(40)
[11/07 15:32:25:763 TranMenuProc.cp(00891)] :fnAPP_WaitDeviceEvent(): CheckDev[64], m_pDevCmn->DeviceTran[64]
[11/07 15:32:25:764 TranMenuProc.cp(00637)] :GetKeyStr=[0000]
[11/07 15:32:25:764 TranMenuProc.cp(00676)] :Password Mode Input=[0000]   return OK
[11/07 15:32:25:764 TranInputProc.c(00224)] :fnAPP_DisplayTransactionScreen() = [0]
[11/07 15:32:25:765      DevCmn.cpp(05149)] :fstrPIN_GetPinKeyData()
[11/07 15:32:25:822 TranInputProc.c(00251)] :fnAPP_EnterPIN() = [0] return
[11/07 15:32:25:822 TranInputProc.c(00257)] :fnAPP_SelectBalanceAtFirst()
[11/07 15:32:25:822 TranInputProc.c(00307)] :fnAPP_DualBalanceInquiry()
[11/07 15:32:25:822 TranMenuProc.cp(00505)] :fnAPP_DisplayTransactionScreen(nBtnSet[1aa], nPinInputMode[2], strBtn[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], strBtnEvent[X|BOTH|X|CHECKING|X|SAVINGS|X|MAINMENU], nScrNo[163])
[11/07 15:32:25:823 TranMenuProc.cp(00532)] :fnAPP_DisplayTransactionScreen : Time Out = [30]
[11/07 15:32:25:823   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState1], szDataValue [off])
[11/07 15:32:25:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState1/off]
[11/07 15:32:25:824   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState3], szDataValue [off])
[11/07 15:32:25:824   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState3/off]
[11/07 15:32:25:825   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState5], szDataValue [off])
[11/07 15:32:25:825   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState5/off]
[11/07 15:32:25:826   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState7], szDataValue [off])
[11/07 15:32:25:826   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState7/off]
[11/07 15:32:25:827   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState9], szDataValue [off])
[11/07 15:32:25:827   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState9/off]
[11/07 15:32:25:827 TranMenuProc.cp(00583)] :Screen#[163], Data:ID[20], Type[0], Content[DISABLE]
[11/07 15:32:25:828   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue20], szDataValue [DISABLE])
[11/07 15:32:25:828   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue20/DISABLE]
[11/07 15:32:25:828      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0], nPinInputMode[2], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:32:25:829      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:32:25:844      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:32:25:844      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:32:25:845   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:25:845   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:25:845      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:32:25:845      DevScr.cpp(00356)] :fstrSCR_GetCheckScreen(...) 2 (C:\NHAtm\App\SWF\NHD163.swf)
[11/07 15:32:25:846      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return()
[11/07 15:32:25:846      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:25:846      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(163)
[11/07 15:32:25:846       Sound.cpp(00148)] :Stop
[11/07 15:32:25:847       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:25:847      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:25:847      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:25:847      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:25:847      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[2]
[11/07 15:32:25:848   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:25:848   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:25:849      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[CANCEL,F1,F2,F3,F4,F5,F6,F7,F8], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:32:25:849      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:32:25:852      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[163], nInputSec[0]):return(0)
[11/07 15:32:56:056 TranMenuProc.cp(00731)] :fnAPP_DisplayTransactionScreen() return T_TIMEOVER
[11/07 15:32:56:056 TranInputProc.c(00328)] :fnAPP_DisplayTransactionScreen() = [3]
[11/07 15:32:56:056 TranTermProc.cp(01085)] :fnAPP_CancelTransaction(RemoveHP=[1])
[11/07 15:32:56:056 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 15:32:56:072      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 15:32:56:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:56:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:56:087      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 15:32:56:087      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 15:32:56:087      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 15:32:56:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:32:56:103 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:32:56:103 TranHostProc.cp(05075)] :fnAPP_SendEventNotice(10)
[11/07 15:32:56:103 TranHostProc.cp(05079)] :IsOtherOptionAvailable(_OTHER_OPTION_EVENTNOTICE) IS FALSE
[11/07 15:32:56:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 15:32:56:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 15:32:56:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 15:32:56:119      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 15:32:56:119      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:32:56:119      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:32:56:119      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD004.swf)
[11/07 15:32:56:119   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:32:56:119   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:32:56:119   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD004.swf])
[11/07 15:32:56:119   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD004.swf]
[11/07 15:32:56:119      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:32:56:119      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(4)
[11/07 15:32:56:119       Sound.cpp(00148)] :Stop
[11/07 15:32:56:119       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:32:56:119      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:32:56:119      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:32:56:119      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:32:56:134      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 15:32:56:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:32:56:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:32:56:134      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 15:32:56:525      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 15:32:56:525      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[4], nInputSec[0]):return(0)
[11/07 15:33:00:431 TranTermProc.cp(01155)] :fnAPP_RemoveEarPhone()
[11/07 15:33:00:431 TranTermProc.cp(01158)] :fnAPP_RemoveEarPhone() return.... NO Earphone
[11/07 15:33:00:431 TranTermProc.cp(01123)] :fnAPP_CancelTransaction() return
[11/07 15:33:00:431 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 15:33:00:431 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 15:33:00:431 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 15:33:00:431 TranDevProc.cpp(00269)] :fnAPD_PinEnDisable(Action[2], InitFlag[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[12], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL], WaitFlag[0])
[11/07 15:33:00:431 TranDevProc.cpp(00290)] :fnAPD_PinEnDisable(...):return
[11/07 15:33:00:431 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 15:33:00:478 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 15:33:00:478 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(0)
[11/07 15:33:00:744   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:33:00:744   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:33:00:744      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:33:00:744 AtmModeCtrl.cpp(01844)] :End of Transaction
[11/07 15:33:00:744 AtmModeCtrl.cpp(01865)] :End of Reversal and Config
[11/07 15:33:00:744 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:33:00:744 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:33:00:744 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:33:00:744 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:33:00:791      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||ON||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:33:00:791 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 15:33:00:947 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_TRAN       ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 15:33:00:947 AtmModeCtrl.cpp(01282)] :GetMemorySize[17031168]
[11/07 15:33:00:947 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 15:33:00:947      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 15:33:00:947      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 15:33:00:947   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 15:33:00:947   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 15:33:00:947   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 15:33:00:947   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 15:33:00:947 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 15:33:00:947 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 15:33:00:978      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 15:33:00:978      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 15:33:00:994      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 15:33:00:994      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 15:33:00:994      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 15:33:00:994      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 15:33:00:994      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 15:33:00:994 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 15:33:00:994 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 15:33:00:994 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 15:33:00:994 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 15:33:01:212      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 15:33:01:431      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 15:33:01:431      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 15:33:01:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 15:33:01:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 15:33:01:431 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 15:33:01:556     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 15:33:01:556     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 15:33:01:556     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 15:33:01:556     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 15:33:01:556     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 15:33:01:556     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:33:01:619     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 15:33:01:634     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 15:33:01:634     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 15:33:01:634 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 15:33:01:634 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 15:33:01:634      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:33:01:650   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 15:33:01:650   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 15:33:01:650   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 15:33:01:650   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 15:33:01:650 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 15:33:01:666      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 15:33:01:666      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 15:33:01:666   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:33:01:666   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:33:01:681      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 15:33:01:681      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 15:33:01:681      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 15:33:01:697      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 15:33:01:697 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 15:33:01:697   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 15:33:01:697   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 15:33:01:697   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 15:33:01:697   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 15:33:01:697   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 15:33:01:697   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 15:33:01:697 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 15:33:01:697      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 15:33:01:697      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:33:01:697      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 15:33:01:697   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 15:33:01:697   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 15:33:01:697   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 15:33:01:697   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 15:33:01:697      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 15:33:01:697      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 15:33:01:697       Sound.cpp(00148)] :Stop
[11/07 15:33:01:697       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 15:33:01:697      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 15:33:01:697      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 15:33:01:697      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 15:33:01:697      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 15:33:01:697   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 15:33:01:697   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 15:33:01:697      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 15:33:01:697      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 15:33:01:697      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 15:33:03:369 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 17:32:02:314 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[7201], m_pDevCmn->m_DelayTime=[7200]
[11/07 17:32:02:314 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 17:32:02:330      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 17:32:02:330   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 17:32:02:330   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 17:32:02:345      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 17:32:02:345      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 17:32:02:345      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 17:32:02:455      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 17:32:02:455 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 17:32:02:455 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[7201], m_DelayTime=[7200]
[11/07 17:32:02:486 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_CUSTOM     )
[11/07 17:32:02:486 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 17:32:02:486 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 17:32:02:517 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 17:32:02:517 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 17:32:02:517 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 17:32:02:517 TranMainProc.cp(01138)] :TranCode:[0]
[11/07 17:32:02:517 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 17:32:02:517      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 17:32:02:517      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 17:32:02:517      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 17:32:02:533      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 17:32:02:533     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 17:32:02:533     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 17:32:02:533     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 17:32:02:658     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 17:32:02:673     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 17:32:02:673     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 17:32:02:673 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 17:32:02:673      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 17:32:03:048      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 17:32:03:064 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 17:32:03:064 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 17:32:03:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 17:32:03:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 17:32:03:064      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 17:32:03:064      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 17:32:03:064      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 17:32:03:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 17:32:03:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 17:32:03:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 17:32:03:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 17:32:03:064      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 17:32:03:064      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 17:32:03:064       Sound.cpp(00148)] :Stop
[11/07 17:32:03:064       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 17:32:03:064      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 17:32:03:064      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 17:32:03:064      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 17:32:03:064      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 17:32:03:064   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 17:32:03:064   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 17:32:03:064      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 17:32:03:455      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 17:32:03:455      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 17:32:04:236 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 17:32:04:236 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 17:32:04:236 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 17:32:04:236 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 17:32:04:236 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 17:32:04:236 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 17:32:04:236 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 17:32:04:236 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 17:32:04:236 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 17:32:04:236 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 17:32:04:236 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 17:32:04:283 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 17:32:04:283      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 17:32:04:283      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 17:32:04:283 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 17:32:04:283 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 17:32:04:283 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 17:32:04:283 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 17:32:04:283 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 17:32:04:283 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 17:32:04:283 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 17:32:04:283 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 17:32:04:283 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 17:32:04:298      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 17:32:04:298 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 17:32:04:298     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 17:32:04:298     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 17:32:04:298  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 17:32:04:298       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 17:32:04:298    CESocket.cpp(00116)] :Create() start

[11/07 17:32:04:298    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 17:32:04:298    CESocket.cpp(00220)] :Connect() start - socket:576 address: 192.168.198.199 port: 45000
[11/07 17:32:04:314    CESocket.cpp(00441)] :Connect() OK
[11/07 17:32:04:314    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 17:32:04:314  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 17:32:04:314  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 17:32:04:314  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 17:32:04:314  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 17:32:04:314    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 17:32:05:845    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 17:32:05:845    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 17:32:05:845       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 17:32:05:876  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 17:32:05:876    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 17:32:05:876       TCPIP.cpp(00091)] :LineSendData
[11/07 17:32:05:876    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 17:32:05:876    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 17:32:05:876  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 17:32:05:908    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 17:32:05:908    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 17:32:05:908       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 17:32:06:033  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 17:32:06:033    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 17:32:06:126    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 17:32:06:126    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 17:32:06:126       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 17:32:06:189  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 17:32:06:189    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 17:32:06:189  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 17:32:06:189    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 17:32:06:189       TCPIP.cpp(00091)] :LineSendData
[11/07 17:32:06:189    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 17:32:06:189    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 17:32:06:220    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 17:32:06:220    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 17:32:06:220       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 17:32:06:345  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 17:32:06:345    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 17:32:06:345       TCPIP.cpp(00091)] :LineSendData
[11/07 17:32:06:345    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 17:32:06:345    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 17:32:06:361       TCPIP.cpp(00082)] :line close start
[11/07 17:32:06:376    CESocket.cpp(00463)] :Disconnect() End

[11/07 17:32:06:361    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 17:32:06:376     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 17:32:06:376    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 17:32:06:376    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 17:32:06:376      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 17:32:06:376    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 17:32:06:376   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 17:32:06:376   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 17:32:06:376      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 17:32:06:376 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 17:32:06:376 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 17:32:06:376 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 17:32:06:376  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 17:32:06:376     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 17:32:06:376      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 17:32:06:376 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 17:32:06:376      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 17:32:06:376   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 17:32:06:376   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 17:32:06:376      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 17:32:06:376 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 17:32:06:376 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 17:32:06:376 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 17:32:06:376 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 17:32:06:376 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 17:32:06:376 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 17:32:06:376 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 17:32:06:376 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 17:32:06:376      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 17:32:06:595      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 17:32:06:611 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 17:32:06:611 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 17:32:06:611 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 17:32:06:611 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 17:32:06:611 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 17:32:06:658 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 17:32:06:658 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 17:32:06:658 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 17:32:06:658 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 17:32:06:658 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 17:32:06:658 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 17:32:06:658 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 17:32:06:658 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 17:32:06:658 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 17:32:06:658 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 17:32:06:658      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 17:32:06:814 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 17:32:06:814      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 17:32:06:814      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 17:32:06:814 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 17:32:06:814 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 17:32:06:814      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 17:32:06:814      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 17:32:07:048      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 17:32:07:267      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 17:32:07:267      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 17:32:07:267   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 17:32:07:267   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 17:32:07:267      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 17:32:07:267   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 17:32:07:283   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 17:32:07:298      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 17:32:07:298      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 17:32:07:298      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 17:32:07:298      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 17:32:07:298      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 17:32:07:298      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 17:32:07:298      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 17:32:07:298      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 17:32:07:298      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 17:32:07:298      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 17:32:07:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 17:32:07:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 17:32:07:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 17:32:07:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 17:32:07:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 17:32:07:314      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 17:32:07:345      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 17:32:07:345 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 17:32:07:345 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 17:32:07:345 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 17:32:07:345 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 17:32:07:345 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 17:32:07:345      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 17:32:07:345      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 17:32:07:345      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 17:32:07:345      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 17:32:07:345      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 17:32:07:345       Sound.cpp(00148)] :Stop
[11/07 17:32:07:345       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 17:32:07:345      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 17:32:07:345      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 17:32:07:345      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 17:32:07:345      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 17:32:07:345   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 17:32:07:345   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 17:32:07:345      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 17:32:07:345      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 17:32:07:345      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 17:32:08:908      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 17:32:08:908 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 17:32:09:017 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 17:32:09:033      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 17:32:09:189 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 17:32:09:189 AtmModeCtrl.cpp(01282)] :GetMemorySize[12836864]
[11/07 17:32:09:189 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 17:32:09:189      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 17:32:09:189      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 17:32:09:189   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 17:32:09:189   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 17:32:09:189   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 17:32:09:189   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 17:32:09:189 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 17:32:09:189 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 17:32:09:220      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 17:32:09:220      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 17:32:09:236      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 17:32:09:236      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 17:32:09:236      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 17:32:09:236      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 17:32:09:236      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 17:32:09:236 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 17:32:09:236 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 17:32:09:236 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 17:32:09:236 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 17:32:09:517      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 17:32:09:751      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 17:32:09:751   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 17:32:09:751   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 17:32:09:751 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 17:32:09:814     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 17:32:09:814     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 17:32:09:814     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 17:32:09:814     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 17:32:09:814     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 17:32:09:814     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 17:32:09:845     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 17:32:09:876     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 17:32:09:876     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 17:32:09:876 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 17:32:09:876 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 17:32:09:876      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 17:32:09:876   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 17:32:09:876   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 17:32:09:876   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 17:32:09:876   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 17:32:09:892 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 17:32:09:908      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 17:32:09:908      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 17:32:09:908   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 17:32:09:908   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 17:32:09:923      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 17:32:09:923      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 17:32:09:923      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 17:32:09:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 17:32:09:939 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 17:32:09:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 17:32:09:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 17:32:09:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 17:32:09:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 17:32:09:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 17:32:09:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 17:32:09:939 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 17:32:09:939      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 17:32:09:939      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 17:32:09:939      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 17:32:09:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 17:32:09:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 17:32:09:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 17:32:09:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 17:32:09:939      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 17:32:09:939      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 17:32:09:939       Sound.cpp(00148)] :Stop
[11/07 17:32:09:939       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 17:32:09:939      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 17:32:09:939      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 17:32:09:939      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 17:32:09:939      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 17:32:09:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 17:32:09:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 17:32:09:939      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 17:32:09:939      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 17:32:10:314      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 19:31:46:134 TranNmsProc.cpp(00508)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime_RMS()=[14400], m_pDevCmn->m_DelayTime=[14400]
[11/07 19:31:46:134 TranNmsProc.cpp(00509)] :IniGetInt(_ATMINFO_PATH, _APPFLD_RMS, _APPKEY_RMSSENDINTERVAL), 4) = 4, IniGetInt(_ATMINFO_PATH, _APPFLD_RMS, _APPKEY_RMSSTATUSSEND) = 1
[11/07 19:31:46:134 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 19:31:46:150      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 19:31:46:150   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:31:46:150   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:31:46:166      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 19:31:46:166      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 19:31:46:166      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 19:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 19:31:46:259 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 19:31:46:259      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 19:31:46:259 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 19:31:46:259 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 19:31:46:259 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:31:46:259 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:31:46:259 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:31:46:259 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 19:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 19:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 19:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 19:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 19:31:46:447 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 19:31:46:447 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 19:31:46:447 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:31:46:447 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:31:46:447 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 19:31:46:447   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 19:31:46:447   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 19:31:46:447   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 19:31:46:447   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 19:31:46:447   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 19:31:46:447   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 19:31:46:447      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 19:31:46:447      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 19:31:46:447      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 19:31:46:447   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 19:31:46:447   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 19:31:46:447   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 19:31:46:447   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 19:31:46:447      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 19:31:46:447      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 19:31:46:447       Sound.cpp(00148)] :Stop
[11/07 19:31:46:447       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 19:31:46:447      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 19:31:46:447      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 19:31:46:447      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 19:31:46:447      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 19:31:46:447   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:31:46:447   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:31:46:447      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 19:31:46:837      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 19:31:46:837      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 19:31:48:400 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 19:31:48:400 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 19:31:48:556 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 19:31:48:556      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 19:31:48:556      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 19:31:48:556 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 19:31:48:556 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 19:31:48:556      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 19:31:48:556      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 19:31:48:775      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 19:31:48:994      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 19:31:48:994      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 19:31:48:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 19:31:48:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 19:31:48:994      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 19:31:49:009   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:31:49:009   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:31:49:025      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 19:31:49:025      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 19:31:49:025      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 19:31:49:025      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 19:31:49:025      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 19:31:49:025      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 19:31:49:025      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 19:31:49:025      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 19:31:49:025      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 19:31:49:025      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 19:31:49:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 19:31:49:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 19:31:49:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 19:31:49:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 19:31:49:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 19:31:49:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 19:31:49:072      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 19:31:49:072 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:31:49:072 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:31:49:072 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:31:49:072 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:31:49:072 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 19:31:49:072      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 19:31:49:072      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 19:31:49:072      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 19:31:49:072      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 19:31:49:072      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 19:31:49:072       Sound.cpp(00148)] :Stop
[11/07 19:31:49:072       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 19:31:49:072      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 19:31:49:072      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 19:31:49:072      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 19:31:49:072      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 19:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:31:49:072      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 19:31:49:072      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 19:31:49:072      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 19:31:50:634      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 19:31:50:634 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 19:31:50:728 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 19:31:50:744      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 19:31:50:744 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 19:31:50:900 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 19:31:50:900 AtmModeCtrl.cpp(01282)] :GetMemorySize[12836864]
[11/07 19:31:50:900 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 19:31:50:900      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 19:31:50:900      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 19:31:50:900   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 19:31:50:900   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 19:31:50:900   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 19:31:50:900   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 19:31:50:900 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 19:31:50:900 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 19:31:50:916      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 19:31:50:916      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 19:31:50:947      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 19:31:50:947      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 19:31:50:947      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 19:31:50:947      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 19:31:50:947      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 19:31:50:947 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:31:50:947 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:31:50:947 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:31:50:947 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:31:51:181      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 19:31:51:416      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 19:31:51:416   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 19:31:51:416   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 19:31:51:416 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 19:31:51:572     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 19:31:51:572     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 19:31:51:572     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 19:31:51:572     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 19:31:51:572     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 19:31:51:572     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 19:31:51:666     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 19:31:51:712     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 19:31:51:712     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 19:31:51:712 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 19:31:51:712 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 19:31:51:712      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 19:31:51:728   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 19:31:51:728   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 19:31:51:728   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 19:31:51:728   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 19:31:51:728 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 19:31:51:744      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 19:31:51:744      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 19:31:51:744   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:31:51:744   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:31:51:759      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 19:31:51:759      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 19:31:51:759      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 19:31:51:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 19:31:51:775 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 19:31:51:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 19:31:51:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 19:31:51:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 19:31:51:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 19:31:51:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 19:31:51:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 19:31:51:775 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 19:31:51:775      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 19:31:51:775      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 19:31:51:775      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 19:31:51:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 19:31:51:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 19:31:51:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 19:31:51:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 19:31:51:775      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 19:31:51:775      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 19:31:51:775       Sound.cpp(00148)] :Stop
[11/07 19:31:51:775       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 19:31:51:775      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 19:31:51:775      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 19:31:51:775      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 19:31:51:775      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 19:31:51:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:31:51:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:31:51:775      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 19:31:51:775      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 19:31:52:166      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 19:31:53:853 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 19:32:07:150 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[7201], m_pDevCmn->m_DelayTime=[7200]
[11/07 19:32:07:150 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 19:32:07:166      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 19:32:07:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:32:07:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:32:07:181      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 19:32:07:181      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 19:32:07:181      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 19:32:07:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 19:32:07:259 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 19:32:07:259 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[7201], m_DelayTime=[7200]
[11/07 19:32:07:291 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_CUSTOM     )
[11/07 19:32:07:291 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 19:32:07:291 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 19:32:07:322 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 19:32:07:322 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 19:32:07:322 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 19:32:07:322 TranMainProc.cp(01138)] :TranCode:[0]
[11/07 19:32:07:322 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 19:32:07:322 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 19:32:07:322 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 19:32:07:322 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:32:07:431 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:32:07:611 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 19:32:07:611 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 19:32:07:611      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 19:32:07:611      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 19:32:07:611      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 19:32:07:619      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 19:32:07:619      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 19:32:07:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 19:32:07:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 19:32:07:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 19:32:07:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 19:32:07:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 19:32:07:626      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 19:32:07:634     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 19:32:07:634     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 19:32:07:634     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 19:32:07:689     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 19:32:07:728     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 19:32:07:728     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 19:32:07:728 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 19:32:07:728      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 19:32:07:978      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 19:32:07:994 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 19:32:07:994 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 19:32:07:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 19:32:07:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 19:32:07:994      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 19:32:07:994      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 19:32:07:994      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 19:32:07:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 19:32:07:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 19:32:08:001   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 19:32:08:001   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 19:32:08:001      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 19:32:08:001      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 19:32:08:001       Sound.cpp(00148)] :Stop
[11/07 19:32:08:001       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 19:32:08:001      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 19:32:08:001      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 19:32:08:001      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 19:32:08:001      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 19:32:08:001   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:32:08:001   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:32:08:001      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 19:32:08:345      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 19:32:08:345      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 19:32:09:126 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 19:32:09:126 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 19:32:09:126 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 19:32:09:126 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 19:32:09:126 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 19:32:09:126 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 19:32:09:126 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 19:32:09:126 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 19:32:09:126 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 19:32:09:126 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 19:32:09:126 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 19:32:09:166 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 19:32:09:166      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 19:32:09:166      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 19:32:09:166 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 19:32:09:166 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 19:32:09:166 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 19:32:09:166 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 19:32:09:166 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 19:32:09:166 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 19:32:09:166 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 19:32:09:166 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 19:32:09:166 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 19:32:09:181      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 19:32:09:189 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 19:32:09:189     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 19:32:09:189     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 19:32:09:189  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 19:32:09:189       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 19:32:09:189    CESocket.cpp(00116)] :Create() start

[11/07 19:32:09:189    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 19:32:09:189    CESocket.cpp(00220)] :Connect() start - socket:776 address: 192.168.198.199 port: 45000
[11/07 19:32:09:212    CESocket.cpp(00441)] :Connect() OK
[11/07 19:32:09:212    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 19:32:09:212  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 19:32:09:212  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 19:32:09:212  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 19:32:09:212  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 19:32:09:212    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 19:32:10:783    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 19:32:10:783    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 19:32:10:783       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 19:32:10:939  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 19:32:10:939    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 19:32:10:939       TCPIP.cpp(00091)] :LineSendData
[11/07 19:32:10:939    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 19:32:10:939    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 19:32:10:939  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 19:32:11:017    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 19:32:11:017    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 19:32:11:017       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 19:32:11:095  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 19:32:11:095    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 19:32:11:220    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 19:32:11:220    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 19:32:11:220       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 19:32:11:251  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 19:32:11:251    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 19:32:11:251  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 19:32:11:251    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 19:32:11:251       TCPIP.cpp(00091)] :LineSendData
[11/07 19:32:11:251    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 19:32:11:251    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 19:32:11:314    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 19:32:11:314    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 19:32:11:314       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 19:32:11:408  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 19:32:11:408    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 19:32:11:408       TCPIP.cpp(00091)] :LineSendData
[11/07 19:32:11:408    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 19:32:11:408    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 19:32:11:423       TCPIP.cpp(00082)] :line close start
[11/07 19:32:11:423    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 19:32:11:423    CESocket.cpp(00463)] :Disconnect() End

[11/07 19:32:11:423    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 19:32:11:423     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 19:32:11:423    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 19:32:11:423    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 19:32:11:423      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 19:32:11:423   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 19:32:11:423   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 19:32:11:423      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 19:32:11:423 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 19:32:11:423 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 19:32:11:423 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 19:32:11:423  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 19:32:11:423     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 19:32:11:439      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 19:32:11:439 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 19:32:11:439      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 19:32:11:439   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 19:32:11:439   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 19:32:11:439      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 19:32:11:439 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 19:32:11:439 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 19:32:11:439 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 19:32:11:439 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 19:32:11:439 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 19:32:11:439 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 19:32:11:439 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 19:32:11:439 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 19:32:11:439      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 19:32:11:689      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 19:32:11:705 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 19:32:11:705 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 19:32:11:705 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 19:32:11:705 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 19:32:11:705 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 19:32:11:767 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 19:32:11:767 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:32:11:767 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:32:11:767 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:32:11:767 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:32:11:767 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 19:32:11:767 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:32:11:767 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:32:11:767 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:32:11:767 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:32:11:767      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 19:32:11:923 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 19:32:11:923      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 19:32:11:923      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 19:32:11:923 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 19:32:11:923 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 19:32:11:923      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 19:32:11:923      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 19:32:12:173      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 19:32:12:376      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 19:32:12:376      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 19:32:12:376   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 19:32:12:376   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 19:32:12:392      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 19:32:12:392   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:32:12:392   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:32:12:408      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 19:32:12:408      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 19:32:12:408      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 19:32:12:408      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 19:32:12:408      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 19:32:12:408      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 19:32:12:408      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 19:32:12:408      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 19:32:12:408      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 19:32:12:408      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 19:32:12:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 19:32:12:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 19:32:12:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 19:32:12:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 19:32:12:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 19:32:12:423      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 19:32:12:455      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 19:32:12:455 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:32:12:455 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:32:12:455 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:32:12:455 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:32:12:455 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 19:32:12:455      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 19:32:12:455      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 19:32:12:455      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 19:32:12:455      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 19:32:12:455      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 19:32:12:455       Sound.cpp(00148)] :Stop
[11/07 19:32:12:455       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 19:32:12:455      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 19:32:12:455      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 19:32:12:455      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 19:32:12:455      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 19:32:12:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:32:12:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:32:12:455      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 19:32:12:455      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 19:32:12:455      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 19:32:14:033      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 19:32:14:033 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 19:32:14:142 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 19:32:14:158      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 19:32:14:158 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 19:32:14:314 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 19:32:14:314 AtmModeCtrl.cpp(01282)] :GetMemorySize[14934016]
[11/07 19:32:14:314 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 19:32:14:314      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 19:32:14:314      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 19:32:14:314   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 19:32:14:314   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 19:32:14:314   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 19:32:14:314   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 19:32:14:314 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 19:32:14:314 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 19:32:14:345      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 19:32:14:345      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 19:32:14:361      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 19:32:14:361      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 19:32:14:361      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 19:32:14:361      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 19:32:14:361      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 19:32:14:361 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 19:32:14:361 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 19:32:14:361 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 19:32:14:361 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 19:32:14:580      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 19:32:14:798      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 19:32:14:798   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 19:32:14:798   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 19:32:14:798 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 19:32:14:861     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 19:32:14:861     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 19:32:14:861     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 19:32:14:861     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 19:32:14:861     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 19:32:14:861     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 19:32:14:908     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 19:32:14:923     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 19:32:14:923     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 19:32:14:923 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 19:32:14:939 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 19:32:14:939      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 19:32:14:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 19:32:14:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 19:32:14:939   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 19:32:14:939   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 19:32:14:939 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 19:32:14:955      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 19:32:14:955      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 19:32:14:955   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:32:14:955   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:32:14:970      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 19:32:14:970      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 19:32:14:970      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 19:32:14:986      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 19:32:14:986 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 19:32:14:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 19:32:14:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 19:32:14:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 19:32:14:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 19:32:14:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 19:32:14:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 19:32:14:986 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 19:32:14:986      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 19:32:14:986      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 19:32:14:986      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 19:32:14:986   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 19:32:14:986   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 19:32:14:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 19:32:14:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 19:32:14:994      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 19:32:14:994      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 19:32:14:994       Sound.cpp(00148)] :Stop
[11/07 19:32:14:994       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 19:32:14:994      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 19:32:14:994      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 19:32:14:994      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 19:32:14:994      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 19:32:14:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 19:32:14:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 19:32:14:994      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 19:32:14:994      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 19:32:15:345      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 19:32:16:525 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
[11/07 21:32:11:439 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[7200], m_pDevCmn->m_DelayTime=[7200]
[11/07 21:32:11:439 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 21:32:11:455      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 21:32:11:455   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 21:32:11:455   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 21:32:11:470      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 21:32:11:470      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 21:32:11:470      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 21:32:11:564      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 21:32:11:564 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 21:32:11:564 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[7200], m_DelayTime=[7200]
[11/07 21:32:11:595 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_CUSTOM     )
[11/07 21:32:11:595 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 21:32:11:595 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 21:32:11:689 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 21:32:11:689 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 21:32:11:689 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 21:32:11:689 TranMainProc.cp(01138)] :TranCode:[0]
[11/07 21:32:11:689 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 21:32:11:689      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 21:32:11:689      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 21:32:11:689      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 21:32:11:705      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 21:32:11:705     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 21:32:11:705     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 21:32:11:705     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 21:32:11:798     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 21:32:11:814     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 21:32:11:814     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 21:32:11:814 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 21:32:11:814      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 21:32:12:017      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 21:32:12:033 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 21:32:12:033 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 21:32:12:033   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 21:32:12:033   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 21:32:12:033      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 21:32:12:033      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 21:32:12:033      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 21:32:12:033   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 21:32:12:033   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 21:32:12:033   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 21:32:12:033   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 21:32:12:033      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 21:32:12:033      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 21:32:12:033       Sound.cpp(00148)] :Stop
[11/07 21:32:12:033       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 21:32:12:033      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 21:32:12:033      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 21:32:12:033      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 21:32:12:033      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 21:32:12:033   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 21:32:12:033   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 21:32:12:033      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 21:32:12:423      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 21:32:12:423      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 21:32:13:205 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 21:32:13:205 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 21:32:13:205 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 21:32:13:205 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 21:32:13:205 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 21:32:13:205 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 21:32:13:205 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 21:32:13:205 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 21:32:13:205 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 21:32:13:205 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 21:32:13:205 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 21:32:13:220 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 21:32:13:220      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 21:32:13:220      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 21:32:13:220 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 21:32:13:220 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 21:32:13:220 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 21:32:13:220 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 21:32:13:220 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 21:32:13:220 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 21:32:13:220 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 21:32:13:220 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 21:32:13:220 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 21:32:13:251      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 21:32:13:251 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 21:32:13:251     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 21:32:13:251     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 21:32:13:251  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 21:32:13:251       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 21:32:13:251    CESocket.cpp(00116)] :Create() start

[11/07 21:32:13:251    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 21:32:13:251    CESocket.cpp(00220)] :Connect() start - socket:576 address: 192.168.198.199 port: 45000
[11/07 21:32:13:267    CESocket.cpp(00441)] :Connect() OK
[11/07 21:32:13:267    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 21:32:13:267  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 21:32:13:267  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 21:32:13:267  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 21:32:13:267  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 21:32:13:267    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 21:32:14:876    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 21:32:14:876    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 21:32:14:876       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 21:32:14:986  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 21:32:14:986    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 21:32:14:986       TCPIP.cpp(00091)] :LineSendData
[11/07 21:32:14:986    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 21:32:14:986    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 21:32:14:986  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 21:32:15:111    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 21:32:15:111    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 21:32:15:111       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 21:32:15:142  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 21:32:15:142    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 21:32:15:314    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 21:32:15:314    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 21:32:15:314       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 21:32:15:462  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 21:32:15:462    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 21:32:15:462  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 21:32:15:462    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 21:32:15:462       TCPIP.cpp(00091)] :LineSendData
[11/07 21:32:15:462    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 21:32:15:462    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 21:32:15:556    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 21:32:15:556    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 21:32:15:556       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 21:32:15:619  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 21:32:15:619    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 21:32:15:619       TCPIP.cpp(00091)] :LineSendData
[11/07 21:32:15:619    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 21:32:15:619    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 21:32:15:650       TCPIP.cpp(00082)] :line close start
[11/07 21:32:15:650    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 21:32:15:650    CESocket.cpp(00463)] :Disconnect() End

[11/07 21:32:15:650    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 21:32:15:650     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 21:32:15:650    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 21:32:15:650    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 21:32:15:650      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 21:32:15:650   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 21:32:15:650   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 21:32:15:650      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 21:32:15:650 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 21:32:15:650 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 21:32:15:650 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 21:32:15:650  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 21:32:15:650     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 21:32:15:650      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 21:32:15:650 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 21:32:15:650      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 21:32:15:650   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 21:32:15:650   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 21:32:15:650      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 21:32:15:650 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 21:32:15:650 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 21:32:15:650 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 21:32:15:650 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 21:32:15:650 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 21:32:15:650 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 21:32:15:650 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 21:32:15:650 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 21:32:15:650      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 21:32:15:853      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 21:32:15:869 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 21:32:15:869 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 21:32:15:869 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 21:32:15:869 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 21:32:15:869 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 21:32:15:916 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 21:32:15:916 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 21:32:15:916 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 21:32:15:916 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 21:32:15:916 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 21:32:15:916 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 21:32:15:916 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 21:32:15:916 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 21:32:15:916 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 21:32:15:916 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 21:32:15:916      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 21:32:16:072 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 21:32:16:072      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 21:32:16:072      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 21:32:16:072 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 21:32:16:072 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 21:32:16:072      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 21:32:16:072      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 21:32:16:275      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 21:32:16:478      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 21:32:16:478      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 21:32:16:478   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 21:32:16:478   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 21:32:16:478      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 21:32:16:478   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 21:32:16:478   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 21:32:16:509      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 21:32:16:509      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 21:32:16:509      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 21:32:16:509      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 21:32:16:509      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 21:32:16:509      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 21:32:16:509      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 21:32:16:509      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 21:32:16:509      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 21:32:16:509      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 21:32:16:525      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 21:32:16:525      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 21:32:16:525      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 21:32:16:525      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 21:32:16:525      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 21:32:16:525      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 21:32:16:556      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 21:32:16:556 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 21:32:16:556 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 21:32:16:556 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 21:32:16:556 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 21:32:16:556 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 21:32:16:556      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 21:32:16:556      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 21:32:16:556      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 21:32:16:556      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 21:32:16:556      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 21:32:16:556       Sound.cpp(00148)] :Stop
[11/07 21:32:16:556       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 21:32:16:556      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 21:32:16:556      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 21:32:16:556      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 21:32:16:556      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 21:32:16:556   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 21:32:16:556   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 21:32:16:556      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 21:32:16:556      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 21:32:16:556      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 21:32:18:119      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 21:32:18:119 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 21:32:18:228 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 21:32:18:244      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 21:32:18:400 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 21:32:18:400 AtmModeCtrl.cpp(01282)] :GetMemorySize[12836864]
[11/07 21:32:18:400 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 21:32:18:400      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 21:32:18:400      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 21:32:18:400   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 21:32:18:400   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 21:32:18:400   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 21:32:18:400   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 21:32:18:400 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 21:32:18:400 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 21:32:18:431      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 21:32:18:431      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 21:32:18:447      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 21:32:18:447      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 21:32:18:447      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 21:32:18:447      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 21:32:18:447      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 21:32:18:447 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 21:32:18:447 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 21:32:18:447 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 21:32:18:447 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 21:32:18:681      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 21:32:18:884      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 21:32:18:884   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 21:32:18:884   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 21:32:18:884 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 21:32:18:947     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 21:32:18:947     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 21:32:18:947     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 21:32:18:947     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 21:32:18:947     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 21:32:18:947     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 21:32:18:978     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 21:32:19:009     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 21:32:19:009     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 21:32:19:009 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 21:32:19:009 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 21:32:19:009      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 21:32:19:009   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 21:32:19:009   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 21:32:19:009   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 21:32:19:009   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 21:32:19:009 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 21:32:19:025      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 21:32:19:025      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 21:32:19:025   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 21:32:19:025   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 21:32:19:041      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 21:32:19:041      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 21:32:19:041      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 21:32:19:056      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 21:32:19:056 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 21:32:19:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 21:32:19:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 21:32:19:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 21:32:19:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 21:32:19:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 21:32:19:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 21:32:19:056 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 21:32:19:056      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 21:32:19:056      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 21:32:19:056      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 21:32:19:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 21:32:19:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 21:32:19:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 21:32:19:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 21:32:19:056      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 21:32:19:056      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 21:32:19:056       Sound.cpp(00148)] :Stop
[11/07 21:32:19:056       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 21:32:19:056      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 21:32:19:056      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 21:32:19:056      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 21:32:19:056      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 21:32:19:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 21:32:19:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 21:32:19:056      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 21:32:19:056      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 21:32:19:447      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 23:31:46:166 TranNmsProc.cpp(00508)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime_RMS()=[14400], m_pDevCmn->m_DelayTime=[14400]
[11/07 23:31:46:166 TranNmsProc.cpp(00509)] :IniGetInt(_ATMINFO_PATH, _APPFLD_RMS, _APPKEY_RMSSENDINTERVAL), 4) = 4, IniGetInt(_ATMINFO_PATH, _APPFLD_RMS, _APPKEY_RMSSTATUSSEND) = 1
[11/07 23:31:46:166 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 23:31:46:181      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 23:31:46:181   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:31:46:181   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:31:46:197      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 23:31:46:197      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 23:31:46:197      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 23:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 23:31:46:259 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 23:31:46:259      DevApl.cpp(01996)] :fnAPL_SetHealthCheckTimer_RMS: pMode=1, pTime=11
[11/07 23:31:46:259 TranNmsProc.cpp(02454)] :fnAPP_SendStatusToRMS()
[11/07 23:31:46:259 TranNmsProc.cpp(02464)] :fnAPP_SendStatusToRMS() m_nRMSDisplay=[0],m_ModemStatus=[3]
[11/07 23:31:46:259 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:31:46:259 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:31:46:259 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:31:46:259 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 23:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 23:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 23:31:46:259      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 23:31:46:275      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 23:31:46:431 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[4], lpbtData[0])
[11/07 23:31:46:431 TranNmsProc.cpp(01755)] :SendMessageToRMSAgent: Reporting Status of ATM to RMSAgent (dwData[4], lpbtData[0])
[11/07 23:31:46:431 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:31:46:431 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:31:46:431 TranNmsProc.cpp(02512)] :fnAPP_SendStatusToRMS : fstrAPL_GetErrorCode=[0000000]
[11/07 23:31:46:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [  [RMS IN PROGRESS]])
[11/07 23:31:46:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/  [RMS IN PROGRESS]]
[11/07 23:31:46:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [  PROCESSING.....  ])
[11/07 23:31:46:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/  PROCESSING.....  ]
[11/07 23:31:46:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue5], szDataValue [  PLEASE WAIT A MOMENT ...])
[11/07 23:31:46:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue5/  PLEASE WAIT A MOMENT ...]
[11/07 23:31:46:431      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 23:31:46:431      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD001.swf)
[11/07 23:31:46:431      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD001.swf)
[11/07 23:31:46:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 23:31:46:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 23:31:46:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD001.swf])
[11/07 23:31:46:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD001.swf]
[11/07 23:31:46:431      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 23:31:46:431      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(1)
[11/07 23:31:46:431       Sound.cpp(00148)] :Stop
[11/07 23:31:46:431       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 23:31:46:431      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 23:31:46:431      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 23:31:46:431      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 23:31:46:431      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 23:31:46:431   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:31:46:431   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:31:46:431      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 23:31:46:806      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 23:31:46:806      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[1], nInputSec[0]):return(0)
[11/07 23:31:48:369 TranNmsProc.cpp(02526)] :fnAPP_SendStatusToRMS : m_nRMSDisplay=[1],
[11/07 23:31:48:369 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[1]
[11/07 23:31:48:525 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 23:31:48:525      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 23:31:48:525      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 23:31:48:525 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 23:31:48:525 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 23:31:48:525      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 23:31:48:525      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 23:31:48:806      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 23:31:49:056      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 23:31:49:072      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 23:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 23:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 23:31:49:072      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 23:31:49:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:31:49:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:31:49:087      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 23:31:49:087      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 23:31:49:087      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 23:31:49:087      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 23:31:49:087      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 23:31:49:087      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 23:31:49:087      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 23:31:49:087      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 23:31:49:087      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 23:31:49:087      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 23:31:49:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 23:31:49:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 23:31:49:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 23:31:49:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 23:31:49:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 23:31:49:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 23:31:49:134      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 23:31:49:134 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:31:49:134 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:31:49:134 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:31:49:134 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:31:49:134 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[02], m_nRMSDisplay=[0]
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 23:31:49:134      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 23:31:49:134      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 23:31:49:134      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 23:31:49:134      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 23:31:49:134      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 23:31:49:134       Sound.cpp(00148)] :Stop
[11/07 23:31:49:134       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 23:31:49:134      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 23:31:49:134      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 23:31:49:134      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 23:31:49:134      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 23:31:49:134   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:31:49:134   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:31:49:134      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 23:31:49:134      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 23:31:49:134      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 23:31:50:697      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 23:31:50:697 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 23:31:50:822 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 23:31:50:837      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 23:31:50:837 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[3], m_ModemStatus=[2], AtmStatus=[4]
[11/07 23:31:50:994 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 23:31:50:994 AtmModeCtrl.cpp(01282)] :GetMemorySize[12836864]
[11/07 23:31:50:994 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 23:31:50:994      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 23:31:50:994      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 23:31:50:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 23:31:50:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 23:31:50:994   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 23:31:50:994   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 23:31:50:994 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 23:31:50:994 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 23:31:51:041      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 23:31:51:041      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 23:31:51:056      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 23:31:51:056      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 23:31:51:056      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 23:31:51:056      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 23:31:51:056      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 23:31:51:056 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:31:51:056 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:31:51:056 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:31:51:056 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:31:51:337      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 23:31:51:962      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 23:31:51:962   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 23:31:51:962   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 23:31:51:962 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 23:31:52:072     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 23:31:52:072     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 23:31:52:072     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 23:31:52:072     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 23:31:52:072     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 23:31:52:072     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 23:31:52:119     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 23:31:52:166     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 23:31:52:166     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 23:31:52:166 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 23:31:52:166 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 23:31:52:166      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 23:31:52:181   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 23:31:52:181   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 23:31:52:181   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 23:31:52:181   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 23:31:52:181 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 23:31:52:197      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 23:31:52:197      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 23:31:52:197   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:31:52:197   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:31:52:212      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 23:31:52:212      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 23:31:52:212      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 23:31:52:228      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 23:31:52:228 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 23:31:52:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 23:31:52:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 23:31:52:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 23:31:52:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 23:31:52:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 23:31:52:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 23:31:52:228 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 23:31:52:228      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 23:31:52:228      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 23:31:52:228      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 23:31:52:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 23:31:52:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 23:31:52:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 23:31:52:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 23:31:52:236      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 23:31:52:236      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 23:31:52:236       Sound.cpp(00148)] :Stop
[11/07 23:31:52:236       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 23:31:52:236      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 23:31:52:236      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 23:31:52:236      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 23:31:52:236      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 23:31:52:236   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:31:52:236   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:31:52:236      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 23:31:52:236      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 23:31:52:572      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 23:31:53:791 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[2]
[11/07 23:32:15:259 TranNmsProc.cpp(00317)] :(int)m_pDevCmn->fnAPL_GetHealthGapTime()=[7200], m_pDevCmn->m_DelayTime=[7200]
[11/07 23:32:15:259 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[2], InitFlag[1], WaitFlag[1])
[11/07 23:32:15:275      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[2], nPinInputMode=[1]
[11/07 23:32:15:275   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:32:15:275   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:32:15:291      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 23:32:15:291      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 23:32:15:291      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 23:32:15:400      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 23:32:15:400 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 23:32:15:400 TranNmsProc.cpp(00345)] :fnAPP_NmsProc(): fnAPL_GetHealthGapTime()=[7200], m_DelayTime=[7200]
[11/07 23:32:15:431 TranNmsProc.cpp(00351)] :Send Health Check : AtmStatus(ATM_CUSTOM     ), AtmStatusSave(ATM_CUSTOM     )
[11/07 23:32:15:431 TranNmsProc.cpp(00352)] :Send Health Check : 2
[11/07 23:32:15:431 TranMainProc.cp(00141)] :fnAPP_MainTranProc(60)
[11/07 23:32:15:478 TranMainProc.cp(00182)] :TranStatus[60]
[11/07 23:32:15:478 TranMainProc.cp(00220)] :fnAPP_TranMainProc:m_pDevCmn->TranStatus[60]
[11/07 23:32:15:478 TranMainProc.cp(01137)] :fnAPP_TranHealthCheckProc() m_pDevCmn->TranStatus:[60]
[11/07 23:32:15:478 TranMainProc.cp(01138)] :TranCode:[0]
[11/07 23:32:15:478 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[2]
[11/07 23:32:15:478 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[1], lpbtData[0])
[11/07 23:32:15:478 TranNmsProc.cpp(01746)] :SendMessageToRMSAgent: Handle Release Requesting (dwData[1], lpbtData[0])
[11/07 23:32:15:478 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:32:15:587 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:32:15:759 TranNmsProc.cpp(01716)] :fnAPP_CheckRMSAction:: Start While Loop
[11/07 23:32:15:759 TranNmsProc.cpp(01736)] :fnAPP_CheckRMSAction:: Return OK
[11/07 23:32:15:759      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 23:32:15:759      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 23:32:15:759      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 23:32:15:759      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 23:32:15:759      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 23:32:15:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 23:32:15:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 23:32:15:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 23:32:15:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 23:32:15:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 23:32:15:775      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 23:32:15:775     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 23:32:15:775     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 23:32:15:775     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 23:32:15:837     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 23:32:15:884     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 23:32:15:884     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 23:32:15:884 TranMainProc.cp(01162)] :TranCode:[1060]
[11/07 23:32:15:884      DevApl.cpp(01849)] :[PROCESS COUNT] : 3
[11/07 23:32:16:134      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[30000000])
[11/07 23:32:16:150 TranHostProc.cp(00074)] :fnApp_ConnectHostAndSendData()
[11/07 23:32:16:150 TranHostProc.cp(00075)] :TranCode(1060), m_pDevCmn->TranStatus(60)
[11/07 23:32:16:150   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [   (Health Check)])
[11/07 23:32:16:150   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/   (Health Check)]
[11/07 23:32:16:166      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0], nPinInputMode[1], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 23:32:16:166      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD009.swf)
[11/07 23:32:16:166      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD009.swf)
[11/07 23:32:16:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 23:32:16:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 23:32:16:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD009.swf])
[11/07 23:32:16:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD009.swf]
[11/07 23:32:16:166      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 23:32:16:166      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(9)
[11/07 23:32:16:166       Sound.cpp(00148)] :Stop
[11/07 23:32:16:166       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 23:32:16:166      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 23:32:16:166      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 23:32:16:166      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 23:32:16:166      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[1]
[11/07 23:32:16:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:32:16:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:32:16:166      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 23:32:16:556      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 23:32:16:556      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[9], nInputSec[0]):return(0)
[11/07 23:32:17:337 TranHostProc.cp(02505)] :fnAPP_SendHostMake(RealFlag[1])
[11/07 23:32:17:337 TranHostProc.cp(00860)] :fnAPP_SendHostMakeSet(RealFlag[1])
[11/07 23:32:17:337 TranHostProc.cp(00886)] :fnAPP_SendHostMakeSet():return
[11/07 23:32:17:337 TranHostProc.cp(00734)] :fnAPP_SendHostMakeHeader(RealFlag[1], TranCode[1060])
[11/07 23:32:17:337 TranHostProc.cp(00852)] :fnAPP_SendHostMakeHeader()ReqMsgHeader=[H0.1234569030    H0]:return
[11/07 23:32:17:337 TranHostProc.cp(00893)] :fnAPP_SendHostMakeMsg(TranCode[1060] RealFlag[1])
[11/07 23:32:17:337 TranHostProc.cp(01431)] :HOST SELECTED =[STANDARD1]
[11/07 23:32:17:337 TranHostProc.cp(01936)] :fnAPP_GetATMErrorCode()
[11/07 23:32:17:337 TranHostProc.cp(01945)] :Error Code:[0000000]
[11/07 23:32:17:337 TranHostProc.cp(01948)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_CSH)[0]
[11/07 23:32:17:337 TranHostProc.cp(02014)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_SPR)[0]
[11/07 23:32:17:369 TranHostProc.cp(02040)] :m_pDevCmn->fnAPL_GetDownDevice(DEV_PIN)[0]
[11/07 23:32:17:369      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 23:32:17:369      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 23:32:17:369 TranHostProc.cp(02065)] :strTemp (CDU+SPR+PIN+Extra) = []
[11/07 23:32:17:369 TranHostProc.cp(02142)] :strReturn:[0000000]
[11/07 23:32:17:369 TranHostProc.cp(01606)] :HealthReqMsg2.ErrorCode_V:[0000000]
[11/07 23:32:17:369 TranHostProc.cp(01929)] :fnAPP_SendHostMakeMsg():return
[11/07 23:32:17:369 TranHostProc.cp(02560)] :fnAPP_SendHostMakeBuffer(RealFlag[1]), m_pDevCmn->TranStatus=[60]
[11/07 23:32:17:369 TranHostProc.cp(02636)] :fnAPP_SendHostMakeBuffer(RealFlag[1]):return(71186348)
[11/07 23:32:17:369 TranHostProc.cp(02552)] :fnAPP_SendHostMake(RealFlag[1]):return(59)
[11/07 23:32:17:369 TranHostProc.cp(00254)] :SendLength(59), m_pDevCmn->fnAPL_CheckHostLine()=[1]
[11/07 23:32:17:369 TranNmsProc.cpp(01483)] :fnAPP_SendData()
[11/07 23:32:17:400      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||ON||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 23:32:17:400 TranNmsProc.cpp(01706)] :fnAPP_CheckRMSAction::m_ModemStatus=[3]
[11/07 23:32:17:400     NetWork.cpp(00164)] :[CheckTcpipSetting] strFirstAddr : 192.168.198.199, strFirstPort : 45000
[11/07 23:32:17:400     NetWork.cpp(00469)] :SEND IP INFORMATION[192.168.198.199][45000][0]

[11/07 23:32:17:400  VISAIICtrl.cpp(00077)] :[SendData] Visa send data!!!
[11/07 23:32:17:400       TCPIP.cpp(00040)] :LineOpen start[-1][0]
[11/07 23:32:17:400    CESocket.cpp(00116)] :Create() start

[11/07 23:32:17:400    CESocket.cpp(00205)] :Create() return - socketType: 1 bufferSize 4096
[11/07 23:32:17:400    CESocket.cpp(00220)] :Connect() start - socket:576 address: 192.168.198.199 port: 45000
[11/07 23:32:17:416    CESocket.cpp(00441)] :Connect() OK
[11/07 23:32:17:416    FlowCtrl.cpp(00111)] :SetTimer : 45

[11/07 23:32:17:416  VISAIICtrl.cpp(00111)] :FLOW MATRIX START

[11/07 23:32:17:416  VISAIICtrl.cpp(00288)] :[VISA FLOW_MATRIX] ENQ Option : ENQ REQUIRED
[11/07 23:32:17:416  VISAIICtrl.cpp(00309)] :[VISA FLOW_MATRIX] request type : H0, protocol : STANDARD1
[11/07 23:32:17:416  VISAIICtrl.cpp(00566)] :FLOW CONNECT[43]

[11/07 23:32:17:416    FlowCtrl.cpp(00111)] :SetTimer : 30

[11/07 23:32:19:009    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 23:32:19:009    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 23:32:19:009       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 23:32:19:134  VISAIICtrl.cpp(00328)] :FLOW ENQ RECEIVE[5]

[11/07 23:32:19:134    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 23:32:19:134       TCPIP.cpp(00091)] :LineSendData
[11/07 23:32:19:134    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 23:32:19:134    CESocket.cpp(00520)] :Send() end - total sendLen: 62
[11/07 23:32:19:134  VISAIICtrl.cpp(00337)] :DATA SEND[LEN:62]

[11/07 23:32:19:259    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 23:32:19:259    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 23:32:19:259       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 23:32:19:291  VISAIICtrl.cpp(00349)] :FLOW ACK RECEIVE[6]

[11/07 23:32:19:291    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 23:32:19:478    CESocket.cpp(00755)] :receive Data(thread): [len:24]
[11/07 23:32:19:478    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 24
[11/07 23:32:19:478       TCPIP.cpp(00123)] :receive Data(put_data): [len: 24]
[11/07 23:32:19:603  VISAIICtrl.cpp(00379)] :FLOW STX RECEIVE[2]

[11/07 23:32:19:603    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 23:32:19:603  VISAIICtrl.cpp(00476)] :FLOW DATA RECEIVE OK[20]

[11/07 23:32:19:603    FlowCtrl.cpp(00111)] :SetTimer : 60

[11/07 23:32:19:603       TCPIP.cpp(00091)] :LineSendData
[11/07 23:32:19:603    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 23:32:19:603    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 23:32:19:697    CESocket.cpp(00755)] :receive Data(thread): [len:1]
[11/07 23:32:19:697    CESocket.cpp(00771)] :OnReceive(buf, bytesRead) : 1
[11/07 23:32:19:697       TCPIP.cpp(00123)] :receive Data(put_data): [len: 1]
[11/07 23:32:19:759  VISAIICtrl.cpp(00513)] :FLOW EOT RECEIVE[4]

[11/07 23:32:19:759    FlowCtrl.cpp(00111)] :SetTimer : 0

[11/07 23:32:19:759       TCPIP.cpp(00091)] :LineSendData
[11/07 23:32:19:759    CESocket.cpp(00471)] :Send() start - m_socketState: 3
[11/07 23:32:19:759    CESocket.cpp(00520)] :Send() end - total sendLen: 1
[11/07 23:32:19:775       TCPIP.cpp(00082)] :line close start
[11/07 23:32:19:775    CESocket.cpp(00755)] :receive Data(thread): [len:-1]
[11/07 23:32:19:775    CESocket.cpp(00463)] :Disconnect() End

[11/07 23:32:19:775    CESocket.cpp(00766)] :WSAGetLastError(): 183
[11/07 23:32:19:775     NetWork.cpp(00500)] :SEND SUCCESS[0]

[11/07 23:32:19:775    CESocket.cpp(00789)] :readThread() return - socketType: [1]

[11/07 23:32:19:775    CESocket.cpp(00637)] :StartThread() End - socketState:[0]
[11/07 23:32:19:775      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[PROCESS])
[11/07 23:32:19:775   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [PROCESS])
[11/07 23:32:19:775   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/PROCESS]
[11/07 23:32:19:775      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 23:32:19:775 TranHostProc.cp(00344)] :fnAPP_SendHost():return T_SEND_OK
[11/07 23:32:19:775 TranHostProc.cp(00351)] :fnAPP_RecvHost()
[11/07 23:32:19:791 TranHostProc.cp(02682)] :fnAPP_RecvHost()
[11/07 23:32:19:791  VISAIICtrl.cpp(00128)] :DATA RECEIVE RECEIVE[H0.1234569030    H0][LEN:21]

[11/07 23:32:19:791     NetWork.cpp(00559)] :[RecvData] NETWORK => return OK
[11/07 23:32:19:791      DevNet.cpp(00133)] :[fnNET_RecvData] nReturn : 0
[11/07 23:32:19:791 TranNmsProc.cpp(01623)] :fnAPP_RecvData(nRecvResult[0] TempLength[21])
[11/07 23:32:19:791      DevScr.cpp(00591)] :fnSCR_DisplayProgress(strStepMsg[FINISH])
[11/07 23:32:19:791   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APProgress], szDataValue [FINISH])
[11/07 23:32:19:791   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APProgress/FINISH]
[11/07 23:32:19:791      DevScr.cpp(00598)] :fnSCR_DisplayProgress(...):return(0)
[11/07 23:32:19:791 TranHostProc.cp(03738)] :fnAPP_RecvAnal()
[11/07 23:32:19:791 TranHostProc.cp(03862)] :m_strArrRecvData[0]=[H0.123456]
[11/07 23:32:19:791 TranHostProc.cp(03862)] :m_strArrRecvData[1]=[9030    ]
[11/07 23:32:19:791 TranHostProc.cp(03862)] :m_strArrRecvData[2]=[H0]
[11/07 23:32:19:791 TranHostProc.cp(03863)] :m_strArrRecvData.GetSize(1)=[3]
[11/07 23:32:19:791 TranHostProc.cp(04590)] :fnAPP_RecvAnal():return
[11/07 23:32:19:791 TranHostProc.cp(03408)] :fnAPP_RecvHost():return RECEIVE_OK
[11/07 23:32:19:791 TranHostProc.cp(00037)] :fnApp_HostCommunication() Communication Success : OK
[11/07 23:32:19:791      DevApl.cpp(01849)] :[PROCESS COUNT] : 5
[11/07 23:32:20:072      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[50000000])
[11/07 23:32:20:087 TranMainProc.cp(01192)] :fnAPP_TranHealthCheckProc():return
[11/07 23:32:20:087 TranTermProc.cp(01038)] :fnAPP_TerminateProc(TerminateCode[0])
[11/07 23:32:20:087 TranTermProc.cp(01053)] :fnAPP_TerminateProc::Return-2
[11/07 23:32:20:087 TranTermProc.cp(01059)] :fnAPP_TerminateProc::Return-1
[11/07 23:32:20:087 TranTermProc.cp(01068)] :fnAPP_TerminateProc::ChkID=[d]
[11/07 23:32:20:134 TranTermProc.cp(01071)] :fnAPP_TerminateProc::Return, TerminateCode=[0]
[11/07 23:32:20:134 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:32:20:134 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:32:20:134 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:32:20:134 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:32:20:134 TranMainProc.cp(00197)] :fnAPP_MainTranProc(...):return(1)
[11/07 23:32:20:134 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:32:20:134 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:32:20:134 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:32:20:134 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:32:20:134      DevApl.cpp(01918)] :fnAPL_SetHealthCheckTimer: pMode=1, pTime=11
[11/07 23:32:20:291 AtmModeCtrl.cpp(01010)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_CUSTOM     ]->[ATM_READY      ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 23:32:20:291      DevCmn.cpp(00919)] :fstrMCU_GetErrorCode()
[11/07 23:32:20:291      DevCmn.cpp(00926)] :fstrMCU_GetErrorCode():return(0000000)
[11/07 23:32:20:291 AtmModeCtrl.cpp(01014)] :strMCUErrorCode = [0000000]
[11/07 23:32:20:291 AtmModeCtrl.cpp(01030)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 23:32:20:291      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 23:32:20:291      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 23:32:20:556      DevApl.cpp(01849)] :[PROCESS COUNT] :
[11/07 23:32:21:150      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[READY||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 23:32:21:166      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 23:32:21:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 23:32:21:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 23:32:21:166      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x224], nAction=[2], nPinInputMode=[1]
[11/07 23:32:21:166   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:32:21:166   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:32:21:181      DevApl.cpp(05819)] :Disable Card Reader... NON EMV CASE
[11/07 23:32:21:181      DevCmn.cpp(01138)] :fnMCU_EntryDisable()
[11/07 23:32:21:181      DevCmn.cpp(01146)] :fnMCU_EntryDisable():return(0)
[11/07 23:32:21:181      DevCmn.cpp(05264)] :fnPIN_EntryDisable()
[11/07 23:32:21:181      DevCmn.cpp(05271)] :fnPIN_EntryDisable():return(0)
[11/07 23:32:21:181      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4], nValue[0])
[11/07 23:32:21:181      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[0])
[11/07 23:32:21:181      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[11], nValue[0])
[11/07 23:32:21:181      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[80], nValue[0])
[11/07 23:32:21:181      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[100], nValue[0])
[11/07 23:32:21:197      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[200], nValue[0])
[11/07 23:32:21:197      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[4000], nValue[0])
[11/07 23:32:21:197      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[2000], nValue[0])
[11/07 23:32:21:197      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[400], nValue[0])
[11/07 23:32:21:197      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[800], nValue[0])
[11/07 23:32:21:197      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[1000], nValue[0])
[11/07 23:32:21:228      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 23:32:21:228 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:32:21:228 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:32:21:228 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:32:21:228 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:32:21:228 TranNmsProc.cpp(02536)] :fnAPP_RMSProgressDisplay(): m_ModemStatus=[03], m_nRMSDisplay=[0]
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue1], szDataValue [])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue1/]
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue2], szDataValue [            * TERMINAL:            9030])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue2/            * TERMINAL:            9030]
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue3], szDataValue [])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue3/]
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue4], szDataValue [OUT OF SERVICE])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue4/OUT OF SERVICE]
[11/07 23:32:21:228      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[1], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER])
[11/07 23:32:21:228      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD003.swf)
[11/07 23:32:21:228      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD003.swf)
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD003.swf])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD003.swf]
[11/07 23:32:21:228      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 23:32:21:228      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(3)
[11/07 23:32:21:228       Sound.cpp(00148)] :Stop
[11/07 23:32:21:228       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 23:32:21:228      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 23:32:21:228      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 23:32:21:228      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 23:32:21:228      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 23:32:21:228   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:32:21:228   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:32:21:228      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 23:32:21:228      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 23:32:21:228      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[3], nInputSec[0]):return(0)
[11/07 23:32:22:791      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 23:32:22:791 AtmModeCtrl.cpp(01061)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 23:32:22:900 AtmModeCtrl.cpp(01233)] :READY MODE : NO ERROR DETECTED => ATM_CUSTOM
[11/07 23:32:22:916      DevApl.cpp(07799)] :fnAPL_ClerkInformation:OP_STATUS[CUSTOM||ON||OFF||OFF||ON||******||******||******||9030||RUN||            ||     ||9030||123456||V01.05.00||11-06 2017||102||NOT_SET||ON,ON,ON,OFF,OFF,OFF,OFF,OFF|| ||]
[11/07 23:32:22:916 TranNmsProc.cpp(00082)] :fnAPP_NmsProc() m_ModemStatusSave[2], m_ModemStatus=[3], AtmStatus=[4]
[11/07 23:32:23:072 AtmModeCtrl.cpp(01281)] :

¡á¡á¡á¡á¡á¡á¡á¡á¡á¡áAtmStatus[ATM_READY      ]->[ATM_CUSTOM     ]¡á¡á¡á¡á¡á¡á¡á¡á¡á¡á
[11/07 23:32:23:072 AtmModeCtrl.cpp(01282)] :GetMemorySize[15982592]
[11/07 23:32:23:072 AtmModeCtrl.cpp(01291)] :m_pTranCmn->m_bEMVEnabled = [0]
[11/07 23:32:23:072      DevCmn.cpp(01916)] :EMV_Initial()
[11/07 23:32:23:072      DevCmn.cpp(01920)] :EMV_Initial() return
[11/07 23:32:23:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoLeft], szDataValue [LogoLeft.jpg])
[11/07 23:32:23:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoLeft/LogoLeft.jpg]
[11/07 23:32:23:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [topLogoRight], szDataValue [DefaultLogo.swf])
[11/07 23:32:23:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[topLogoRight/DefaultLogo.swf]
[11/07 23:32:23:072 AtmModeCtrl.cpp(01350)] :DUAL BALANCE ENABLED
[11/07 23:32:23:072 AtmModeCtrl.cpp(01439)] :strAPCOuntryCode = [U], ATMCONFIG.CountryNote=[USD]
[11/07 23:32:23:103      DevApl.cpp(02077)] :fnAPL_SetStatusCheckTimer()
[11/07 23:32:23:103      DevCmn.cpp(06079)] :m_ADA_TTSValue=[2])
[11/07 23:32:23:119      DevCmn.cpp(05975)] :fvVol_AdjustVolume(IncCec=0, nVolumeLevel=1)
[11/07 23:32:23:119      DevCmn.cpp(05990)] :  New Volume Level = [1]
[11/07 23:32:23:119      DevCmn.cpp(05996)] :  MinVol=[0], MaxVol=[65535], Target Volume = [6553]
[11/07 23:32:23:119      DevCmn.cpp(05926)] :fvVOL_SetVolume(nVolLevel[6553])
[11/07 23:32:23:119      DevCmn.cpp(05930)] :fvVOL_SetVolume(...):return
[11/07 23:32:23:119 TranNmsProc.cpp(01743)] :fnAPP_SendMessageToRMSAgent(dwData[2], lpbtData[0])
[11/07 23:32:23:119 TranNmsProc.cpp(01749)] :SendMessageToRMSAgent: Handle is Released by ATM (dwData[2], lpbtData[0])
[11/07 23:32:23:119 TranNmsProc.cpp(01799)] :===>>> ATM to RMSAgent Message Sending ...
[11/07 23:32:23:119 TranNmsProc.cpp(01824)] :fnAPP_SendMessageToRMSAgent() Return
[11/07 23:32:23:556      DevApl.cpp(01849)] :[PROCESS COUNT] : 0
[11/07 23:32:23:869      DevCmn.cpp(04723)] :fnSPL_SetSegment(szValue[39990000])
[11/07 23:32:23:869   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindLanguage], szDataValue [ENGLISH])
[11/07 23:32:23:869   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindLanguage/ENGLISH]
[11/07 23:32:23:869 TranMenuProc.cp(00079)] :fnAPP_MainMenuDisplay(): ScrNum=[101], TranAvail=[0x20], TranAvailSave=[0x20]
[11/07 23:32:23:947     TranCmn.cpp(01091)] :fnAPP_SetEJournalData(0)
[11/07 23:32:23:947     TranCmn.cpp(01326)] :m_strMDBJnlData[]
[11/07 23:32:23:947     TranCmn.cpp(01327)] :fnAPP_SetEJournalData():return
[11/07 23:32:23:947     TranCmn.cpp(00473)] :fnAPP_InitializeDS() [V01.05.00.00D CD                        ]
[11/07 23:32:23:947     TranCmn.cpp(00663)] :m_KeyMode = [3]
[11/07 23:32:23:947     TranCmn.cpp(00680)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 23:32:23:994     TranCmn.cpp(00686)] :LastDispensed Notes = [0,0,0,0,0]
[11/07 23:32:24:041     TranCmn.cpp(00690)] :LastDispensed Amount = [0]
[11/07 23:32:24:041     TranCmn.cpp(01066)] :fnAPP_InitializeDS():return
[11/07 23:32:24:041 TranMenuProc.cp(00092)] :fnAPP_MainMenuDisplay(): MachineType[3], MachineKind[9], TranAvail[0x20], WithAvail[0x20], DepAvail[0x00]
[11/07 23:32:24:041 TranMenuProc.cp(00386)] :fnAPP_MainMenuDisplay(): fnAPD_CardEnDisable(ENABLE, TRUE, TRUE)
[11/07 23:32:24:041      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 23:32:24:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APState8], szDataValue [off])
[11/07 23:32:24:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APState8/off]
[11/07 23:32:24:056   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue22], szDataValue [REG])
[11/07 23:32:24:056   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue22/REG]
[11/07 23:32:24:056 TranDevProc.cpp(00231)] :fnAPD_CardEnDisable(Action[1], InitFlag[1], WaitFlag[1])
[11/07 23:32:24:072      DevCmn.cpp(00888)] :fnMCU_ClearErrorCode()
[11/07 23:32:24:072      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x4], nAction=[1], nPinInputMode=[1]
[11/07 23:32:24:072   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:32:24:072   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:32:24:087      DevApl.cpp(05796)] :Enabling Magnetic Stripe Reading, Set ChipPower=OFF, LATCH=OFF, Read AvailableRawData
[11/07 23:32:24:087      DevCmn.cpp(01105)] :fnMCU_EntryEnable(nWaitSec[-1])
[11/07 23:32:24:087      DevCmn.cpp(01114)] :fnMCU_EntryEnable(...):return(0)
[11/07 23:32:24:103      DevCmn.cpp(04611)] :fnLGT_SetFlicker(nIndex[8], nValue[1])
[11/07 23:32:24:103 TranDevProc.cpp(00262)] :fnAPD_CardEnDisable(...):return
[11/07 23:32:24:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue8], szDataValue [Welcome 1])
[11/07 23:32:24:103   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue8/Welcome 1]
[11/07 23:32:24:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue9], szDataValue [Welcome 2])
[11/07 23:32:24:103   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue9/Welcome 2]
[11/07 23:32:24:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APValue10], szDataValue [Welcome 3])
[11/07 23:32:24:103   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APValue10/Welcome 3]
[11/07 23:32:24:103 TranMenuProc.cp(00494)] :fnAPP_MainMenuDisplay() ScrNum:[101], PinInputMode:[16], m_strADAText=[]:
[11/07 23:32:24:103      DevScr.cpp(00423)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0], nPinInputMode[16], szCardData[], nPinPassWordMin[4], nPinPassWordMax[6], nPinPassWordAuto[0], szPinPassWordTerm[ENTER,CANCEL])
[11/07 23:32:24:103      DevScr.cpp(00353)] :fstrSCR_GetCheckScreen(...) 1 (C:\NHAtm\App\SWF\NHD101.swf)
[11/07 23:32:24:103      DevScr.cpp(00361)] :fstrSCR_GetCheckScreen(...):return(C:\NHAtm\App\SWF\NHD101.swf)
[11/07 23:32:24:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [kindATM], szDataValue [TOUCH])
[11/07 23:32:24:103   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[kindATM/TOUCH]
[11/07 23:32:24:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [APCenterMovie], szDataValue [C:\NHAtm\App\SWF\NHD101.swf])
[11/07 23:32:24:103   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[APCenterMovie/C:\NHAtm\App\SWF\NHD101.swf]
[11/07 23:32:24:103      DevScr.cpp(00904)] :fnSCR_PlaySound(...):nPlayMode=(0)
[11/07 23:32:24:103      DevScr.cpp(00910)] :fnSCR_PlaySound:: nPlayMode=(0), nPlayIndex=(0), nScreenNo=(101)
[11/07 23:32:24:103       Sound.cpp(00148)] :Stop
[11/07 23:32:24:103       Sound.cpp(00163)] :Stop: dwResult2 = [0]
[11/07 23:32:24:103      DevScr.cpp(00143)] :fnSCR_ClearKeyData()
[11/07 23:32:24:103      DevScr.cpp(00149)] :fnSCR_ClearKeyData():return(1)
[11/07 23:32:24:103      DevScr.cpp(00531)] :AtmDefine.OpDevice[0], GetShareData(OP_MODE)=[APOK]
[11/07 23:32:24:103      DevApl.cpp(05753)] :AtmDefine.MachineKind=[9], nDevId[0x200], nAction=[1], nPinInputMode=[16]
[11/07 23:32:24:103   WinAtmCtl.cpp(00392)] :CWinAtmCtrl::OnDisplayData( szDataName [ADAState], szDataValue [OFF])
[11/07 23:32:24:103   WinAtmCtl.cpp(01132)] :[HTML] [NHATM.HTM] MAIN SCREEN REQUEST[ADAState/OFF]
[11/07 23:32:24:103      DevCmn.cpp(05225)] :fnPIN_EntryEnable(nEnableMode[1], nMinKeyCount[0], nMaxKeyCount[0], bAutoEnd[0], szActiveKeys[1,2,3,4,5,6,7,8,9,0,CANCEL,CLEAR,ENTER], szTerminatorKeys[], szCardData[], nTimeout[-1])
[11/07 23:32:24:103      DevApl.cpp(11076)] :fnAPL_IsEpp512k() EPP EP VERSION:[V 08.00.00]
[11/07 23:32:24:478      DevScr.cpp(00552)] :fnSCR_DisplayScreen(nScreenNo[101], nInputSec[0]):return(0)
[11/07 23:32:26:150 TranNmsProc.cpp(02182)] :<<<--- RMSAgent to ATM: m_ModemStatus=[3]
